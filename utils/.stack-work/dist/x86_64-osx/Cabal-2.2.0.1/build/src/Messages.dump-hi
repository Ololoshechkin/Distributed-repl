
==================== FINAL INTERFACE ====================
2019-10-09 08:18:11.648363 UTC

interface utils-0.1.0.0-ruQcw8wBHGC0OCiXN6O03:Messages 8044
  interface hash: 2b1b266565f4e23bc04e1255d1191d3a
  ABI hash: f163bf9a7a33e16d4758d509c538a791
  export-list hash: 2b742f6c5d63ad86c3250daafcad0741
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Messages.Assignment{Messages.Assignment}
  Messages.Constant{Messages.BoolConstant Messages.IntConstant Messages.StringConstant}
  Messages.DBComand{Messages.LoadDBComand Messages.PublishDBComand}
  Messages.DBMessage{Messages.LoadError Messages.LoadErrorForID Messages.LoadMessage Messages.LoadMessageWithID Messages.LoadResult Messages.LoadResultForID Messages.PublishMessage Messages.RegisterDBWorker}
  Messages.Expression{Messages.BracesExpression Messages.ConstantExpression Messages.IfThenElseExpression Messages.InvocationExpression Messages.LambdaDefExpression Messages.OperatorExpression Messages.VariableExpression}
  Messages.IfThenElse{Messages.IfThenElse}
  Messages.Invocation{Messages.Invocation}
  Messages.LambdaDef{Messages.LambdaDef}
  Messages.LoadComand{Messages.LoadComand}
  Messages.Loop{Messages.While}
  Messages.Message{Messages.CompileClientReply Messages.CompileClientRequest Messages.CompileWorkerReply Messages.CompileWorkerRequest Messages.RegisterWorker}
  Messages.Operator{Messages.BinaryOperator Messages.UnaryOperator}
  Messages.OperatorType{Messages.BoolType Messages.IntType Messages.StringType}
  Messages.Program{Messages.Program}
  Messages.ProgramResult{Messages.CompilationError Messages.Success}
  Messages.PublishComand{Messages.PublishComand}
  Messages.ReturnStatement{Messages.ReturnStatement}
  Messages.Statement{Messages.AssignmentStatement Messages.DBComandStatement Messages.InvocationStatement Messages.LoopStatement}
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      network-transport-0.5.2 text-1.2.3.1
orphans: hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         network-transport-0.5.2:Network.Transport text-1.2.3.1:Data.Text
                         text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Word 22a60783baa8ba4f33c4588b366fade3
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  binary-0.8.5.1:Data.Binary.Class ca30142b0b1a68ad57845f336fc35efd
import  -/  binary-0.8.5.1:Data.Binary.Get.Internal 1a063dbb1b51807d783806a64525f1eb
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  network-transport-0.5.2:Network.Transport 18cb17ad2d91e2c94ab38d1745341964
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryAssignment :: Data.Binary.Class.Binary Messages.Assignment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Assignment
                  Messages.$fBinaryAssignment_$cput
                  Messages.$fBinaryAssignment1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Assignment>_R))
                  Messages.$fBinaryAssignment_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryAssignment1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Assignment r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Assignment r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryAssignment_$cput ::
    Messages.Assignment -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Assignment) ->
                 case w of ww { Messages.Assignment ww1 ww2 ->
                 case Messages.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryAssignment_$sdefaultPutList ::
    [Messages.Assignment] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Assignment]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Assignment
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Assignment)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Assignment
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Assignment) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryAssignment_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Assignment]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
387bd43449f6efd27fec47b336086082
  $fBinaryConstant :: Data.Binary.Class.Binary Messages.Constant
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Constant
                  Messages.$fBinaryConstant_$cput
                  Messages.$fBinaryConstant1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Constant>_R))
                  Messages.$fBinaryConstant_$sdefaultPutList -}
387bd43449f6efd27fec47b336086082
  $fBinaryConstant1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Constant r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Constant r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
09480dd8314d5225d101009e2e5dbbf8
  $fBinaryConstant2 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt2 { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt2
                   Messages.$fBinaryConstant3 }) -}
af6c276dfa08b7999352ee63be55545b
  $fBinaryConstant3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fBinaryConstant4) -}
59a372f2b2762f40dbee396f29ef6544
  $fBinaryConstant4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
b0017950194e7770afce83cf0f2ab164
  $fBinaryConstant5 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
5db5f023bf78dc3f705ad3f280baeb84
  $fBinaryConstant6 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt5 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt5))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
e291098de650fffd368e6ea59f395e1d
  $fBinaryConstant7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
387bd43449f6efd27fec47b336086082
  $fBinaryConstant_$cput :: Messages.Constant -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Constant) ->
                 case Messages.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
387bd43449f6efd27fec47b336086082
  $fBinaryConstant_$sdefaultPutList ::
    [Messages.Constant] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Constant]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Constant
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Constant)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Constant
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Constant) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryConstant_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Constant]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryDBComand :: Data.Binary.Class.Binary Messages.DBComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBComand
                  Messages.$fBinaryDBComand_$cput
                  Messages.$fBinaryDBComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.DBComand>_R))
                  Messages.$fBinaryDBComand_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryDBComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.DBComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.DBComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryDBComand_$cput :: Messages.DBComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.DBComand) ->
                 case Messages.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryDBComand_$sdefaultPutList ::
    [Messages.DBComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.DBComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.DBComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.DBComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.DBComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.DBComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryDBComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.DBComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fBinaryDBMessage :: Data.Binary.Class.Binary Messages.DBMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBMessage
                  Messages.$fBinaryDBMessage_$cput
                  Messages.$fBinaryDBMessage1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.DBMessage>_R))
                  Messages.$fBinaryDBMessage_$sdefaultPutList -}
8d3e2aa07310548f23f662d16a6eddc3
  $fBinaryDBMessage1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.DBMessage r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.DBMessage r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fBinaryDBMessage_$cput ::
    Messages.DBMessage -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.DBMessage) ->
                 case Messages.$w$cput6 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fBinaryDBMessage_$sdefaultPutList ::
    [Messages.DBMessage] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.DBMessage]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.DBMessage
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.DBMessage)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.DBMessage
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.DBMessage) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryDBMessage_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.DBMessage]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryExpression :: Data.Binary.Class.Binary Messages.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Expression
                  Messages.$fBinaryExpression_$cput
                  Messages.$fBinaryExpression1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Expression>_R))
                  Messages.$fBinaryExpression_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryExpression1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Expression r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Expression r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryExpression_$cput ::
    Messages.Expression -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Expression) ->
                 case Messages.$w$cput1 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryExpression_$sdefaultPutList ::
    [Messages.Expression] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Expression]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Expression
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Expression)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Expression
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Expression) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryExpression_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Expression]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryIfThenElse :: Data.Binary.Class.Binary Messages.IfThenElse
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.IfThenElse
                  Messages.$fBinaryIfThenElse_$cput
                  Messages.$fBinaryIfThenElse1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.IfThenElse>_R))
                  Messages.$fBinaryIfThenElse_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryIfThenElse1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.IfThenElse r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.IfThenElse r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget6 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryIfThenElse_$cput ::
    Messages.IfThenElse -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.IfThenElse) ->
                 case w of ww { Messages.IfThenElse ww1 ww2 ww3 ->
                 case Messages.$w$cput7 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryIfThenElse_$sdefaultPutList ::
    [Messages.IfThenElse] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.IfThenElse]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.IfThenElse
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.IfThenElse)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.IfThenElse
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.IfThenElse) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryIfThenElse_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.IfThenElse]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryInvocation :: Data.Binary.Class.Binary Messages.Invocation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Invocation
                  Messages.$fBinaryInvocation_$cput
                  Messages.$fBinaryInvocation1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Invocation>_R))
                  Messages.$fBinaryInvocation_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryInvocation1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Invocation r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Invocation r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget7 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryInvocation_$cput ::
    Messages.Invocation -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Invocation) ->
                 case w of ww { Messages.Invocation ww1 ww2 ->
                 case Messages.$w$cput8 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryInvocation_$sdefaultPutList ::
    [Messages.Invocation] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Invocation]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Invocation
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Invocation)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Invocation
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Invocation) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryInvocation_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Invocation]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryInvocation_go ::
    [Messages.Expression] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLambdaDef :: Data.Binary.Class.Binary Messages.LambdaDef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LambdaDef
                  Messages.$fBinaryLambdaDef_$cput
                  Messages.$fBinaryLambdaDef1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.LambdaDef>_R))
                  Messages.$fBinaryLambdaDef_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLambdaDef1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.LambdaDef r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.LambdaDef r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget8 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLambdaDef_$cput ::
    Messages.LambdaDef -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.LambdaDef) ->
                 case w of ww { Messages.LambdaDef ww1 ww2 ->
                 case Messages.$w$cput9 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLambdaDef_$sdefaultPutList ::
    [Messages.LambdaDef] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.LambdaDef]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.LambdaDef
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.LambdaDef)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.LambdaDef
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.LambdaDef) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLambdaDef_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.LambdaDef]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLambdaDef_go ::
    [Messages.Statement] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoadComand :: Data.Binary.Class.Binary Messages.LoadComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LoadComand
                  Messages.$fBinaryLoadComand_$cput
                  Messages.$fBinaryLoadComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.LoadComand>_R))
                  Messages.$fBinaryLoadComand_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoadComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.LoadComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.LoadComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget11 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoadComand_$cput ::
    Messages.LoadComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.LoadComand) ->
                 case w of ww { Messages.LoadComand ww1 ww2 ->
                 case Messages.$w$cput4 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoadComand_$sdefaultPutList ::
    [Messages.LoadComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.LoadComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.LoadComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.LoadComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.LoadComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.LoadComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLoadComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.LoadComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoop :: Data.Binary.Class.Binary Messages.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Loop
                  Messages.$fBinaryLoop_$cput
                  Messages.$fBinaryLoop1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Loop>_R))
                  Messages.$fBinaryLoop_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoop1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Loop r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Loop r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget12 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoop_$cput :: Messages.Loop -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Loop) ->
                 case w of ww { Messages.While ww1 ww2 ->
                 case Messages.$w$cput12 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoop_$sdefaultPutList ::
    [Messages.Loop] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Loop]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Loop
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Loop)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Loop
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Loop) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLoop_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Loop]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryLoop_go :: [Messages.Statement] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
8d819ba2fa1783312488d0645a389cc0
  $fBinaryMessage :: Data.Binary.Class.Binary Messages.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Message
                  Messages.$fBinaryMessage_$cput
                  Messages.$fBinaryMessage1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Message>_R))
                  Messages.$fBinaryMessage_$sdefaultPutList -}
8d819ba2fa1783312488d0645a389cc0
  $fBinaryMessage1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Message r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Message r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget13 @ r ww1 ww2 ww3 ww4 w1 }) -}
8d819ba2fa1783312488d0645a389cc0
  $fBinaryMessage_$cput :: Messages.Message -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Message) ->
                 case Messages.$w$cput13 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
8d819ba2fa1783312488d0645a389cc0
  $fBinaryMessage_$sdefaultPutList ::
    [Messages.Message] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Message]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Message
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Message)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Message
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Message) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryMessage_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Message]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryOperator :: Data.Binary.Class.Binary Messages.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Operator
                  Messages.$fBinaryOperator_$cput
                  Messages.$fBinaryOperator1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Operator>_R))
                  Messages.$fBinaryOperator_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryOperator1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Operator r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Operator r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget14 @ r ww1 ww2 ww3 ww4 w1 }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fBinaryOperatorType ::
    Data.Binary.Class.Binary Messages.OperatorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fBinaryOperatorType_$cput
                  Messages.$fBinaryOperatorType7
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.OperatorType>_R))
                  Messages.$fBinaryOperatorType_$sdefaultPutList -}
bc68586a49c4359cb560d6ef920a6eb0
  $fBinaryOperatorType1 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
6403dc6e34457c5edc2631bd5a7ec4f8
  $fBinaryOperatorType2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt @ r w ww1 ww2 w2 }) -}
5f80f3b3690f4e6cd26a68bdbeedb561
  $fBinaryOperatorType3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
5a8a63c81f69510d82ddf8e9779f0e6f
  $fBinaryOperatorType4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt1 @ r w ww1 ww2 w2 }) -}
36d7cf81dbad8f3a72f01209a8e60d8a
  $fBinaryOperatorType5 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType6
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
4cf3dabc819f11bb5f1f259e8bb181e9
  $fBinaryOperatorType6 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt2 @ r w ww1 ww2 w2 }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fBinaryOperatorType7 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.OperatorType r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.OperatorType r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget15 @ r ww1 ww2 ww3 ww4 w1 }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fBinaryOperatorType_$cput ::
    Messages.OperatorType -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Messages.OperatorType) ->
                 case ds of wild {
                   Messages.IntType
                   -> Messages.$fBinaryOperatorType5
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Messages.StringType
                   -> Messages.$fBinaryOperatorType3
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Messages.BoolType
                   -> Messages.$fBinaryOperatorType1
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fBinaryOperatorType_$sdefaultPutList ::
    [Messages.OperatorType] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.OperatorType]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.OperatorType
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.OperatorType)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.OperatorType
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.OperatorType) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryOperatorType_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.OperatorType]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryOperator_$cput :: Messages.Operator -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Operator) ->
                 case Messages.$w$cput14 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryOperator_$sdefaultPutList ::
    [Messages.Operator] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Operator]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Operator
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Operator)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Operator
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Operator) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryOperator_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Operator]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryProgram :: Data.Binary.Class.Binary Messages.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Program
                  Messages.$fBinaryProgram_$cput
                  Messages.$fBinaryProgram1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Program>_R))
                  Messages.$fBinaryProgram_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryProgram1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Program r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Program r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget9 @ r ww1 ww2 ww3 ww4 w1 }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fBinaryProgramResult ::
    Data.Binary.Class.Binary Messages.ProgramResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ProgramResult
                  Messages.$fBinaryProgramResult_$cput
                  Messages.$fBinaryProgramResult1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.ProgramResult>_R))
                  Messages.$fBinaryProgramResult_$sdefaultPutList -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fBinaryProgramResult1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.ProgramResult r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Messages.ProgramResult r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget16 @ r ww1 ww2 ww3 ww4 w1 }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fBinaryProgramResult_$cput ::
    Messages.ProgramResult -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.ProgramResult) ->
                 case Messages.$w$cput15 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fBinaryProgramResult_$sdefaultPutList ::
    [Messages.ProgramResult] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.ProgramResult]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.ProgramResult
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.ProgramResult)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.ProgramResult
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.ProgramResult) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryProgramResult_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.ProgramResult]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryProgram_$cput :: Messages.Program -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Program) ->
                 case w of ww { Messages.Program ww1 ww2 ->
                 case Messages.$w$cput10 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryProgram_$sdefaultPutList ::
    [Messages.Program] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Program]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Program
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Program)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Program
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Program) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryProgram_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Program]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryPublishComand ::
    Data.Binary.Class.Binary Messages.PublishComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.PublishComand
                  Messages.$fBinaryPublishComand_$cput
                  Messages.$fBinaryPublishComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.PublishComand>_R))
                  Messages.$fBinaryPublishComand_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryPublishComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.PublishComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Messages.PublishComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryPublishComand_$cput ::
    Messages.PublishComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.PublishComand) ->
                 case w of ww { Messages.PublishComand ww1 ww2 ww3 ->
                 case Messages.$w$cput5 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryPublishComand_$sdefaultPutList ::
    [Messages.PublishComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.PublishComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.PublishComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.PublishComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.PublishComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.PublishComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryPublishComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.PublishComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryReturnStatement ::
    Data.Binary.Class.Binary Messages.ReturnStatement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ReturnStatement
                  Messages.$fBinaryReturnStatement_$cput
                  Messages.$fBinaryReturnStatement1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.ReturnStatement>_R))
                  Messages.$fBinaryReturnStatement_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryReturnStatement1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.ReturnStatement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (i :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success
                            Messages.ReturnStatement r) ->
                 Messages.$fBinaryExpression1
                   @ r
                   i
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    ks i' (Messages.ReturnStatement a1))) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryReturnStatement_$cput ::
    Messages.ReturnStatement -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Messages.ReturnStatement) ->
                 case ds of wild { Messages.ReturnStatement e ->
                 Messages.$fBinaryExpression_$cput e }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryReturnStatement_$sdefaultPutList ::
    [Messages.ReturnStatement] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.ReturnStatement]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.ReturnStatement
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.ReturnStatement)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.ReturnStatement
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.ReturnStatement) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryReturnStatement_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.ReturnStatement]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryStatement :: Data.Binary.Class.Binary Messages.Statement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Statement
                  Messages.$fBinaryStatement_$cput
                  Messages.$fBinaryStatement1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Statement>_R))
                  Messages.$fBinaryStatement_$sdefaultPutList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryStatement1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Statement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Statement r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget10 @ r ww1 ww2 ww3 ww4 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryStatement_$cput ::
    Messages.Statement -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Statement) ->
                 case Messages.$w$cput11 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fBinaryStatement_$sdefaultPutList ::
    [Messages.Statement] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Statement]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Statement
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Statement)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Statement
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Statement) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryStatement_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Statement]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fEqOperatorType :: GHC.Classes.Eq Messages.OperatorType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fEqOperatorType_$c==
                  Messages.$fEqOperatorType_$c/= -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fEqOperatorType_$c/= ::
    Messages.OperatorType -> Messages.OperatorType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Messages.OperatorType) (y :: Messages.OperatorType) ->
                 case x of wild {
                   Messages.IntType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Messages.IntType -> GHC.Types.False }
                   Messages.StringType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Messages.StringType -> GHC.Types.False }
                   Messages.BoolType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Messages.BoolType -> GHC.Types.False } }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fEqOperatorType_$c== ::
    Messages.OperatorType -> Messages.OperatorType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Messages.OperatorType) (ds1 :: Messages.OperatorType) ->
                 case ds of wild {
                   Messages.IntType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Messages.IntType -> GHC.Types.True }
                   Messages.StringType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Messages.StringType -> GHC.Types.True }
                   Messages.BoolType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Messages.BoolType -> GHC.Types.True } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowAssignment :: GHC.Show.Show Messages.Assignment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Assignment
                  Messages.$fShowAssignment_$cshowsPrec
                  Messages.$fShowAssignment_$cshow
                  Messages.$fShowAssignment_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowAssignment1 :: Messages.Assignment -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Messages.Assignment) ->
                 case w of ww { Messages.Assignment ww1 ww2 ->
                 Messages.$w$cshowsPrec 0# ww1 ww2 }) -}
ca747160241a8192ab9006cc4240b3b2
  $fShowAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assignment "#) -}
d1b4453c2480a89d2c205c40e9513531
  $fShowAssignment3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowAssignment_$cshow :: Messages.Assignment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Assignment) ->
                 Messages.$fShowAssignment_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowAssignment_$cshowList ::
    [Messages.Assignment] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Assignment]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Assignment
                   Messages.$fShowAssignment1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowAssignment_$cshowsPrec ::
    GHC.Types.Int -> Messages.Assignment -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Assignment) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Assignment ww3 ww4 ->
                 Messages.$w$cshowsPrec ww1 ww3 ww4 } }) -}
387bd43449f6efd27fec47b336086082
  $fShowConstant :: GHC.Show.Show Messages.Constant
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Constant
                  Messages.$fShowConstant_$cshowsPrec
                  Messages.$fShowConstant_$cshow
                  Messages.$fShowConstant_$cshowList -}
387bd43449f6efd27fec47b336086082
  $fShowConstant1 :: Messages.Constant -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Messages.Constant) (w1 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec2 0# w w1) -}
ed3537e594983d950e715b41a2ad9413
  $fShowConstant2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolConstant "#) -}
cfaa6615ccdf24e1ce8212ac2a9d6249
  $fShowConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringConstant "#) -}
a122258c9f56d408351da08185023b9a
  $fShowConstant4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntConstant "#) -}
02d81fd973b5b25e0a87c9ebdc9aee89
  $fShowConstant5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
387bd43449f6efd27fec47b336086082
  $fShowConstant_$cshow :: Messages.Constant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.Constant) ->
                 case x of wild {
                   Messages.IntConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant4
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Messages.StringConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5))
                   Messages.BoolConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant2
                        (case b1 of wild1 {
                           GHC.Types.False -> GHC.Show.$fShowBool4
                           GHC.Types.True -> GHC.Show.$fShowBool2 }) }) -}
387bd43449f6efd27fec47b336086082
  $fShowConstant_$cshowList :: [Messages.Constant] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Constant]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Constant
                   Messages.$fShowConstant1
                   ls
                   s) -}
387bd43449f6efd27fec47b336086082
  $fShowConstant_$cshowsPrec ::
    GHC.Types.Int -> Messages.Constant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.Constant)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec2 ww1 w1 w2 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowDBComand :: GHC.Show.Show Messages.DBComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBComand
                  Messages.$fShowDBComand_$cshowsPrec
                  Messages.$fShowDBComand_$cshow
                  Messages.$fShowDBComand_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowDBComand1 :: Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.DBComand) ->
                 Messages.$w$cshowsPrec3 0# w) -}
4d127e64cc29fffcd3385c4de43191ea
  $fShowDBComand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand3) -}
64f07d128072d5ca206e2d7e75cca261
  $fShowDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadDBComand "#) -}
59d351c4a82381ee9923b6f0df3ff9e6
  $fShowDBComand4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadComand "#) -}
da5106d0c42628b2fd035f4d2023adb7
  $fShowDBComand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand6) -}
335cf2f41c3c04194e823d731b91e16d
  $fShowDBComand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishDBComand "#) -}
95056b34475ae732d998744e9a95a07f
  $fShowDBComand7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand8) -}
8e48ee9b72be89998d7a3316fc65bcc7
  $fShowDBComand8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishComand "#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowDBComand_$cshow :: Messages.DBComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.DBComand) ->
                 case x of wild {
                   Messages.PublishDBComand b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Messages.$fShowDBComand5
                        (case b1 of ww { Messages.PublishComand ww1 ww2 ww3 ->
                         Messages.$w$cshowsPrec5
                           11#
                           ww1
                           ww2
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Messages.LoadDBComand b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Messages.$fShowDBComand2
                        (case b1 of ww { Messages.LoadComand ww1 ww2 ->
                         Messages.$w$cshowsPrec4
                           11#
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowDBComand_$cshowList :: [Messages.DBComand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.DBComand]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.DBComand
                   Messages.$fShowDBComand1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowDBComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.DBComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec3 ww1 w1 }) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fShowDBMessage :: GHC.Show.Show Messages.DBMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBMessage
                  Messages.$fShowDBMessage_$cshowsPrec
                  Messages.$fShowDBMessage_$cshow
                  Messages.$fShowDBMessage_$cshowList -}
8d3e2aa07310548f23f662d16a6eddc3
  $fShowDBMessage1 :: Messages.DBMessage -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Messages.$fShowDBMessage_$cshowsPrec
                   Messages.$fShowAssignment3) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fShowDBMessage_$cshow :: Messages.DBMessage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.DBMessage) ->
                 Messages.$fShowDBMessage_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fShowDBMessage_$cshowList ::
    [Messages.DBMessage] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.DBMessage]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.DBMessage
                   Messages.$fShowDBMessage1
                   ls
                   s) -}
8d3e2aa07310548f23f662d16a6eddc3
  $fShowDBMessage_$cshowsPrec ::
    GHC.Types.Int -> Messages.DBMessage -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowExpression :: GHC.Show.Show Messages.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Expression
                  Messages.$fShowExpression_$cshowsPrec
                  Messages.$fShowExpression_$cshow
                  Messages.$fShowExpression_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowExpression1 :: Messages.Expression -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Expression) ->
                 Messages.$w$cshowsPrec1 0# w) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowExpression_$cshow :: Messages.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Expression) ->
                 Messages.$fShowExpression_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowExpression_$cshowList ::
    [Messages.Expression] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Expression]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Expression
                   Messages.$fShowExpression1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Expression) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec1 ww1 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowIfThenElse :: GHC.Show.Show Messages.IfThenElse
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.IfThenElse
                  Messages.$fShowIfThenElse_$cshowsPrec
                  Messages.$fShowIfThenElse_$cshow
                  Messages.$fShowIfThenElse_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowIfThenElse1 :: Messages.IfThenElse -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Messages.IfThenElse) ->
                 case w of ww { Messages.IfThenElse ww1 ww2 ww3 ->
                 Messages.$w$cshowsPrec6 0# ww1 ww2 ww3 }) -}
d4296ffa926e17f9614ff1f9adbc8edc
  $fShowIfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IfThenElse "#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowIfThenElse_$cshow :: Messages.IfThenElse -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.IfThenElse) ->
                 Messages.$fShowIfThenElse_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowIfThenElse_$cshowList ::
    [Messages.IfThenElse] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.IfThenElse]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.IfThenElse
                   Messages.$fShowIfThenElse1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowIfThenElse_$cshowsPrec ::
    GHC.Types.Int -> Messages.IfThenElse -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.IfThenElse) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.IfThenElse ww3 ww4 ww5 ->
                 Messages.$w$cshowsPrec6 ww1 ww3 ww4 ww5 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowInvocation :: GHC.Show.Show Messages.Invocation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Invocation
                  Messages.$fShowInvocation_$cshowsPrec
                  Messages.$fShowInvocation_$cshow
                  Messages.$fShowInvocation_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowInvocation1 :: Messages.Invocation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Messages.Invocation) (w1 :: GHC.Base.String) ->
                 case w of ww { Messages.Invocation ww1 ww2 ->
                 Messages.$w$cshowsPrec7 0# ww1 ww2 w1 }) -}
8b3ee2d5929e2acb6743d0154a8af356
  $fShowInvocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invocation "#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowInvocation_$cshow :: Messages.Invocation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Invocation) ->
                 Messages.$fShowInvocation_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowInvocation_$cshowList ::
    [Messages.Invocation] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Invocation]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Invocation
                   Messages.$fShowInvocation1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowInvocation_$cshowsPrec ::
    GHC.Types.Int -> Messages.Invocation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.Invocation)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Invocation ww3 ww4 ->
                 Messages.$w$cshowsPrec7 ww1 ww3 ww4 w2 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLambdaDef :: GHC.Show.Show Messages.LambdaDef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LambdaDef
                  Messages.$fShowLambdaDef_$cshowsPrec
                  Messages.$fShowLambdaDef_$cshow
                  Messages.$fShowLambdaDef_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLambdaDef1 :: Messages.LambdaDef -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>,
     Unfolding: (\ (w :: Messages.LambdaDef) ->
                 case w of ww { Messages.LambdaDef ww1 ww2 ->
                 Messages.$w$cshowsPrec8 0# ww1 ww2 }) -}
428ebb6ffec7b1c6bee853ed381d3231
  $fShowLambdaDef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaDef "#) -}
c54228e77128b46161e21874639e78c7
  $fShowLambdaDef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program "#) -}
c267ee5a153f9d2b359ae53b2d49799e
  $fShowLambdaDef4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowLambdaDef5) -}
d114ffdc0625e3b4489c19c5d8a073f7
  $fShowLambdaDef5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnStatement "#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLambdaDef_$cshow :: Messages.LambdaDef -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.LambdaDef) ->
                 Messages.$fShowLambdaDef_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLambdaDef_$cshowList ::
    [Messages.LambdaDef] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.LambdaDef]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.LambdaDef
                   Messages.$fShowLambdaDef1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLambdaDef_$cshowsPrec ::
    GHC.Types.Int -> Messages.LambdaDef -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U,1*U(1*U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.LambdaDef) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                 Messages.$w$cshowsPrec8 ww1 ww3 ww4 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoadComand :: GHC.Show.Show Messages.LoadComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LoadComand
                  Messages.$fShowLoadComand_$cshowsPrec
                  Messages.$fShowLoadComand_$cshow
                  Messages.$fShowLoadComand_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoadComand1 :: Messages.LoadComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: (\ (w :: Messages.LoadComand) ->
                 case w of ww { Messages.LoadComand ww1 ww2 ->
                 Messages.$w$cshowsPrec4 0# ww1 ww2 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoadComand_$cshow :: Messages.LoadComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.LoadComand) ->
                 Messages.$fShowLoadComand_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoadComand_$cshowList ::
    [Messages.LoadComand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.LoadComand]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.LoadComand
                   Messages.$fShowLoadComand1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoadComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.LoadComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.LoadComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.LoadComand ww3 ww4 ->
                 Messages.$w$cshowsPrec4 ww1 ww3 ww4 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoop :: GHC.Show.Show Messages.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Loop
                  Messages.$fShowLoop_$cshowsPrec
                  Messages.$fShowLoop_$cshow
                  Messages.$fShowLoop_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoop1 :: Messages.Loop -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: (\ (w :: Messages.Loop) ->
                 case w of ww { Messages.While ww1 ww2 ->
                 Messages.$w$cshowsPrec12 0# ww1 ww2 }) -}
879c537525eb976879384e83009d3e26
  $fShowLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("While "#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoop_$cshow :: Messages.Loop -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Loop) ->
                 Messages.$fShowLoop_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoop_$cshowList :: [Messages.Loop] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Loop]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Messages.Loop Messages.$fShowLoop1 ls s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowLoop_$cshowsPrec ::
    GHC.Types.Int -> Messages.Loop -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Loop) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.While ww3 ww4 ->
                 Messages.$w$cshowsPrec12 ww1 ww3 ww4 } }) -}
8d819ba2fa1783312488d0645a389cc0
  $fShowMessage :: GHC.Show.Show Messages.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Message
                  Messages.$fShowMessage_$cshowsPrec
                  Messages.$fShowMessage_$cshow
                  Messages.$fShowMessage_$cshowList -}
8d819ba2fa1783312488d0645a389cc0
  $fShowMessage1 :: Messages.Message -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Messages.$fShowMessage_$cshowsPrec
                   Messages.$fShowAssignment3) -}
0eb174216f31cb7a3133720580fc3b34
  $fShowMessage10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileWorkerRequest "#) -}
3804e0bc2b31484f367645e6a01441f6
  $fShowMessage11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowMessage12) -}
0c79aded00051a4551623ff1a5f2ba5d
  $fShowMessage12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileClientRequest "#) -}
77939f35cffc33d7a0da5163fee006e8
  $fShowMessage2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Messages.$fShowMessage3) -}
bf683112467728eb075995081d056d96
  $fShowMessage3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowMessage4) -}
6cbd9dee2108f52ad3e1f174bb3f20a9
  $fShowMessage4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RegisterWorker"#) -}
de6e93d57d91d2540ed287c9d6812428
  $fShowMessage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowMessage6) -}
3c2a25757fe101a04c80e9035189c493
  $fShowMessage6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileClientReply "#) -}
b458af5860c5746de19094e57f27f112
  $fShowMessage7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilationError "#) -}
aa7244f2e12786d52c62a33c2ec403a8
  $fShowMessage8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Success "#) -}
7aa1c1e89cf0a5c572e91ab4f7b162da
  $fShowMessage9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileWorkerReply "#) -}
8d819ba2fa1783312488d0645a389cc0
  $fShowMessage_$cshow :: Messages.Message -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Message) ->
                 Messages.$fShowMessage_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8d819ba2fa1783312488d0645a389cc0
  $fShowMessage_$cshowList :: [Messages.Message] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Message]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Message
                   Messages.$fShowMessage1
                   ls
                   s) -}
8d819ba2fa1783312488d0645a389cc0
  $fShowMessage_$cshowsPrec ::
    GHC.Types.Int -> Messages.Message -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Messages.Message) ->
                 case ds of wild {
                   Messages.CompileClientRequest b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { Messages.Program ww1 ww2 ->
                          Messages.$w$cshowsPrec9 11# ww1 ww2 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowMessage11 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowMessage11
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Messages.CompileWorkerRequest b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        w1 :: GHC.Integer.Type.Integer
                        = case b1 of wild2 { GHC.Word.W64# x# ->
                          let {
                            i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                          } in
                          case GHC.Prim.>=# i# 0# of lwild {
                            DEFAULT -> GHC.Integer.Type.wordToInteger x#
                            1# -> GHC.Integer.Type.smallInteger i# } }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww { Messages.Program ww1 ww2 ->
                          Messages.$w$cshowsPrec9 11# ww1 ww2 }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowMessage10
                            (case GHC.Show.$w$cshowsPrec4
                                    11#
                                    w1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g x1)) of ww2 { (#,#) ww3 ww4 ->
                             GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } }
                   Messages.CompileWorkerReply b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        w1 :: GHC.Integer.Type.Integer
                        = case b1 of wild2 { GHC.Word.W64# x# ->
                          let {
                            i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                          } in
                          case GHC.Prim.>=# i# 0# of lwild {
                            DEFAULT -> GHC.Integer.Type.wordToInteger x#
                            1# -> GHC.Integer.Type.smallInteger i# } }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowMessage9
                            (case GHC.Show.$w$cshowsPrec4
                                    11#
                                    w1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (Messages.$w$cshowsPrec13
                                          11#
                                          b2
                                          x1)) of ww2 { (#,#) ww3 ww4 ->
                             GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } }
                   Messages.CompileClientReply b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Messages.$fShowMessage5
                             (Messages.$w$cshowsPrec13 11# b1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowMessage5
                                (Messages.$w$cshowsPrec13
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Messages.RegisterWorker -> Messages.$fShowMessage2 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowOperator :: GHC.Show.Show Messages.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Operator
                  Messages.$fShowOperator_$cshowsPrec
                  Messages.$fShowOperator_$cshow
                  Messages.$fShowOperator_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowOperator1 :: Messages.Operator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Operator) ->
                 Messages.$w$cshowsPrec14 0# w) -}
df2c0a22cdccdb3baed50eb9b0fe34de
  $fShowOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BinaryOperator "#) -}
638a2202cb86d160b810d7d9c8483526
  $fShowOperator3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator4) -}
c141b6bac892dea10384965aea4659d3
  $fShowOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolType"#) -}
c83f5090adb408106633c8ead41384ed
  $fShowOperator5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator6) -}
40dc9377120d494903290bf39709f085
  $fShowOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringType"#) -}
1e627e47c7c4a0dd13b94550f925a6ab
  $fShowOperator7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator8) -}
fd62b28e6fca67f4539f492b574983a4
  $fShowOperator8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntType"#) -}
985d90a3052be754ecff29b639177750
  $fShowOperator9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnaryOperator "#) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fShowOperatorType :: GHC.Show.Show Messages.OperatorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fShowOperatorType_$cshowsPrec
                  Messages.$fShowOperatorType_$cshow
                  Messages.$fShowOperatorType_$cshowList -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fShowOperatorType_$cshow ::
    Messages.OperatorType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.OperatorType) ->
                 case x of wild {
                   Messages.IntType -> Messages.$fShowOperator7
                   Messages.StringType -> Messages.$fShowOperator5
                   Messages.BoolType -> Messages.$fShowOperator3 }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fShowOperatorType_$cshowList ::
    [Messages.OperatorType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.OperatorType]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.OperatorType
                   Messages.$w$cshowsPrec15
                   ls
                   s) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $fShowOperatorType_$cshowsPrec ::
    GHC.Types.Int -> Messages.OperatorType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.OperatorType)
                   (w2 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec15 w1 w2) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowOperator_$cshow :: Messages.Operator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Operator) ->
                 Messages.$fShowOperator_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowOperator_$cshowList :: [Messages.Operator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Operator]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Operator
                   Messages.$fShowOperator1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowOperator_$cshowsPrec ::
    GHC.Types.Int -> Messages.Operator -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Operator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec14 ww1 w1 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowProgram :: GHC.Show.Show Messages.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Program
                  Messages.$fShowProgram_$cshowsPrec
                  Messages.$fShowProgram_$cshow
                  Messages.$fShowProgram_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowProgram1 :: Messages.Program -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>,
     Unfolding: (\ (w :: Messages.Program) ->
                 case w of ww { Messages.Program ww1 ww2 ->
                 Messages.$w$cshowsPrec9 0# ww1 ww2 }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fShowProgramResult :: GHC.Show.Show Messages.ProgramResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ProgramResult
                  Messages.$fShowProgramResult_$cshowsPrec
                  Messages.$fShowProgramResult_$cshow
                  Messages.$fShowProgramResult_$cshowList -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fShowProgramResult1 :: Messages.ProgramResult -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Messages.ProgramResult)
                   (w1 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec13 0# w w1) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fShowProgramResult_$cshow ::
    Messages.ProgramResult -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.ProgramResult) ->
                 case x of wild {
                   Messages.Success b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowMessage8
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5))
                   Messages.CompilationError b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowMessage7
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5)) }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fShowProgramResult_$cshowList ::
    [Messages.ProgramResult] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.ProgramResult]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.ProgramResult
                   Messages.$fShowProgramResult1
                   ls
                   s) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $fShowProgramResult_$cshowsPrec ::
    GHC.Types.Int -> Messages.ProgramResult -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.ProgramResult)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec13 ww1 w1 w2 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowProgram_$cshow :: Messages.Program -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Program) ->
                 Messages.$fShowProgram_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowProgram_$cshowList :: [Messages.Program] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Program]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Program
                   Messages.$fShowProgram1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowProgram_$cshowsPrec ::
    GHC.Types.Int -> Messages.Program -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Program) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Program ww3 ww4 ->
                 Messages.$w$cshowsPrec9 ww1 ww3 ww4 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowPublishComand :: GHC.Show.Show Messages.PublishComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.PublishComand
                  Messages.$fShowPublishComand_$cshowsPrec
                  Messages.$fShowPublishComand_$cshow
                  Messages.$fShowPublishComand_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowPublishComand1 :: Messages.PublishComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: (\ (w :: Messages.PublishComand) ->
                 case w of ww { Messages.PublishComand ww1 ww2 ww3 ->
                 Messages.$w$cshowsPrec5 0# ww1 ww2 ww3 }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowPublishComand_$cshow ::
    Messages.PublishComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.PublishComand) ->
                 Messages.$fShowPublishComand_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowPublishComand_$cshowList ::
    [Messages.PublishComand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.PublishComand]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.PublishComand
                   Messages.$fShowPublishComand1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowPublishComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.PublishComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.PublishComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.PublishComand ww3 ww4 ww5 ->
                 Messages.$w$cshowsPrec5 ww1 ww3 ww4 ww5 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowReturnStatement :: GHC.Show.Show Messages.ReturnStatement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ReturnStatement
                  Messages.$fShowReturnStatement_$cshowsPrec
                  Messages.$fShowReturnStatement_$cshow
                  Messages.$fShowReturnStatement_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowReturnStatement1 ::
    Messages.ReturnStatement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: (\ (w :: Messages.ReturnStatement) ->
                 case w of ww { Messages.ReturnStatement ww1 ->
                 Messages.$w$cshowsPrec11 0# ww1 }) -}
55f252f11880d6cb771ecd11f41bbe80
  $fShowReturnStatement2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowReturnStatement_$cshow ::
    Messages.ReturnStatement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.ReturnStatement) ->
                 case x of wild { Messages.ReturnStatement b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Messages.$fShowLambdaDef4)
                   (Messages.$fShowExpression_$cshowsPrec
                      Messages.$fShowReturnStatement2
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowReturnStatement_$cshowList ::
    [Messages.ReturnStatement] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.ReturnStatement]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.ReturnStatement
                   Messages.$fShowReturnStatement1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowReturnStatement_$cshowsPrec ::
    GHC.Types.Int -> Messages.ReturnStatement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.ReturnStatement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.ReturnStatement ww3 ->
                 Messages.$w$cshowsPrec11 ww1 ww3 } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowStatement :: GHC.Show.Show Messages.Statement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Statement
                  Messages.$fShowStatement_$cshowsPrec
                  Messages.$fShowStatement_$cshow
                  Messages.$fShowStatement_$cshowList -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowStatement1 :: Messages.Statement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Statement) ->
                 Messages.$w$cshowsPrec10 0# w) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowStatement_$cshow :: Messages.Statement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Statement) ->
                 Messages.$fShowStatement_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowStatement_$cshowList ::
    [Messages.Statement] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Statement]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Statement
                   Messages.$fShowStatement1
                   ls
                   s) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $fShowStatement_$cshowsPrec ::
    GHC.Types.Int -> Messages.Statement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Statement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec10 ww1 w1 }) -}
9201ba60d2c7199c4dbe81a2a7669b07
  $tc'Assignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17630199603232674013##
                   1896683604658864386##
                   Messages.$trModule
                   Messages.$tc'Assignment2
                   0#
                   Messages.$tc'Assignment1) -}
a1610d14e5cbf3f5b073d45233fec5ee
  $tc'Assignment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c73a1111ea9fd1ff8ccd4f57beb90117
  $tc'Assignment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Assignment3) -}
a589544b1ac8172711d33db0f90e5f84
  $tc'Assignment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assignment"#) -}
bd8a32f7d68c1abfcb89ba9d1ee10b27
  $tc'AssignmentStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9158798183693350425##
                   14864365446979397812##
                   Messages.$trModule
                   Messages.$tc'AssignmentStatement2
                   0#
                   Messages.$tc'AssignmentStatement1) -}
a9d110b9b6e4247dac8722d38ddaefe3
  $tc'AssignmentStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3e356203ba8111a94f35300b7504762a
  $tc'AssignmentStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'AssignmentStatement3) -}
c8c9ed6f6751e67ce00e92c349c1ea79
  $tc'AssignmentStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AssignmentStatement"#) -}
721ca7e4a7e4440607ef82ee491c0b43
  $tc'BinaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5535482743066903514##
                   18307049175781999536##
                   Messages.$trModule
                   Messages.$tc'BinaryOperator2
                   0#
                   Messages.$tc'BinaryOperator1) -}
f941e1910ac7e7f1adc1283f0b06c70b
  $tc'BinaryOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
afe9b67e5d117b2e7a79abf21b495cc7
  $tc'BinaryOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BinaryOperator3) -}
1ee03956d6ae4536c2db9fe504ef14fb
  $tc'BinaryOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryOperator"#) -}
4dded4a5be91b73ae3416f0097cdc5da
  $tc'BoolConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17282787232706183133##
                   17765452767367341061##
                   Messages.$trModule
                   Messages.$tc'BoolConstant2
                   0#
                   Messages.$tc'BoolConstant1) -}
f8fb991bc8377ea7285c34f93b543835
  $tc'BoolConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
316d279b957efe7c9cb3f68f792657d4
  $tc'BoolConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BoolConstant3) -}
125f611eda57adb2f94085c4e979c499
  $tc'BoolConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolConstant"#) -}
6f0eb1b9c051b511b0444b742e25b53e
  $tc'BoolType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17501221816089352670##
                   9733261761657847812##
                   Messages.$trModule
                   Messages.$tc'BoolType2
                   0#
                   Messages.$tc'BoolType1) -}
f4e35dbc4f25dcebcc6cb6b61b8809ca
  $tc'BoolType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
c27e4479d401e9d645c4a888aa9e94cd
  $tc'BoolType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BoolType3) -}
aca62c7e0f5a6ece0fca90def2388761
  $tc'BoolType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolType"#) -}
8b98b5e2df1a484ebaa4fed738449343
  $tc'BracesExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   30789803021147084##
                   16376424255345912926##
                   Messages.$trModule
                   Messages.$tc'BracesExpression2
                   0#
                   Messages.$tc'BracesExpression1) -}
8acced65c06f9f1d0dee1573161f9880
  $tc'BracesExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1b8369538d1aa3cc9e8bdfb07794d40d
  $tc'BracesExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BracesExpression3) -}
fd41eb08d1beee2e435dd9628265308a
  $tc'BracesExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BracesExpression"#) -}
2395fbe6e4e48f37980913a209828d95
  $tc'CompilationError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7227558002667399377##
                   15390752553744561651##
                   Messages.$trModule
                   Messages.$tc'CompilationError2
                   0#
                   Messages.$tc'CompilationError1) -}
ccb10c050e642a0623b0e74fcae94bf1
  $tc'CompilationError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
410d074f4ba1a37e28677d1132fda64b
  $tc'CompilationError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompilationError3) -}
b47b30619f3e47ac31a5d5068fac0c01
  $tc'CompilationError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompilationError"#) -}
b6f0faab2ac7fac448ff246e6405ec62
  $tc'CompileClientReply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2783294224285985667##
                   1705049203828710980##
                   Messages.$trModule
                   Messages.$tc'CompileClientReply2
                   0#
                   Messages.$tc'CompileClientReply1) -}
1f8f556120d7ab2e552c863270abddeb
  $tc'CompileClientReply1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7dca9cf4920076ce1dcf593980ed82e9
  $tc'CompileClientReply2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompileClientReply3) -}
a6098c665516b472e0ffb0a72ae0db8d
  $tc'CompileClientReply3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileClientReply"#) -}
72c6166350deb6ce87203c52d399d9b1
  $tc'CompileClientRequest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10298624359348125192##
                   8508786448138666769##
                   Messages.$trModule
                   Messages.$tc'CompileClientRequest2
                   0#
                   Messages.$tc'CompileClientRequest1) -}
eae5505e102f933765be0788c0103af2
  $tc'CompileClientRequest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5f7eec60f00cd10eb629f28240ca8e27
  $tc'CompileClientRequest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'CompileClientRequest3) -}
b3b285978120f6cd243e1d29e1b2512a
  $tc'CompileClientRequest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileClientRequest"#) -}
d62935e6bec9cade695f119ef8eacb06
  $tc'CompileWorkerReply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18169798512687036788##
                   17586299130142586073##
                   Messages.$trModule
                   Messages.$tc'CompileWorkerReply2
                   0#
                   Messages.$tc'CompileWorkerReply1) -}
d9077c135afecde96a5e35fe127f292e
  $tc'CompileWorkerReply1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8d3f4c630a6b3eaf8b5ee3d8ebc04a13
  $tc'CompileWorkerReply2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompileWorkerReply3) -}
2a7efdd8014bc09513c401305af3a1b0
  $tc'CompileWorkerReply3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileWorkerReply"#) -}
912e58059bf874386f2ee4bdf991bc22
  $tc'CompileWorkerRequest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12321981474998399734##
                   9723185929598104515##
                   Messages.$trModule
                   Messages.$tc'CompileWorkerRequest2
                   0#
                   Messages.$tc'CompileWorkerRequest1) -}
66ee337e5e0f11fea0db635cf7ed6f34
  $tc'CompileWorkerRequest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
515c35f67ad0866406d570ff3036fe57
  $tc'CompileWorkerRequest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'CompileWorkerRequest3) -}
410c830dec6a21badd39b7795d87ad84
  $tc'CompileWorkerRequest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileWorkerRequest"#) -}
7d4a6e6403e44fd254bde805c3712efa
  $tc'ConstantExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5124023953622042648##
                   11927387924664206972##
                   Messages.$trModule
                   Messages.$tc'ConstantExpression2
                   0#
                   Messages.$tc'ConstantExpression1) -}
64e759871453e9830af717589778eff8
  $tc'ConstantExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6389037a1dec58b080c88fdc39891c07
  $tc'ConstantExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'ConstantExpression3) -}
2b50b2f0fa467abd5578c7c5a32ba779
  $tc'ConstantExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstantExpression"#) -}
64752e8bc740ce42e5a20fa7ab1fc121
  $tc'DBComandStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17621347444539434305##
                   526843336708891011##
                   Messages.$trModule
                   Messages.$tc'DBComandStatement2
                   0#
                   Messages.$tc'DBComandStatement1) -}
b5d0ab01ba0711d2d81c4d78edab3a95
  $tc'DBComandStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
01e1cd4fa39ebaafea6cc1edab18c065
  $tc'DBComandStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'DBComandStatement3) -}
6460a4df37382c4f6f1dbc695e0d9406
  $tc'DBComandStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DBComandStatement"#) -}
7cb960bff99631febaaa414172b2dc46
  $tc'IfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2918918873859722813##
                   11802156891600565431##
                   Messages.$trModule
                   Messages.$tc'IfThenElse2
                   0#
                   Messages.$tc'IfThenElse1) -}
a41839a3bc9e95bcf4dd2811a480919a
  $tc'IfThenElse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd92562a27be105b5d734e777f8f99e9
  $tc'IfThenElse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IfThenElse3) -}
1730c51a0d50ccd1790861a43f651af5
  $tc'IfThenElse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElse"#) -}
a1f38080a809baca4defea969f47a813
  $tc'IfThenElseExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3446169559876849491##
                   5092472268061170229##
                   Messages.$trModule
                   Messages.$tc'IfThenElseExpression2
                   0#
                   Messages.$tc'IfThenElseExpression1) -}
446a0a7cff27325087146aa953b656ea
  $tc'IfThenElseExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
748a64258b288095304528ac6e2e8b95
  $tc'IfThenElseExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'IfThenElseExpression3) -}
83697cea847fc49fbdb198e1d4ae227e
  $tc'IfThenElseExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElseExpression"#) -}
4b351cbea7c6df5efc3815d7b92314d0
  $tc'IntConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16974306684475567907##
                   12693660197554666875##
                   Messages.$trModule
                   Messages.$tc'IntConstant2
                   0#
                   Messages.$tc'IntConstant1) -}
59e875233db7cd00c022d6089dec64e9
  $tc'IntConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d959881452c8b0cc0c64e88100222c0e
  $tc'IntConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IntConstant3) -}
3fec1478aed62e42ca458886bedbd443
  $tc'IntConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntConstant"#) -}
e148c5334e18141bab5c6b81c7c3a16d
  $tc'IntType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15609391381249333799##
                   12649403884111931683##
                   Messages.$trModule
                   Messages.$tc'IntType1
                   0#
                   Messages.$tc'BoolType1) -}
4666ebbe8ee48e731e9345e3d07f2fac
  $tc'IntType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IntType2) -}
cf3f36423596058c90614cc6d65a4c42
  $tc'IntType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntType"#) -}
2c7409ffe3230fbf585470a960fb4207
  $tc'Invocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7256775785045883531##
                   3801460699953793242##
                   Messages.$trModule
                   Messages.$tc'Invocation2
                   0#
                   Messages.$tc'Invocation1) -}
6b552675460d5e876625af396a7ba657
  $tc'Invocation1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a74a318c158434ef7e81bc3ddc74574b
  $tc'Invocation2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Invocation3) -}
d3eb851c496f10dde649b34f1e6078cf
  $tc'Invocation3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Invocation"#) -}
fc12c4dcd512d2df6d7c313e4723f5eb
  $tc'InvocationExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8686346909510831940##
                   3293960546108925249##
                   Messages.$trModule
                   Messages.$tc'InvocationExpression2
                   0#
                   Messages.$tc'InvocationExpression1) -}
0aabbacbdd72c201c84f992da7ab6afd
  $tc'InvocationExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bde15e77e55f918629e900f2074704cd
  $tc'InvocationExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'InvocationExpression3) -}
d1d50a26077062b045086d0501d54fbd
  $tc'InvocationExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvocationExpression"#) -}
3e9fe3b541155743f4face5c3592969e
  $tc'InvocationStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12401296126255449699##
                   17110438072702900005##
                   Messages.$trModule
                   Messages.$tc'InvocationStatement2
                   0#
                   Messages.$tc'InvocationStatement1) -}
4024bdaec5d4b7111ee78f228876777a
  $tc'InvocationStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f1d15b14bd699c181c3f90e09fb1f54
  $tc'InvocationStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'InvocationStatement3) -}
557788cc29722a35b3ada4afbfe2c37c
  $tc'InvocationStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvocationStatement"#) -}
799063b00a18cb1a72ee4e056dbef8e7
  $tc'LambdaDef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17325499565219421971##
                   5929643749692543625##
                   Messages.$trModule
                   Messages.$tc'LambdaDef2
                   0#
                   Messages.$tc'LambdaDef1) -}
800a5f9e22d1abfc03d1a9090f1bba77
  $tc'LambdaDef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
86949759fa8c2ad8d192458951d2c9e5
  $tc'LambdaDef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LambdaDef3) -}
d766ccb58a667e19f254425d25d7a601
  $tc'LambdaDef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaDef"#) -}
fc2f88311021052367031f6be2a1a4b3
  $tc'LambdaDefExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13783003492479767627##
                   3160882208149271447##
                   Messages.$trModule
                   Messages.$tc'LambdaDefExpression2
                   0#
                   Messages.$tc'LambdaDefExpression1) -}
898731c112fa2f30aa2e69925f69f78a
  $tc'LambdaDefExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
676d6eebe3a9b57fb5825e00916c0093
  $tc'LambdaDefExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LambdaDefExpression3) -}
f014853f12e787ba74795d095df9f203
  $tc'LambdaDefExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaDefExpression"#) -}
4a36235a96577237cbf76d90412b23e3
  $tc'LoadComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   915428782033818201##
                   8536954545153777981##
                   Messages.$trModule
                   Messages.$tc'LoadComand2
                   0#
                   Messages.$tc'LoadComand1) -}
e969c294d5be6960dcbbc7c2d65585e2
  $tc'LoadComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
87543c7889d501ee5ab5c383778c143d
  $tc'LoadComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadComand3) -}
86a0664f8da6036833b8bc867fa711e1
  $tc'LoadComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadComand"#) -}
0c3b2efed9a35c7df29d1747ed947b87
  $tc'LoadDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5894760094980499725##
                   4644277240162410814##
                   Messages.$trModule
                   Messages.$tc'LoadDBComand2
                   0#
                   Messages.$tc'LoadDBComand1) -}
0d20a6d9c59527325a3e3e3195a97d00
  $tc'LoadDBComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
99ca5ba5750ec63771e607d8b4fea576
  $tc'LoadDBComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadDBComand3) -}
3f362ff6158ebeac5ced3f71c389198e
  $tc'LoadDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadDBComand"#) -}
abf9ceb858fe7fd39fb8f07539e9ec1e
  $tc'LoadError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12068688212029686843##
                   1203919251860065195##
                   Messages.$trModule
                   Messages.$tc'LoadError2
                   0#
                   Messages.$tc'LoadError1) -}
a0c95dd34de395b1cf58f58f2f5cdb1b
  $tc'LoadError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c327c0379bdcc0e284f160b2ee7980d3
  $tc'LoadError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadError3) -}
7c0d4a5846fa18caedb7b602ee61cf3a
  $tc'LoadError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadError"#) -}
337e4d37c5210b237c6ade4d5443eef5
  $tc'LoadErrorForID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12196849080135801872##
                   3818793247484894575##
                   Messages.$trModule
                   Messages.$tc'LoadErrorForID2
                   0#
                   Messages.$tc'LoadErrorForID1) -}
1ec44e5933c3a498d3fbb128a50b85ef
  $tc'LoadErrorForID1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c9b25e27b83cd5f919cc12dc22b50ff3
  $tc'LoadErrorForID2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadErrorForID3) -}
077bf05bcd14f66057bff3ca837a6a50
  $tc'LoadErrorForID3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadErrorForID"#) -}
7ce006cdf2607b622109a284c8dbb72f
  $tc'LoadMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2617702288258434382##
                   5588813376200710217##
                   Messages.$trModule
                   Messages.$tc'LoadMessage1
                   0#
                   Messages.$tc'LoadError1) -}
1d48de87459d597a4cd1de378f25b4e2
  $tc'LoadMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadMessage2) -}
8ca84f73e66df91d5f18aee4cea4a342
  $tc'LoadMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadMessage"#) -}
f623f1315cf84a9a5e2d7330f727b327
  $tc'LoadMessageWithID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2678409914457819498##
                   16339017659070461891##
                   Messages.$trModule
                   Messages.$tc'LoadMessageWithID1
                   0#
                   Messages.$tc'LoadErrorForID1) -}
a28ff20605775875b32d7283155bd43b
  $tc'LoadMessageWithID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadMessageWithID2) -}
f37fa3e72ab71c7ba2450f9b2179c1c2
  $tc'LoadMessageWithID2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadMessageWithID"#) -}
f302caa5fa5513f1e9f2116685b35848
  $tc'LoadResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18325997782610717351##
                   16653510703167909318##
                   Messages.$trModule
                   Messages.$tc'LoadResult1
                   0#
                   Messages.$tc'LoadError1) -}
08886ff37ffbd07913287d7f88ddd92d
  $tc'LoadResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadResult2) -}
dbad162312b9865b8fc5c0fdd81bbbba
  $tc'LoadResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadResult"#) -}
2f89cf7466d3390eb5784b9d6c9659b8
  $tc'LoadResultForID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12007515048716466374##
                   12145144977378124357##
                   Messages.$trModule
                   Messages.$tc'LoadResultForID1
                   0#
                   Messages.$tc'LoadErrorForID1) -}
c0821a06805215a866fadae8c08b1be9
  $tc'LoadResultForID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadResultForID2) -}
fd9e64df78c59cf7350d5818534d9c25
  $tc'LoadResultForID2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadResultForID"#) -}
b72e7b8511268246dadb653966f7cc5f
  $tc'LoopStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13701831111698175404##
                   15862586630133539597##
                   Messages.$trModule
                   Messages.$tc'LoopStatement2
                   0#
                   Messages.$tc'LoopStatement1) -}
215a33b13f756e101bcf9f719bb3c3b1
  $tc'LoopStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f27089d396763d4b041042deb0380e86
  $tc'LoopStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoopStatement3) -}
02489e73220e9cec261be73a68d97f89
  $tc'LoopStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopStatement"#) -}
4bbdf81209131e0e56bca383a073c836
  $tc'OperatorExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10521225773202741450##
                   10053759373962826088##
                   Messages.$trModule
                   Messages.$tc'OperatorExpression2
                   0#
                   Messages.$tc'OperatorExpression1) -}
a9b2f0e41030c0896a20cfae25c5b336
  $tc'OperatorExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
128559ce4bf2c14db87b99f231774b34
  $tc'OperatorExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'OperatorExpression3) -}
27ede96968e38561804fbc6a73c3e8d0
  $tc'OperatorExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OperatorExpression"#) -}
4477e7c51e9bd4ccc0c353b847a1fd71
  $tc'Program :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16094747009150880014##
                   7430985962706825411##
                   Messages.$trModule
                   Messages.$tc'Program2
                   0#
                   Messages.$tc'Program1) -}
8b6c368a37c4bcb637e94e69875e8478
  $tc'Program1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2548c6844bb91b27be78ea042a3083e6
  $tc'Program2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Program3) -}
66ba3dd0ebe4fd259a880872b4fb848b
  $tc'Program3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Program"#) -}
02787eb93e81eb15a5b28e855ed7a5e7
  $tc'PublishComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13803194091170129672##
                   16275277771319965947##
                   Messages.$trModule
                   Messages.$tc'PublishComand2
                   0#
                   Messages.$tc'PublishComand1) -}
f1aeaee9c721b985f990e041f2b6aac6
  $tc'PublishComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
42ea4f031800132c9ec9f762744186ce
  $tc'PublishComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishComand3) -}
7e92d5b1140b161f89151961aefd254c
  $tc'PublishComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishComand"#) -}
6db6185a14a49b2461c66e93f8087978
  $tc'PublishDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14396669893439764398##
                   22268316883455314##
                   Messages.$trModule
                   Messages.$tc'PublishDBComand2
                   0#
                   Messages.$tc'PublishDBComand1) -}
0af4dd0f8933ad6ac388744592037d84
  $tc'PublishDBComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3dde044e38c668cddfe16e1c9ae37343
  $tc'PublishDBComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishDBComand3) -}
11d871972a247fdcd75cb8d008f6018e
  $tc'PublishDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishDBComand"#) -}
b0fb84087e3c57acff662dc8f36a0d8c
  $tc'PublishMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1744269138759041230##
                   16931626274870965761##
                   Messages.$trModule
                   Messages.$tc'PublishMessage2
                   0#
                   Messages.$tc'PublishMessage1) -}
b7eb9331128bcc5d2cea414bc1bc2081
  $tc'PublishMessage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ad42c2b88018c9d161cef269072a0632
  $tc'PublishMessage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishMessage3) -}
922afe496aa13881e8a0feee846a0d2d
  $tc'PublishMessage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishMessage"#) -}
9b4476fc8407a916827dd34ccac2c77a
  $tc'RegisterDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14510879598429300762##
                   3478440944669081999##
                   Messages.$trModule
                   Messages.$tc'RegisterDBWorker2
                   0#
                   Messages.$tc'RegisterDBWorker1) -}
ffa32073c5ea28b7dbb8ee1f1246866e
  $tc'RegisterDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
5f30ce8a381e229a5e23f0726ee1b481
  $tc'RegisterDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'RegisterDBWorker3) -}
a2afe5001e116fa26a2809ad0e5e05f5
  $tc'RegisterDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RegisterDBWorker"#) -}
418eea2c5ba58735839529f5b6de0870
  $tc'RegisterWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12248621589613830858##
                   12184546313497120168##
                   Messages.$trModule
                   Messages.$tc'RegisterWorker2
                   0#
                   Messages.$tc'RegisterWorker1) -}
dfed3ce2389204258d47b1e2a76e1740
  $tc'RegisterWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
47005f1f8fd920359fe65f1c59557dd3
  $tc'RegisterWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'RegisterWorker3) -}
9df4f749451366120ef5cfe1d5fe4ac1
  $tc'RegisterWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RegisterWorker"#) -}
a608edeab2a13fb4167842885c0802ab
  $tc'ReturnStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   164516193591026752##
                   10093125417443362288##
                   Messages.$trModule
                   Messages.$tc'ReturnStatement2
                   0#
                   Messages.$tc'ReturnStatement1) -}
e64ef2359cc5a698068c27572511d115
  $tc'ReturnStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bce3b238f88985d88b4cb1b6dac5b994
  $tc'ReturnStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'ReturnStatement3) -}
eae5b243c2abb415361495945539073a
  $tc'ReturnStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReturnStatement"#) -}
403926cce9d1b81cefcd6667ebb07b73
  $tc'StringConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3388250431352943515##
                   2569475052022778654##
                   Messages.$trModule
                   Messages.$tc'StringConstant2
                   0#
                   Messages.$tc'StringConstant1) -}
a53b319f313500a35fb6d40ee8d560f8
  $tc'StringConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
45d88fd043e8af16880e60f128c66711
  $tc'StringConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'StringConstant3) -}
866eaee0084af5a3898840ca53485657
  $tc'StringConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringConstant"#) -}
842d0073195a92fd200ee21b11cce9b3
  $tc'StringType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12153114314133822900##
                   16035956874207225988##
                   Messages.$trModule
                   Messages.$tc'StringType1
                   0#
                   Messages.$tc'BoolType1) -}
619e3649c57a87981cb10f7adacb8a0e
  $tc'StringType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'StringType2) -}
65fb4235f27ceaa83a841506cc62ee3e
  $tc'StringType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringType"#) -}
444c2e23b487afce89b2b7f96145f542
  $tc'Success :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16054357279545336121##
                   16451676897573908614##
                   Messages.$trModule
                   Messages.$tc'Success1
                   0#
                   Messages.$tc'CompilationError1) -}
4c4aa28df83f1c2481f562765bfca3dd
  $tc'Success1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Success2) -}
8a3b842ac7835f4a97650111b62c9dc9
  $tc'Success2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Success"#) -}
2616eb054d4da793fd53300614aa3ac0
  $tc'UnaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2271816842978414487##
                   17569098765433209061##
                   Messages.$trModule
                   Messages.$tc'UnaryOperator2
                   0#
                   Messages.$tc'UnaryOperator1) -}
58a27787b4927accf7366d47e00813aa
  $tc'UnaryOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b9cd88476681957852250ebe39e1a01d
  $tc'UnaryOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'UnaryOperator3) -}
d3d2b7407abbf10745e17003cf70c0c0
  $tc'UnaryOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryOperator"#) -}
d9ee3efe458e9fe9a6861999bdcdc366
  $tc'VariableExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5867355663887502699##
                   6573775562808865807##
                   Messages.$trModule
                   Messages.$tc'VariableExpression2
                   0#
                   Messages.$tc'VariableExpression1) -}
1d980dd55066e359f2b84e75472368bd
  $tc'VariableExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9e587e2056820fa333443a28f61cbdc7
  $tc'VariableExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'VariableExpression3) -}
c73fdea703e9629624d15b7832e29789
  $tc'VariableExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VariableExpression"#) -}
f7169d03fc40804cc87acf23ddbf7c90
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16162134161604160642##
                   3711627073949852882##
                   Messages.$trModule
                   Messages.$tc'While2
                   0#
                   Messages.$tc'While1) -}
9097de1ae8e6974bd321affac057f7b8
  $tc'While1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5ce99e2c7481d1c0301e8be05bc1f5b2
  $tc'While2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'While3) -}
74c74913ea13fda5f4dc6b85950dac05
  $tc'While3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'While"#) -}
c5efcf98683ffada8c78095367d45a3a
  $tcAssignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1809278930996369900##
                   12248337110152681734##
                   Messages.$trModule
                   Messages.$tcAssignment1
                   0#
                   GHC.Types.krep$*) -}
0ad05a13212a4905a477479fd4b2a78f
  $tcAssignment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcAssignment2) -}
7080b4ad8c931881e66deb2d52c38660
  $tcAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assignment"#) -}
2837fc39ca5d4966f3fff2e7e4540199
  $tcConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10707862813406913190##
                   16099906129940929543##
                   Messages.$trModule
                   Messages.$tcConstant1
                   0#
                   GHC.Types.krep$*) -}
450ab4115762d0f98c68843664aee5df
  $tcConstant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcConstant2) -}
ed73c04ae7501cfd493602c6018232ef
  $tcConstant2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Constant"#) -}
c5846376fdf43d3e6982c9f56c22232a
  $tcDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4496539204402675408##
                   17468430215791998306##
                   Messages.$trModule
                   Messages.$tcDBComand1
                   0#
                   GHC.Types.krep$*) -}
deaf7ca9a6a74e1f1c76e42cbef8ecf5
  $tcDBComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcDBComand2) -}
d75e09cebafb3268ba47dc590dcb51c5
  $tcDBComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBComand"#) -}
4c8068d62b926f377976f2a9414af641
  $tcDBMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8403758865932425603##
                   16812190415885110359##
                   Messages.$trModule
                   Messages.$tcDBMessage1
                   0#
                   GHC.Types.krep$*) -}
9dc70244f3779b085b55dbaa94e7f77a
  $tcDBMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcDBMessage2) -}
89e0e3c24ef06fd97bb830b069fcb19a
  $tcDBMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBMessage"#) -}
c6fb290813e9dfaebdd6bd2417e13e07
  $tcExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7150546973743417037##
                   887308290955528928##
                   Messages.$trModule
                   Messages.$tcExpression1
                   0#
                   GHC.Types.krep$*) -}
1202e131b924ae99b65af49488706e82
  $tcExpression1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcExpression2) -}
876c1370462ebaea0be5478c8d88ba04
  $tcExpression2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expression"#) -}
4cb370abcba62b9cd6ab2f99ce39436c
  $tcIfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15728825195213047678##
                   9085428370499975426##
                   Messages.$trModule
                   Messages.$tcIfThenElse1
                   0#
                   GHC.Types.krep$*) -}
59bd49b7657bd4d7c7390817ec42fe9e
  $tcIfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcIfThenElse2) -}
28a71cd8ecf94056c8f19a0a847da0ee
  $tcIfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IfThenElse"#) -}
a4a961abb62b91541b233f305504cc79
  $tcInvocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7442158084200476184##
                   6141530365905916604##
                   Messages.$trModule
                   Messages.$tcInvocation1
                   0#
                   GHC.Types.krep$*) -}
cbdd1c5d2b50b7f66f546fa121bf3347
  $tcInvocation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcInvocation2) -}
dcc38f5c0ff2e769c87297823e2ff00e
  $tcInvocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invocation"#) -}
97883ff4e7cb5999e973fb6ea0172b9c
  $tcLambdaDef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16964303516581420074##
                   13454225380219028857##
                   Messages.$trModule
                   Messages.$tcLambdaDef1
                   0#
                   GHC.Types.krep$*) -}
795f3d4b70be9b6361cb90b825b7ef14
  $tcLambdaDef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLambdaDef2) -}
d56452d2ce47a728e13d060f27ea1b9c
  $tcLambdaDef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaDef"#) -}
7c90ea5c35fcc442c881cebc1e42ee59
  $tcLoadComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16030471880544155114##
                   16826570583530053418##
                   Messages.$trModule
                   Messages.$tcLoadComand1
                   0#
                   GHC.Types.krep$*) -}
e53c5dc32b93442fa76601dbc4283861
  $tcLoadComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLoadComand2) -}
dffcaea6992275bc08e491ebb39497f6
  $tcLoadComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadComand"#) -}
f3d7ca64b095ee88c57e9cc150862aa8
  $tcLoop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7598672606538956313##
                   5783028239806617295##
                   Messages.$trModule
                   Messages.$tcLoop1
                   0#
                   GHC.Types.krep$*) -}
c0819042186b74c5c8edef2cbb843ae6
  $tcLoop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLoop2) -}
ad7b721ea21d9cbe71098a132c0dd61b
  $tcLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Loop"#) -}
25aa5e05fbac701e11d885636873a8b6
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17629188345491662824##
                   150815838324290956##
                   Messages.$trModule
                   Messages.$tcMessage1
                   0#
                   GHC.Types.krep$*) -}
1ee010fd2cd3193e65b30296e333fe6d
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcMessage2) -}
08702cd0a49561e90a0230f23a72508d
  $tcMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Message"#) -}
d2012d52c81fe33e65006cbd785b7422
  $tcOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2366444355446282047##
                   7333520884511233040##
                   Messages.$trModule
                   Messages.$tcOperator1
                   0#
                   GHC.Types.krep$*) -}
49e3aa1a9e1077993f858ac014f43248
  $tcOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcOperator2) -}
075d87fb72e5fdd98f5d23c995b3db95
  $tcOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Operator"#) -}
22c97987df4be3dbe004b1bdc55888d6
  $tcOperatorType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16837148863565139546##
                   2547978104910779316##
                   Messages.$trModule
                   Messages.$tcOperatorType1
                   0#
                   GHC.Types.krep$*) -}
8ac01e541064fe3a9e03311b381407a6
  $tcOperatorType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcOperatorType2) -}
8b725784987762f815b84b0cbdd5bffb
  $tcOperatorType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OperatorType"#) -}
fba918923e8ed83513ce808c7dd168a3
  $tcProgram :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3300348895868605431##
                   4366288587153567048##
                   Messages.$trModule
                   Messages.$tcProgram1
                   0#
                   GHC.Types.krep$*) -}
47a3b046366dca0716093bbacf00cad4
  $tcProgram1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcProgram2) -}
0389be533ebbe624c045a9a25209125a
  $tcProgram2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program"#) -}
c97d4db20bb0c1e214eb90f5b15daf8a
  $tcProgramResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   629015679600719096##
                   7029252769508268930##
                   Messages.$trModule
                   Messages.$tcProgramResult1
                   0#
                   GHC.Types.krep$*) -}
c8646811e3e0bfa852cf28a922987d80
  $tcProgramResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcProgramResult2) -}
4ee273a42b8ff52e5bd327812a6747da
  $tcProgramResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProgramResult"#) -}
ec62432a190c5d1aef69f127f3e35867
  $tcPublishComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13634026866307989731##
                   17651405504094507682##
                   Messages.$trModule
                   Messages.$tcPublishComand1
                   0#
                   GHC.Types.krep$*) -}
eae8907ca93c20e3b6ab420066109bbf
  $tcPublishComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcPublishComand2) -}
1b47ed951feba77bcc44451b3b2ed418
  $tcPublishComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishComand"#) -}
492b75c88ff308792334aa6a58544264
  $tcReturnStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18128530303199839518##
                   2865572305733712849##
                   Messages.$trModule
                   Messages.$tcReturnStatement1
                   0#
                   GHC.Types.krep$*) -}
88bc434cbc832c390371fecc0a2dc64c
  $tcReturnStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcReturnStatement2) -}
328667c9f0b84eeb2ddbb18c510a4a3e
  $tcReturnStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnStatement"#) -}
e0f4b8aff10bf960da23d4fb36a7f004
  $tcStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3228128735663352452##
                   6210087170352156836##
                   Messages.$trModule
                   Messages.$tcStatement1
                   0#
                   GHC.Types.krep$*) -}
6f22d4b4c6a3381dfde56df226123bcd
  $tcStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcStatement2) -}
681baf129713602c14fab3fc36a92a56
  $tcStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Statement"#) -}
ce07694a4bfe50afdbaf56ee9acb2e51
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Messages.$trModule3
                   Messages.$trModule1) -}
ca80f246c73abad5979ac3a0444c46a7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$trModule2) -}
9a615bbac425229d1056078d47b02a30
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Messages"#) -}
100042bc0afd67801a29928b19229cac
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$trModule4) -}
1d23dd0093d6455d6fc43cbc0857764b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("utils-0.1.0.0-ruQcw8wBHGC0OCiXN6O03"#) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Assignment r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Assignment r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       w i'1 (Messages.Assignment a1 a2)) })) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Expression r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget10 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Statement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget11 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.LoadComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.LoadComand r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$s$cget2
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: GHC.Base.String)[OneShot] ->
                       w i'1 (Messages.LoadComand a1 a2)) })) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget12 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Loop r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Loop r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget11
                      @ Messages.Statement
                      Messages.$fBinaryStatement
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [Messages.Statement])[OneShot] ->
                       w i'1 (Messages.While a1 a2)) })) -}
8d819ba2fa1783312488d0645a389cc0
  $w$cget13 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Message r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget14 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Operator r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
93ffc69cc23a46c81eb4da627ffabbe8
  $w$cget15 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.OperatorType r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.OperatorType r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> w (Data.ByteString.Internal.PS
                                   dt2
                                   dt3
                                   (GHC.Prim.+# dt4 1#)
                                   (GHC.Prim.-# dt5 1#))
                                Messages.BoolType
                           0##
                           -> w (Data.ByteString.Internal.PS
                                   dt2
                                   dt3
                                   (GHC.Prim.+# dt4 1#)
                                   (GHC.Prim.-# dt5 1#))
                                Messages.IntType
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt2
                                   dt3
                                   (GHC.Prim.+# dt4 1#)
                                   (GHC.Prim.-# dt5 1#))
                                Messages.StringType } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.BoolType
                        0##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.IntType
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.StringType } } } }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $w$cget16 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.ProgramResult r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
387bd43449f6efd27fec47b336086082
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Constant r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Constant r) ->
                 let {
                   lvl13 :: Data.ByteString.Internal.ByteString
                            -> GHC.Base.String -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Base.String)[OneShot] ->
                     w i' (Messages.StringConstant a1)
                 } in
                 let {
                   lvl14 :: Data.ByteString.Internal.ByteString
                            -> GHC.Types.Int -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Types.Int)[OneShot] ->
                     w i' (Messages.IntConstant a1)
                 } in
                 let {
                   lvl15 :: Data.ByteString.Internal.ByteString
                            -> GHC.Types.Bool -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Types.Bool)[OneShot] ->
                     w i' (Messages.BoolConstant a1)
                 } in
                 let {
                   $wks :: GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Word#
                           -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww4 :: GHC.Prim.Addr#)
                       (ww5 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (ww6 :: GHC.Prim.Int#)[OneShot]
                       (ww7 :: GHC.Prim.Int#)[OneShot]
                       (ww8 :: GHC.Prim.Word#)[OneShot] ->
                     case ww8 of wild {
                       DEFAULT -> Data.Binary.Class.$w$cget @ r ww4 ww5 ww6 ww7 lvl15
                       0## -> Data.Binary.Class.$w$cget3 @ r ww4 ww5 ww6 ww7 lvl14
                       1## -> Data.Binary.Class.$w$s$cget2 @ r ww4 ww5 ww6 ww7 lvl13 }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         $wks dt2 dt3 (GHC.Prim.+# dt4 1#) (GHC.Prim.-# dt5 1#) ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#)
                        ipv1 } } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.DBComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.DBComand r) ->
                 let {
                   lvl13 :: Data.ByteString.Internal.ByteString
                            -> Messages.PublishComand -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Messages.PublishComand)[OneShot] ->
                     w i' (Messages.PublishDBComand a1)
                 } in
                 let {
                   lvl14 :: Data.ByteString.Internal.ByteString
                            -> Messages.Expression -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Messages.Expression)[OneShot] ->
                     case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                     Data.Binary.Class.$w$s$cget2
                       @ r
                       ww5
                       ww6
                       ww7
                       ww8
                       (\ (i'1 :: Data.ByteString.Internal.ByteString)
                          (a2 :: GHC.Base.String)[OneShot] ->
                        w i'1 (Messages.LoadDBComand (Messages.LoadComand a1 a2))) }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> Messages.$w$cget1
                                @ r
                                dt2
                                dt3
                                (GHC.Prim.+# dt4 1#)
                                (GHC.Prim.-# dt5 1#)
                                lvl14
                           0##
                           -> Messages.$w$cget4
                                @ r
                                dt2
                                dt3
                                (GHC.Prim.+# dt4 1#)
                                (GHC.Prim.-# dt5 1#)
                                lvl13 } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> Messages.$w$cget1
                             @ r
                             ww
                             ww1
                             (GHC.Prim.+# ww2 1#)
                             (GHC.Prim.-# ww3 1#)
                             lvl14
                        0##
                        -> Messages.$w$cget4
                             @ r
                             ww
                             ww1
                             (GHC.Prim.+# ww2 1#)
                             (GHC.Prim.-# ww3 1#)
                             lvl13 } } } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.PublishComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.PublishComand r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Data.Binary.Class.$w$cget3
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a3 :: GHC.Types.Int)[OneShot] ->
                          w i'2 (Messages.PublishComand a1 a2 a3)) }) })) -}
8d3e2aa07310548f23f662d16a6eddc3
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.DBMessage r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget6 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.IfThenElse r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.IfThenElse r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Messages.$w$cget1
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a3 :: Messages.Expression)[OneShot] ->
                          w i'2 (Messages.IfThenElse a1 a2 a3)) }) })) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget7 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Invocation r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Invocation r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget11
                      @ Messages.Expression
                      Messages.$fBinaryExpression
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [Messages.Expression])[OneShot] ->
                       w i'1 (Messages.Invocation a1 a2)) })) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget8 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.LambdaDef r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.LambdaDef r) ->
                 Data.Binary.Class.$w$cget11
                   @ [GHC.Types.Char]
                   Data.Binary.Class.$fBinaryVersion_$s$fBinary[]
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [GHC.Base.String])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget9
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Program)[OneShot] ->
                       w i'1 (Messages.LambdaDef a1 a2)) })) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cget9 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Program r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Program r) ->
                 Data.Binary.Class.$w$cget11
                   @ Messages.Statement
                   Messages.$fBinaryStatement
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Messages.Statement])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       w i'1 (Messages.Program a1 (Messages.ReturnStatement a2))) })) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput ::
    GHC.Base.String
    -> Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Messages.Expression) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case Messages.$w$cput1 ww1 of ww2 { (#,#) ww3 ww4 ->
                     (Data.Binary.Put.PairS @ () ww3 ww4)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput1 ::
    Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput10 ::
    [Messages.Statement]
    -> Messages.ReturnStatement
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ (ww :: [Messages.Statement])
                   (ww1 :: Messages.ReturnStatement) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case ww1 of wild { Messages.ReturnStatement e ->
                     case Messages.$w$cput1 e of ww2 { (#,#) ww3 ww4 ->
                     (Data.Binary.Put.PairS @ () ww3 ww4)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Statement
                                ww
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryLambdaDef_go ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x2 :: Data.ByteString.Builder.Internal.BuildStep r
                       = g (case k `cast`
                                 (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                            w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x1 })
                     } in
                     let {
                       lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                         case x of wild1 { GHC.Int.I64# x# ->
                         let {
                           w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                         } in
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                dt2
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                eta of s2 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 1#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                s2 of s1 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 2#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                s1 of s3 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 3#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                s3 of s4 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 4#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                s4 of s5 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 5#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                s5 of s6 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 6#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                s6 of s7 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 7#)
                                0#
                                (GHC.Prim.narrow8Word# w1)
                                s7 of s8 { DEFAULT ->
                         (x2
                            (Data.ByteString.Builder.Internal.BufferRange
                               (GHC.Prim.plusAddr# dt2 8#)
                               dt3))
                           `cast`
                         (GHC.Types.N:IO[0]
                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                           s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt2
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           (x2
                              (Data.ByteString.Builder.Internal.BufferRange
                                 (GHC.Prim.plusAddr# dt2 8#)
                                 dt3))
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                             s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt2
                                lvl13
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput11 ::
    Messages.Statement
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput12 ::
    Messages.Expression
    -> [Messages.Statement]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: [Messages.Statement]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Statement
                                ww1
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryLoop_go ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (let {
                          x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                        } in
                        let {
                          lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.ByteString.Builder.Internal.BuildSignal r #)
                            {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                          = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case x of wild1 { GHC.Int.I64# x# ->
                            let {
                              w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                            } in
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                   eta of s2 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 1#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                   s2 of s1 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 2#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                   s1 of s3 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 3#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                   s3 of s4 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 4#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                   s4 of s5 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 5#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                   s5 of s6 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 6#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                   s6 of s7 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 7#)
                                   0#
                                   (GHC.Prim.narrow8Word# w1)
                                   s7 of s8 { DEFAULT ->
                            (x2
                               (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 8#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s8 } } } } } } } } } }
                        } in
                        (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                         case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 8# of lwild {
                           DEFAULT
                           -> case x of wild1 { GHC.Int.I64# x# ->
                              let {
                                w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                     eta1 of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s7 of s8 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 8#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } }
                           1#
                           -> (# eta1,
                                 Data.ByteString.Builder.Internal.BufferFull
                                   @ r
                                   8#
                                   dt2
                                   lvl13
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) #) } })
                          `cast`
                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
8d819ba2fa1783312488d0645a389cc0
  $w$cput13 ::
    Messages.Message
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput14 ::
    Messages.Operator
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
463a0aeaa428955d3ff50f0c95ee38c6
  $w$cput15 ::
    Messages.ProgramResult
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.ProgramResult) ->
                 case w of wild {
                   Messages.Success res
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList res of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.CompilationError descr
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList descr of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
387bd43449f6efd27fec47b336086082
  $w$cput2 ::
    Messages.Constant
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.Constant) ->
                 case w of wild {
                   Messages.IntConstant i
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cput9 i of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.StringConstant s
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList s of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.BoolConstant b
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cput b of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     2##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       2##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput3 ::
    Messages.DBComand
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.DBComand) ->
                 case w of wild {
                   Messages.PublishDBComand pc
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case pc of ww { Messages.PublishComand ww1 ww2 ww3 ->
                          case Messages.$w$cput5 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                          (Data.Binary.Put.PairS @ () ww5 ww6)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.LoadDBComand lc
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case lc of ww { Messages.LoadComand ww1 ww2 ->
                          case Messages.$w$cput4 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput4 ::
    Messages.Expression
    -> GHC.Base.String
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: GHC.Base.String) ->
                 let {
                   k :: Data.Binary.Put.PairS ()
                   = case Data.Binary.Class.$w$cputList ww1 of ww2 { (#,#) ww3 ww4 ->
                     Data.Binary.Put.PairS @ () ww3 ww4 }
                 } in
                 (# case k of wild { Data.Binary.Put.PairS b1 w' -> b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput5 ::
    Messages.Expression
    -> Messages.Expression
    -> GHC.Types.Int
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: Messages.Expression)
                   (ww2 :: GHC.Types.Int) ->
                 let {
                   k :: Data.Binary.Put.PairS ()
                   = case Data.Binary.Class.$w$cput9 ww2 of ww3 { (#,#) ww4 ww5 ->
                     Data.Binary.Put.PairS @ () ww4 ww5 }
                 } in
                 (# case k of wild { Data.Binary.Put.PairS b1 w' -> b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f21 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (f21
                          (case k of wild { Data.Binary.Put.PairS b1 w' ->
                           w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                             x })))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
8d3e2aa07310548f23f662d16a6eddc3
  $w$cput6 ::
    Messages.DBMessage
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput7 ::
    Messages.Expression
    -> Messages.Expression
    -> Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case Messages.$w$cput1 ww2 of ww3 { (#,#) ww4 ww5 ->
                     (Data.Binary.Put.PairS @ () ww4 ww5)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f21 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (f21
                          (case k `cast`
                                (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                           w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                             x })))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput8 ::
    GHC.Base.String
    -> [Messages.Expression]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [Messages.Expression]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Expression
                                ww1
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryInvocation_go ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (let {
                          x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                        } in
                        let {
                          lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.ByteString.Builder.Internal.BuildSignal r #)
                            {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                          = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case x of wild1 { GHC.Int.I64# x# ->
                            let {
                              w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                            } in
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                   eta of s2 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 1#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                   s2 of s1 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 2#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                   s1 of s3 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 3#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                   s3 of s4 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 4#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                   s4 of s5 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 5#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                   s5 of s6 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 6#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                   s6 of s7 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 7#)
                                   0#
                                   (GHC.Prim.narrow8Word# w1)
                                   s7 of s8 { DEFAULT ->
                            (x2
                               (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 8#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s8 } } } } } } } } } }
                        } in
                        (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                         case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 8# of lwild {
                           DEFAULT
                           -> case x of wild1 { GHC.Int.I64# x# ->
                              let {
                                w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                     eta1 of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s7 of s8 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 8#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } }
                           1#
                           -> (# eta1,
                                 Data.ByteString.Builder.Internal.BufferFull
                                   @ r
                                   8#
                                   dt2
                                   lvl13
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) #) } })
                          `cast`
                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cput9 ::
    [GHC.Base.String]
    -> Messages.Program
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.String])
                   (ww1 :: Messages.Program) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case ww1 of ww2 { Messages.Program ww3 ww4 ->
                     case Messages.$w$cput10 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                     (Data.Binary.Put.PairS @ () ww6 ww7)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.$fBinaryVersion_$s$cputList ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w ->
                         w `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Messages.Expression) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowAssignment2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowAssignment2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec10 ::
    GHC.Prim.Int# -> Messages.Statement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec11 ::
    GHC.Prim.Int# -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: Messages.Expression) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Messages.$fShowLambdaDef4 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Messages.$fShowLambdaDef4
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Messages.Expression -> [Messages.Statement] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: [Messages.Statement]) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLoop2
                       (f20
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of wild {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                                : x1 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (Messages.$w$cshowsPrec10
                                        0#
                                        x1
                                        (let {
                                           lvl43 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                         } in
                                         letrec {
                                           showl :: [Messages.Statement] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [Messages.Statement]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl43
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (Messages.$w$cshowsPrec10 0# y (showl ys)) }
                                         } in
                                         showl xs)) })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
463a0aeaa428955d3ff50f0c95ee38c6
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> Messages.ProgramResult -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Messages.ProgramResult)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.Success b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowMessage8
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowMessage8
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   Messages.CompilationError b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowMessage7
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowMessage7
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1))))) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec14 ::
    GHC.Prim.Int# -> Messages.Operator -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Messages.Operator) ->
                 case w of wild {
                   Messages.UnaryOperator b1 b2 b3
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b3
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowOperator9
                            (let {
                               eta :: GHC.Base.String
                               = GHC.Show.showLitString
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                             } in
                             case b1 of wild1 {
                               Messages.IntType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator7
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.StringType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator5
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.BoolType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)) })
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }
                   Messages.BinaryOperator b1 b2 b3 b4
                   -> let {
                        f20 :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b3
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowOperator2
                            (let {
                               eta :: GHC.Base.String
                               = GHC.Show.showLitString
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (f20
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (g x)))))
                             } in
                             case b1 of wild1 {
                               Messages.IntType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator7
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.StringType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator5
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.BoolType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)) })
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) } }) -}
93ffc69cc23a46c81eb4da627ffabbe8
  $w$cshowsPrec15 ::
    Messages.OperatorType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.OperatorType)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.IntType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator7 w1
                   Messages.StringType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator5 w1
                   Messages.BoolType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator3 w1 }) -}
387bd43449f6efd27fec47b336086082
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Messages.Constant -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Messages.Constant)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.IntConstant b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant4
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant4
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Messages.StringConstant b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   Messages.BoolConstant b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant2
                             (case b1 of wild1 {
                                GHC.Types.False
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool4 w1
                                GHC.Types.True
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool2 w1 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant2
                                (case b1 of wild1 {
                                   GHC.Types.False
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool4
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                                   GHC.Types.True
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) })) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Messages.DBComand) ->
                 case w of wild {
                   Messages.PublishDBComand b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Messages.PublishComand ww2 ww3 ww4 ->
                          Messages.$w$cshowsPrec5 11# ww2 ww3 ww4 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand5 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowDBComand5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Messages.LoadDBComand b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Messages.LoadComand ww2 ww3 ->
                          Messages.$w$cshowsPrec4 11# ww2 ww3 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand2 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowDBComand2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Messages.Expression -> GHC.Base.String -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: GHC.Base.String) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowDBComand4
                        (f20
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Show.showLitString
                                    ww2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowDBComand4
                           (f20
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Show.showLitString
                                       ww2
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)3
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Messages.Expression
    -> Messages.Expression
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   f21 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     f20
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f21
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                 case GHC.Show.$wshowSignedInt 11# ww5 x of ww6 { (#,#) ww7 ww8 ->
                                 GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand7 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Messages.$fShowDBComand7
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Messages.Expression
    -> Messages.Expression
    -> Messages.Expression
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression)
                   (ww3 :: Messages.Expression) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   f21 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww3
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowIfThenElse2
                        (f20
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (f21 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowIfThenElse2
                           (f20
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (f21
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> [Messages.Expression]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: [Messages.Expression])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowInvocation2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of wild {
                                      [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                                      : x1 xs
                                      -> GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__3
                                           (Messages.$w$cshowsPrec1
                                              0#
                                              x1
                                              (let {
                                                 lvl43 :: [GHC.Types.Char]
                                                 = GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.showList__2
                                                     x
                                               } in
                                               letrec {
                                                 showl :: [Messages.Expression] -> GHC.Base.String
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ (ds2 :: [Messages.Expression]) ->
                                                   case ds2 of wild1 {
                                                     [] -> lvl43
                                                     : y ys
                                                     -> GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.showList__1
                                                          (Messages.$w$cshowsPrec1
                                                             0#
                                                             y
                                                             (showl ys)) }
                                               } in
                                               showl xs)) })))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> [GHC.Base.String] -> Messages.Program -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U,1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [GHC.Base.String])
                   (ww2 :: Messages.Program) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Messages.Program ww4 ww5 ->
                     Messages.$w$cshowsPrec9 11# ww4 ww5 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLambdaDef2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.$fShow(,)3
                                  (GHC.Show.showLitString
                                     x1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (let {
                                           lvl43 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                         } in
                                         letrec {
                                           showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [[GHC.Types.Char]]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl43
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)3
                                                       (GHC.Show.showLitString
                                                          y
                                                          (GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.$fShow(,)3
                                                             (showl ys)))) }
                                         } in
                                         showl xs)))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> [Messages.Statement]
    -> Messages.ReturnStatement
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Messages.Statement])
                   (ww2 :: Messages.ReturnStatement) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Messages.ReturnStatement ww4 ->
                     Messages.$w$cshowsPrec11 11# ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLambdaDef3
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Messages.$w$cshowsPrec10
                                  0#
                                  x1
                                  (let {
                                     lvl43 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Messages.Statement] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Messages.Statement]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl43
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Messages.$w$cshowsPrec10 0# y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
fbc8854ed5aea4c6ef396b027174bf0a
  $wdt ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             2##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   2##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
7c46ef854090e0e53a24b542b4fea50a
  $wdt1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
efdd3dfeeb283e5aa203c3ce19ce7583
  $wdt2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
ddbc7a551070bc191cac4b5d5ddee0b5
  data Assignment = Assignment GHC.Base.String Messages.Expression
387bd43449f6efd27fec47b336086082
  data Constant
    = IntConstant GHC.Types.Int
    | StringConstant GHC.Base.String
    | BoolConstant GHC.Types.Bool
ddbc7a551070bc191cac4b5d5ddee0b5
  data DBComand
    = PublishDBComand Messages.PublishComand
    | LoadDBComand Messages.LoadComand
8d3e2aa07310548f23f662d16a6eddc3
  data DBMessage
    = PublishMessage GHC.Base.String GHC.Base.String GHC.Types.Int
    | LoadMessage GHC.Base.String
    | LoadMessageWithID Network.Transport.ConnectionId GHC.Base.String
    | LoadResult GHC.Base.String
    | LoadResultForID Network.Transport.ConnectionId GHC.Base.String
    | LoadError GHC.Base.String
    | LoadErrorForID Network.Transport.ConnectionId GHC.Base.String
    | RegisterDBWorker
ddbc7a551070bc191cac4b5d5ddee0b5
  data Expression
    = InvocationExpression Messages.Invocation
    | ConstantExpression Messages.Constant
    | OperatorExpression Messages.Operator
    | IfThenElseExpression Messages.IfThenElse
    | LambdaDefExpression Messages.LambdaDef
    | BracesExpression Messages.Expression
    | VariableExpression GHC.Base.String
ddbc7a551070bc191cac4b5d5ddee0b5
  data IfThenElse
    = IfThenElse Messages.Expression
                 Messages.Expression
                 Messages.Expression
ddbc7a551070bc191cac4b5d5ddee0b5
  data Invocation = Invocation GHC.Base.String [Messages.Expression]
ddbc7a551070bc191cac4b5d5ddee0b5
  data LambdaDef = LambdaDef [GHC.Base.String] Messages.Program
ddbc7a551070bc191cac4b5d5ddee0b5
  data LoadComand = LoadComand Messages.Expression GHC.Base.String
ddbc7a551070bc191cac4b5d5ddee0b5
  data Loop = While Messages.Expression [Messages.Statement]
8d819ba2fa1783312488d0645a389cc0
  data Message
    = CompileClientRequest Messages.Program
    | CompileWorkerRequest Network.Transport.ConnectionId
                           Messages.Program
    | CompileWorkerReply Network.Transport.ConnectionId
                         Messages.ProgramResult
    | CompileClientReply Messages.ProgramResult
    | RegisterWorker
ddbc7a551070bc191cac4b5d5ddee0b5
  data Operator
    = UnaryOperator Messages.OperatorType
                    GHC.Base.String
                    Messages.Expression
    | BinaryOperator Messages.OperatorType
                     GHC.Base.String
                     Messages.Expression
                     Messages.Expression
93ffc69cc23a46c81eb4da627ffabbe8
  data OperatorType = IntType | StringType | BoolType
ddbc7a551070bc191cac4b5d5ddee0b5
  data Program
    = Program [Messages.Statement] Messages.ReturnStatement
463a0aeaa428955d3ff50f0c95ee38c6
  data ProgramResult
    = Success GHC.Base.String | CompilationError GHC.Base.String
ddbc7a551070bc191cac4b5d5ddee0b5
  data PublishComand
    = PublishComand Messages.Expression
                    Messages.Expression
                    GHC.Types.Int
ddbc7a551070bc191cac4b5d5ddee0b5
  data ReturnStatement = ReturnStatement Messages.Expression
ddbc7a551070bc191cac4b5d5ddee0b5
  data Statement
    = AssignmentStatement Messages.Assignment
    | LoopStatement Messages.Loop
    | InvocationStatement Messages.Invocation
    | DBComandStatement Messages.DBComand
instance Data.Binary.Class.Binary [Messages.Assignment]
  = Messages.$fBinaryAssignment
instance Data.Binary.Class.Binary [Messages.Constant]
  = Messages.$fBinaryConstant
instance Data.Binary.Class.Binary [Messages.DBComand]
  = Messages.$fBinaryDBComand
instance Data.Binary.Class.Binary [Messages.DBMessage]
  = Messages.$fBinaryDBMessage
instance Data.Binary.Class.Binary [Messages.Expression]
  = Messages.$fBinaryExpression
instance Data.Binary.Class.Binary [Messages.IfThenElse]
  = Messages.$fBinaryIfThenElse
instance Data.Binary.Class.Binary [Messages.Invocation]
  = Messages.$fBinaryInvocation
instance Data.Binary.Class.Binary [Messages.LambdaDef]
  = Messages.$fBinaryLambdaDef
instance Data.Binary.Class.Binary [Messages.LoadComand]
  = Messages.$fBinaryLoadComand
instance Data.Binary.Class.Binary [Messages.Loop]
  = Messages.$fBinaryLoop
instance Data.Binary.Class.Binary [Messages.Message]
  = Messages.$fBinaryMessage
instance Data.Binary.Class.Binary [Messages.Operator]
  = Messages.$fBinaryOperator
instance Data.Binary.Class.Binary [Messages.OperatorType]
  = Messages.$fBinaryOperatorType
instance Data.Binary.Class.Binary [Messages.Program]
  = Messages.$fBinaryProgram
instance Data.Binary.Class.Binary [Messages.ProgramResult]
  = Messages.$fBinaryProgramResult
instance Data.Binary.Class.Binary [Messages.PublishComand]
  = Messages.$fBinaryPublishComand
instance Data.Binary.Class.Binary [Messages.ReturnStatement]
  = Messages.$fBinaryReturnStatement
instance Data.Binary.Class.Binary [Messages.Statement]
  = Messages.$fBinaryStatement
instance GHC.Classes.Eq [Messages.OperatorType]
  = Messages.$fEqOperatorType
instance GHC.Show.Show [Messages.Assignment]
  = Messages.$fShowAssignment
instance GHC.Show.Show [Messages.Constant]
  = Messages.$fShowConstant
instance GHC.Show.Show [Messages.DBComand]
  = Messages.$fShowDBComand
instance GHC.Show.Show [Messages.DBMessage]
  = Messages.$fShowDBMessage
instance GHC.Show.Show [Messages.Expression]
  = Messages.$fShowExpression
instance GHC.Show.Show [Messages.IfThenElse]
  = Messages.$fShowIfThenElse
instance GHC.Show.Show [Messages.Invocation]
  = Messages.$fShowInvocation
instance GHC.Show.Show [Messages.LambdaDef]
  = Messages.$fShowLambdaDef
instance GHC.Show.Show [Messages.LoadComand]
  = Messages.$fShowLoadComand
instance GHC.Show.Show [Messages.Loop] = Messages.$fShowLoop
instance GHC.Show.Show [Messages.Message] = Messages.$fShowMessage
instance GHC.Show.Show [Messages.Operator]
  = Messages.$fShowOperator
instance GHC.Show.Show [Messages.OperatorType]
  = Messages.$fShowOperatorType
instance GHC.Show.Show [Messages.Program] = Messages.$fShowProgram
instance GHC.Show.Show [Messages.ProgramResult]
  = Messages.$fShowProgramResult
instance GHC.Show.Show [Messages.PublishComand]
  = Messages.$fShowPublishComand
instance GHC.Show.Show [Messages.ReturnStatement]
  = Messages.$fShowReturnStatement
instance GHC.Show.Show [Messages.Statement]
  = Messages.$fShowStatement
"SPEC/Messages defaultPutList @ Assignment" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Assignment)
  Data.Binary.Class.defaultPutList @ Messages.Assignment $dBinary
  = Messages.$fBinaryAssignment_$sdefaultPutList
"SPEC/Messages defaultPutList @ Constant" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.Constant)
  Data.Binary.Class.defaultPutList @ Messages.Constant $dBinary
  = Messages.$fBinaryConstant_$sdefaultPutList
"SPEC/Messages defaultPutList @ DBComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.DBComand)
  Data.Binary.Class.defaultPutList @ Messages.DBComand $dBinary
  = Messages.$fBinaryDBComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ DBMessage" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.DBMessage)
  Data.Binary.Class.defaultPutList @ Messages.DBMessage $dBinary
  = Messages.$fBinaryDBMessage_$sdefaultPutList
"SPEC/Messages defaultPutList @ Expression" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Expression)
  Data.Binary.Class.defaultPutList @ Messages.Expression $dBinary
  = Messages.$fBinaryExpression_$sdefaultPutList
"SPEC/Messages defaultPutList @ IfThenElse" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.IfThenElse)
  Data.Binary.Class.defaultPutList @ Messages.IfThenElse $dBinary
  = Messages.$fBinaryIfThenElse_$sdefaultPutList
"SPEC/Messages defaultPutList @ Invocation" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Invocation)
  Data.Binary.Class.defaultPutList @ Messages.Invocation $dBinary
  = Messages.$fBinaryInvocation_$sdefaultPutList
"SPEC/Messages defaultPutList @ LambdaDef" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.LambdaDef)
  Data.Binary.Class.defaultPutList @ Messages.LambdaDef $dBinary
  = Messages.$fBinaryLambdaDef_$sdefaultPutList
"SPEC/Messages defaultPutList @ LoadComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.LoadComand)
  Data.Binary.Class.defaultPutList @ Messages.LoadComand $dBinary
  = Messages.$fBinaryLoadComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ Loop" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Messages.Loop)
  Data.Binary.Class.defaultPutList @ Messages.Loop $dBinary
  = Messages.$fBinaryLoop_$sdefaultPutList
"SPEC/Messages defaultPutList @ Message" forall ($dBinary :: Data.Binary.Class.Binary
                                                               Messages.Message)
  Data.Binary.Class.defaultPutList @ Messages.Message $dBinary
  = Messages.$fBinaryMessage_$sdefaultPutList
"SPEC/Messages defaultPutList @ Operator" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.Operator)
  Data.Binary.Class.defaultPutList @ Messages.Operator $dBinary
  = Messages.$fBinaryOperator_$sdefaultPutList
"SPEC/Messages defaultPutList @ OperatorType" forall ($dBinary :: Data.Binary.Class.Binary
                                                                    Messages.OperatorType)
  Data.Binary.Class.defaultPutList @ Messages.OperatorType $dBinary
  = Messages.$fBinaryOperatorType_$sdefaultPutList
"SPEC/Messages defaultPutList @ Program" forall ($dBinary :: Data.Binary.Class.Binary
                                                               Messages.Program)
  Data.Binary.Class.defaultPutList @ Messages.Program $dBinary
  = Messages.$fBinaryProgram_$sdefaultPutList
"SPEC/Messages defaultPutList @ ProgramResult" forall ($dBinary :: Data.Binary.Class.Binary
                                                                     Messages.ProgramResult)
  Data.Binary.Class.defaultPutList @ Messages.ProgramResult $dBinary
  = Messages.$fBinaryProgramResult_$sdefaultPutList
"SPEC/Messages defaultPutList @ PublishComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                     Messages.PublishComand)
  Data.Binary.Class.defaultPutList @ Messages.PublishComand $dBinary
  = Messages.$fBinaryPublishComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ ReturnStatement" forall ($dBinary :: Data.Binary.Class.Binary
                                                                       Messages.ReturnStatement)
  Data.Binary.Class.defaultPutList @ Messages.ReturnStatement
                                   $dBinary
  = Messages.$fBinaryReturnStatement_$sdefaultPutList
"SPEC/Messages defaultPutList @ Statement" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.Statement)
  Data.Binary.Class.defaultPutList @ Messages.Statement $dBinary
  = Messages.$fBinaryStatement_$sdefaultPutList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

