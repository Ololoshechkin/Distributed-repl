
==================== FINAL INTERFACE ====================
2019-09-22 14:15:11.194644 UTC

interface utils-0.1.0.0-BZjJqld5fnPXsXgmebWNy:Messages 8044
  interface hash: 1d249e21718af29dd78f453ba2960dae
  ABI hash: d092de2cd317fb3a419e83b1cbab3b00
  export-list hash: 62132a4cb01ebae9f23765df8d815c41
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Messages.Assignment{Messages.Assignment}
  Messages.Constant{Messages.BoolConstant Messages.IntConstant Messages.StringConstant}
  Messages.DBComand{Messages.LoadDBComand Messages.PublishDBComand}
  Messages.DBMessage{Messages.LoadError Messages.LoadErrorForID Messages.LoadMessage Messages.LoadMessageWithID Messages.LoadResult Messages.LoadResultForID Messages.PublishMessage Messages.RegisterDBWorker}
  Messages.Expression{Messages.BracesExpression Messages.ConstantExpression Messages.IfThenElseExpression Messages.InvocationExpression Messages.LambdaDefExpression Messages.OperatorExpression Messages.VariableExpression}
  Messages.IfThenElse{Messages.IfThenElse}
  Messages.Invocation{Messages.Invocation}
  Messages.LambdaDef{Messages.LambdaDef}
  Messages.LoadComand{Messages.LoadComand}
  Messages.Loop{Messages.While}
  Messages.Message{Messages.CompileClientReply Messages.CompileClientRequest Messages.CompileWorkerReply Messages.CompileWorkerRequest Messages.RegisterWorker}
  Messages.Operator{Messages.BinaryOperator Messages.UnaryOperator}
  Messages.OperatorType{Messages.BoolType Messages.IntType Messages.StringType}
  Messages.Program{Messages.Program}
  Messages.ProgramResult{Messages.CompilationError Messages.Success}
  Messages.PublishComand{Messages.PublishComand}
  Messages.ReturnStatement{Messages.ReturnStatement}
  Messages.Statement{Messages.AssignmentStatement Messages.DBComandStatement Messages.InvocationStatement Messages.LoopStatement}
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      network-transport-0.5.2 text-1.2.3.1
orphans: hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         network-transport-0.5.2:Network.Transport text-1.2.3.1:Data.Text
                         text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Word 22a60783baa8ba4f33c4588b366fade3
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  binary-0.8.5.1:Data.Binary.Class ca30142b0b1a68ad57845f336fc35efd
import  -/  binary-0.8.5.1:Data.Binary.Get.Internal 1a063dbb1b51807d783806a64525f1eb
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  network-transport-0.5.2:Network.Transport 18cb17ad2d91e2c94ab38d1745341964
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryAssignment :: Data.Binary.Class.Binary Messages.Assignment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Assignment
                  Messages.$fBinaryAssignment_$cput
                  Messages.$fBinaryAssignment1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Assignment>_R))
                  Messages.$fBinaryAssignment_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryAssignment1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Assignment r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Assignment r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryAssignment_$cput ::
    Messages.Assignment -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Assignment) ->
                 case w of ww { Messages.Assignment ww1 ww2 ->
                 case Messages.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryAssignment_$sdefaultPutList ::
    [Messages.Assignment] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Assignment]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Assignment
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Assignment)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Assignment
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Assignment) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryAssignment_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Assignment]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
b356b0386e99853e494630ae909b7ce2
  $fBinaryConstant :: Data.Binary.Class.Binary Messages.Constant
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Constant
                  Messages.$fBinaryConstant_$cput
                  Messages.$fBinaryConstant1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Constant>_R))
                  Messages.$fBinaryConstant_$sdefaultPutList -}
b356b0386e99853e494630ae909b7ce2
  $fBinaryConstant1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Constant r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Constant r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
dc766cc117eb435c08293d1d3e0a50f3
  $fBinaryConstant2 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt2 { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt2
                   Messages.$fBinaryConstant3 }) -}
04872d6357131942df1cd45e63d743ca
  $fBinaryConstant3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fBinaryConstant4) -}
8d1b2dec7dbb2f3b72afa0ceb308867e
  $fBinaryConstant4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
f93e1fbe732d0aead59e91ab157b1106
  $fBinaryConstant5 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
647679498008acbc0c8d8e3a0f505fbe
  $fBinaryConstant6 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt5 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt5))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
d37ea461dd7885bdd40879a0f2ae9919
  $fBinaryConstant7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
b356b0386e99853e494630ae909b7ce2
  $fBinaryConstant_$cput :: Messages.Constant -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Constant) ->
                 case Messages.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
b356b0386e99853e494630ae909b7ce2
  $fBinaryConstant_$sdefaultPutList ::
    [Messages.Constant] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Constant]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Constant
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Constant)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Constant
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Constant) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryConstant_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Constant]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryDBComand :: Data.Binary.Class.Binary Messages.DBComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBComand
                  Messages.$fBinaryDBComand_$cput
                  Messages.$fBinaryDBComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.DBComand>_R))
                  Messages.$fBinaryDBComand_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryDBComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.DBComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.DBComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryDBComand_$cput :: Messages.DBComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.DBComand) ->
                 case Messages.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryDBComand_$sdefaultPutList ::
    [Messages.DBComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.DBComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.DBComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.DBComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.DBComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.DBComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryDBComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.DBComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fBinaryDBMessage :: Data.Binary.Class.Binary Messages.DBMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBMessage
                  Messages.$fBinaryDBMessage_$cput
                  Messages.$fBinaryDBMessage1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.DBMessage>_R))
                  Messages.$fBinaryDBMessage_$sdefaultPutList -}
8ee84146ad6f0d7a5196e2a468f042df
  $fBinaryDBMessage1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.DBMessage r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.DBMessage r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fBinaryDBMessage_$cput ::
    Messages.DBMessage -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.DBMessage) ->
                 case Messages.$w$cput6 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fBinaryDBMessage_$sdefaultPutList ::
    [Messages.DBMessage] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.DBMessage]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.DBMessage
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.DBMessage)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.DBMessage
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.DBMessage) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryDBMessage_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.DBMessage]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryExpression :: Data.Binary.Class.Binary Messages.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Expression
                  Messages.$fBinaryExpression_$cput
                  Messages.$fBinaryExpression1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Expression>_R))
                  Messages.$fBinaryExpression_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryExpression1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Expression r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Expression r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryExpression_$cput ::
    Messages.Expression -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Expression) ->
                 case Messages.$w$cput1 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryExpression_$sdefaultPutList ::
    [Messages.Expression] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Expression]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Expression
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Expression)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Expression
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Expression) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryExpression_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Expression]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryIfThenElse :: Data.Binary.Class.Binary Messages.IfThenElse
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.IfThenElse
                  Messages.$fBinaryIfThenElse_$cput
                  Messages.$fBinaryIfThenElse1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.IfThenElse>_R))
                  Messages.$fBinaryIfThenElse_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryIfThenElse1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.IfThenElse r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.IfThenElse r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget6 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryIfThenElse_$cput ::
    Messages.IfThenElse -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.IfThenElse) ->
                 case w of ww { Messages.IfThenElse ww1 ww2 ww3 ->
                 case Messages.$w$cput7 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryIfThenElse_$sdefaultPutList ::
    [Messages.IfThenElse] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.IfThenElse]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.IfThenElse
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.IfThenElse)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.IfThenElse
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.IfThenElse) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryIfThenElse_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.IfThenElse]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryInvocation :: Data.Binary.Class.Binary Messages.Invocation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Invocation
                  Messages.$fBinaryInvocation_$cput
                  Messages.$fBinaryInvocation1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Invocation>_R))
                  Messages.$fBinaryInvocation_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryInvocation1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Invocation r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Invocation r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget7 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryInvocation_$cput ::
    Messages.Invocation -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Invocation) ->
                 case w of ww { Messages.Invocation ww1 ww2 ->
                 case Messages.$w$cput8 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryInvocation_$sdefaultPutList ::
    [Messages.Invocation] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Invocation]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Invocation
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Invocation)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Invocation
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Invocation) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryInvocation_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Invocation]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryInvocation_go ::
    [Messages.Expression] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLambdaDef :: Data.Binary.Class.Binary Messages.LambdaDef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LambdaDef
                  Messages.$fBinaryLambdaDef_$cput
                  Messages.$fBinaryLambdaDef1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.LambdaDef>_R))
                  Messages.$fBinaryLambdaDef_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLambdaDef1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.LambdaDef r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.LambdaDef r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget8 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLambdaDef_$cput ::
    Messages.LambdaDef -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.LambdaDef) ->
                 case w of ww { Messages.LambdaDef ww1 ww2 ->
                 case Messages.$w$cput9 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLambdaDef_$sdefaultPutList ::
    [Messages.LambdaDef] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.LambdaDef]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.LambdaDef
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.LambdaDef)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.LambdaDef
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.LambdaDef) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLambdaDef_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.LambdaDef]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLambdaDef_go ::
    [Messages.Statement] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoadComand :: Data.Binary.Class.Binary Messages.LoadComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LoadComand
                  Messages.$fBinaryLoadComand_$cput
                  Messages.$fBinaryLoadComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.LoadComand>_R))
                  Messages.$fBinaryLoadComand_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoadComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.LoadComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.LoadComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget11 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoadComand_$cput ::
    Messages.LoadComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.LoadComand) ->
                 case w of ww { Messages.LoadComand ww1 ww2 ->
                 case Messages.$w$cput4 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoadComand_$sdefaultPutList ::
    [Messages.LoadComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.LoadComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.LoadComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.LoadComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.LoadComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.LoadComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLoadComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.LoadComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoop :: Data.Binary.Class.Binary Messages.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Loop
                  Messages.$fBinaryLoop_$cput
                  Messages.$fBinaryLoop1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Loop>_R))
                  Messages.$fBinaryLoop_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoop1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Loop r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Loop r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget12 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoop_$cput :: Messages.Loop -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Loop) ->
                 case w of ww { Messages.While ww1 ww2 ->
                 case Messages.$w$cput12 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoop_$sdefaultPutList ::
    [Messages.Loop] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Loop]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Loop
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Loop)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Loop
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Loop) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLoop_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Loop]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryLoop_go :: [Messages.Statement] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
3ceab001701b2eca0bbde310cda1dad4
  $fBinaryMessage :: Data.Binary.Class.Binary Messages.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Message
                  Messages.$fBinaryMessage_$cput
                  Messages.$fBinaryMessage1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Message>_R))
                  Messages.$fBinaryMessage_$sdefaultPutList -}
3ceab001701b2eca0bbde310cda1dad4
  $fBinaryMessage1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Message r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Message r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget13 @ r ww1 ww2 ww3 ww4 w1 }) -}
3ceab001701b2eca0bbde310cda1dad4
  $fBinaryMessage_$cput :: Messages.Message -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Message) ->
                 case Messages.$w$cput13 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
3ceab001701b2eca0bbde310cda1dad4
  $fBinaryMessage_$sdefaultPutList ::
    [Messages.Message] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Message]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Message
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Message)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Message
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Message) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryMessage_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Message]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryOperator :: Data.Binary.Class.Binary Messages.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Operator
                  Messages.$fBinaryOperator_$cput
                  Messages.$fBinaryOperator1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Operator>_R))
                  Messages.$fBinaryOperator_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryOperator1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Operator r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Operator r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget14 @ r ww1 ww2 ww3 ww4 w1 }) -}
ebfa9a6c786d870f392dd18603156817
  $fBinaryOperatorType ::
    Data.Binary.Class.Binary Messages.OperatorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fBinaryOperatorType_$cput
                  Messages.$fBinaryOperatorType7
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.OperatorType>_R))
                  Messages.$fBinaryOperatorType_$sdefaultPutList -}
210b888210b3d4a3a882181493ef6bae
  $fBinaryOperatorType1 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType2
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
96ae11ae15ac77a945b6088a4f119ceb
  $fBinaryOperatorType2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt @ r w ww1 ww2 w2 }) -}
6867263d08a1a6e15c608f94eac6ecba
  $fBinaryOperatorType3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
553c2587d262fd1b5ad149e544254d7e
  $fBinaryOperatorType4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt1 @ r w ww1 ww2 w2 }) -}
d658dde6475e8b44a2f79910b78a3b1d
  $fBinaryOperatorType5 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType6
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
214f3d0bd2008d8718d15c5f494d9757
  $fBinaryOperatorType6 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt2 @ r w ww1 ww2 w2 }) -}
ebfa9a6c786d870f392dd18603156817
  $fBinaryOperatorType7 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.OperatorType r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.OperatorType r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget15 @ r ww1 ww2 ww3 ww4 w1 }) -}
ebfa9a6c786d870f392dd18603156817
  $fBinaryOperatorType_$cput ::
    Messages.OperatorType -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Messages.OperatorType) ->
                 case ds of wild {
                   Messages.IntType
                   -> Messages.$fBinaryOperatorType5
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Messages.StringType
                   -> Messages.$fBinaryOperatorType3
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Messages.BoolType
                   -> Messages.$fBinaryOperatorType1
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
ebfa9a6c786d870f392dd18603156817
  $fBinaryOperatorType_$sdefaultPutList ::
    [Messages.OperatorType] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.OperatorType]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.OperatorType
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.OperatorType)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.OperatorType
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.OperatorType) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryOperatorType_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.OperatorType]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryOperator_$cput :: Messages.Operator -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Operator) ->
                 case Messages.$w$cput14 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryOperator_$sdefaultPutList ::
    [Messages.Operator] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Operator]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Operator
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Operator)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Operator
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Operator) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryOperator_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Operator]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryProgram :: Data.Binary.Class.Binary Messages.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Program
                  Messages.$fBinaryProgram_$cput
                  Messages.$fBinaryProgram1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Program>_R))
                  Messages.$fBinaryProgram_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryProgram1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Program r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Program r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget9 @ r ww1 ww2 ww3 ww4 w1 }) -}
bcb4ae112e107767277481abb8051472
  $fBinaryProgramResult ::
    Data.Binary.Class.Binary Messages.ProgramResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ProgramResult
                  Messages.$fBinaryProgramResult_$cput
                  Messages.$fBinaryProgramResult1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.ProgramResult>_R))
                  Messages.$fBinaryProgramResult_$sdefaultPutList -}
bcb4ae112e107767277481abb8051472
  $fBinaryProgramResult1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.ProgramResult r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Messages.ProgramResult r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget16 @ r ww1 ww2 ww3 ww4 w1 }) -}
bcb4ae112e107767277481abb8051472
  $fBinaryProgramResult_$cput ::
    Messages.ProgramResult -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.ProgramResult) ->
                 case Messages.$w$cput15 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
bcb4ae112e107767277481abb8051472
  $fBinaryProgramResult_$sdefaultPutList ::
    [Messages.ProgramResult] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.ProgramResult]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.ProgramResult
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.ProgramResult)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.ProgramResult
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.ProgramResult) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryProgramResult_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.ProgramResult]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryProgram_$cput :: Messages.Program -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Program) ->
                 case w of ww { Messages.Program ww1 ww2 ->
                 case Messages.$w$cput10 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryProgram_$sdefaultPutList ::
    [Messages.Program] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Program]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Program
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Program)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Program
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Program) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryProgram_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Program]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryPublishComand ::
    Data.Binary.Class.Binary Messages.PublishComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.PublishComand
                  Messages.$fBinaryPublishComand_$cput
                  Messages.$fBinaryPublishComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.PublishComand>_R))
                  Messages.$fBinaryPublishComand_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryPublishComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.PublishComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Messages.PublishComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryPublishComand_$cput ::
    Messages.PublishComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.PublishComand) ->
                 case w of ww { Messages.PublishComand ww1 ww2 ww3 ->
                 case Messages.$w$cput5 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryPublishComand_$sdefaultPutList ::
    [Messages.PublishComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.PublishComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.PublishComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.PublishComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.PublishComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.PublishComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryPublishComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.PublishComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryReturnStatement ::
    Data.Binary.Class.Binary Messages.ReturnStatement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ReturnStatement
                  Messages.$fBinaryReturnStatement_$cput
                  Messages.$fBinaryReturnStatement1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.ReturnStatement>_R))
                  Messages.$fBinaryReturnStatement_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryReturnStatement1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.ReturnStatement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (i :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success
                            Messages.ReturnStatement r) ->
                 Messages.$fBinaryExpression1
                   @ r
                   i
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    ks i' (Messages.ReturnStatement a1))) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryReturnStatement_$cput ::
    Messages.ReturnStatement -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Messages.ReturnStatement) ->
                 case ds of wild { Messages.ReturnStatement e ->
                 Messages.$fBinaryExpression_$cput e }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryReturnStatement_$sdefaultPutList ::
    [Messages.ReturnStatement] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.ReturnStatement]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.ReturnStatement
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.ReturnStatement)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.ReturnStatement
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.ReturnStatement) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryReturnStatement_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.ReturnStatement]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryStatement :: Data.Binary.Class.Binary Messages.Statement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Statement
                  Messages.$fBinaryStatement_$cput
                  Messages.$fBinaryStatement1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Statement>_R))
                  Messages.$fBinaryStatement_$sdefaultPutList -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryStatement1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Statement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Statement r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget10 @ r ww1 ww2 ww3 ww4 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryStatement_$cput ::
    Messages.Statement -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Statement) ->
                 case Messages.$w$cput11 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fBinaryStatement_$sdefaultPutList ::
    [Messages.Statement] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Statement]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Statement
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Statement)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Statement
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Statement) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryStatement_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Statement]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
ebfa9a6c786d870f392dd18603156817
  $fEqOperatorType :: GHC.Classes.Eq Messages.OperatorType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fEqOperatorType_$c==
                  Messages.$fEqOperatorType_$c/= -}
ebfa9a6c786d870f392dd18603156817
  $fEqOperatorType_$c/= ::
    Messages.OperatorType -> Messages.OperatorType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Messages.OperatorType) (y :: Messages.OperatorType) ->
                 case x of wild {
                   Messages.IntType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Messages.IntType -> GHC.Types.False }
                   Messages.StringType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Messages.StringType -> GHC.Types.False }
                   Messages.BoolType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Messages.BoolType -> GHC.Types.False } }) -}
ebfa9a6c786d870f392dd18603156817
  $fEqOperatorType_$c== ::
    Messages.OperatorType -> Messages.OperatorType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Messages.OperatorType) (ds1 :: Messages.OperatorType) ->
                 case ds of wild {
                   Messages.IntType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Messages.IntType -> GHC.Types.True }
                   Messages.StringType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Messages.StringType -> GHC.Types.True }
                   Messages.BoolType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Messages.BoolType -> GHC.Types.True } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowAssignment :: GHC.Show.Show Messages.Assignment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Assignment
                  Messages.$fShowAssignment_$cshowsPrec
                  Messages.$fShowAssignment_$cshow
                  Messages.$fShowAssignment_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowAssignment1 :: Messages.Assignment -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Messages.Assignment) ->
                 case w of ww { Messages.Assignment ww1 ww2 ->
                 Messages.$w$cshowsPrec 0# ww1 ww2 }) -}
311e0fa37a36d686af6a54728d51f7a0
  $fShowAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assignment "#) -}
d094b8f6d0dea5b4f2b33460f89f50df
  $fShowAssignment3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowAssignment_$cshow :: Messages.Assignment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Assignment) ->
                 Messages.$fShowAssignment_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowAssignment_$cshowList ::
    [Messages.Assignment] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Assignment]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Assignment
                   Messages.$fShowAssignment1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowAssignment_$cshowsPrec ::
    GHC.Types.Int -> Messages.Assignment -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Assignment) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Assignment ww3 ww4 ->
                 Messages.$w$cshowsPrec ww1 ww3 ww4 } }) -}
b356b0386e99853e494630ae909b7ce2
  $fShowConstant :: GHC.Show.Show Messages.Constant
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Constant
                  Messages.$fShowConstant_$cshowsPrec
                  Messages.$fShowConstant_$cshow
                  Messages.$fShowConstant_$cshowList -}
b356b0386e99853e494630ae909b7ce2
  $fShowConstant1 :: Messages.Constant -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Messages.Constant) (w1 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec2 0# w w1) -}
3cc475f70c8915c5892ab13575b9bb4c
  $fShowConstant2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolConstant "#) -}
44eca615ff19c63cbece5820cd235798
  $fShowConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringConstant "#) -}
20bf1cdeadee21e3ce57ddd2f8d35483
  $fShowConstant4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntConstant "#) -}
11d114f3abeeadf7c0cec806fc55c73a
  $fShowConstant5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b356b0386e99853e494630ae909b7ce2
  $fShowConstant_$cshow :: Messages.Constant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.Constant) ->
                 case x of wild {
                   Messages.IntConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant4
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Messages.StringConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5))
                   Messages.BoolConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant2
                        (case b1 of wild1 {
                           GHC.Types.False -> GHC.Show.$fShowBool4
                           GHC.Types.True -> GHC.Show.$fShowBool2 }) }) -}
b356b0386e99853e494630ae909b7ce2
  $fShowConstant_$cshowList :: [Messages.Constant] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Constant]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Constant
                   Messages.$fShowConstant1
                   ls
                   s) -}
b356b0386e99853e494630ae909b7ce2
  $fShowConstant_$cshowsPrec ::
    GHC.Types.Int -> Messages.Constant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.Constant)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec2 ww1 w1 w2 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowDBComand :: GHC.Show.Show Messages.DBComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBComand
                  Messages.$fShowDBComand_$cshowsPrec
                  Messages.$fShowDBComand_$cshow
                  Messages.$fShowDBComand_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowDBComand1 :: Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.DBComand) ->
                 Messages.$w$cshowsPrec3 0# w) -}
21d4a52a01002d5284aeb489a0ffdcce
  $fShowDBComand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand3) -}
cfb34115ce9f899a9a3122a1f9b68194
  $fShowDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadDBComand "#) -}
2ea452f405d50e49b1758aae223bd048
  $fShowDBComand4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadComand "#) -}
68d6e459194e95c336e33fdbf304b6ce
  $fShowDBComand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand6) -}
47ea2cca71461865230af5706f27b01f
  $fShowDBComand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishDBComand "#) -}
a782e4c004494b91ef58873beb000ebf
  $fShowDBComand7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand8) -}
8768e73df85672af50a094320bcd8e95
  $fShowDBComand8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishComand "#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowDBComand_$cshow :: Messages.DBComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.DBComand) ->
                 case x of wild {
                   Messages.PublishDBComand b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Messages.$fShowDBComand5
                        (case b1 of ww { Messages.PublishComand ww1 ww2 ww3 ->
                         Messages.$w$cshowsPrec5
                           11#
                           ww1
                           ww2
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Messages.LoadDBComand b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Messages.$fShowDBComand2
                        (case b1 of ww { Messages.LoadComand ww1 ww2 ->
                         Messages.$w$cshowsPrec4
                           11#
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowDBComand_$cshowList :: [Messages.DBComand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.DBComand]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.DBComand
                   Messages.$fShowDBComand1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowDBComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.DBComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec3 ww1 w1 }) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fShowDBMessage :: GHC.Show.Show Messages.DBMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBMessage
                  Messages.$fShowDBMessage_$cshowsPrec
                  Messages.$fShowDBMessage_$cshow
                  Messages.$fShowDBMessage_$cshowList -}
8ee84146ad6f0d7a5196e2a468f042df
  $fShowDBMessage1 :: Messages.DBMessage -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Messages.$fShowDBMessage_$cshowsPrec
                   Messages.$fShowAssignment3) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fShowDBMessage_$cshow :: Messages.DBMessage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.DBMessage) ->
                 Messages.$fShowDBMessage_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fShowDBMessage_$cshowList ::
    [Messages.DBMessage] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.DBMessage]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.DBMessage
                   Messages.$fShowDBMessage1
                   ls
                   s) -}
8ee84146ad6f0d7a5196e2a468f042df
  $fShowDBMessage_$cshowsPrec ::
    GHC.Types.Int -> Messages.DBMessage -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowExpression :: GHC.Show.Show Messages.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Expression
                  Messages.$fShowExpression_$cshowsPrec
                  Messages.$fShowExpression_$cshow
                  Messages.$fShowExpression_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowExpression1 :: Messages.Expression -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Expression) ->
                 Messages.$w$cshowsPrec1 0# w) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowExpression_$cshow :: Messages.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Expression) ->
                 Messages.$fShowExpression_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowExpression_$cshowList ::
    [Messages.Expression] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Expression]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Expression
                   Messages.$fShowExpression1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Expression) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec1 ww1 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowIfThenElse :: GHC.Show.Show Messages.IfThenElse
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.IfThenElse
                  Messages.$fShowIfThenElse_$cshowsPrec
                  Messages.$fShowIfThenElse_$cshow
                  Messages.$fShowIfThenElse_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowIfThenElse1 :: Messages.IfThenElse -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Messages.IfThenElse) ->
                 case w of ww { Messages.IfThenElse ww1 ww2 ww3 ->
                 Messages.$w$cshowsPrec6 0# ww1 ww2 ww3 }) -}
5d1fb82e2dad7cabe1629aac013a4a48
  $fShowIfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IfThenElse "#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowIfThenElse_$cshow :: Messages.IfThenElse -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.IfThenElse) ->
                 Messages.$fShowIfThenElse_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowIfThenElse_$cshowList ::
    [Messages.IfThenElse] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.IfThenElse]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.IfThenElse
                   Messages.$fShowIfThenElse1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowIfThenElse_$cshowsPrec ::
    GHC.Types.Int -> Messages.IfThenElse -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.IfThenElse) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.IfThenElse ww3 ww4 ww5 ->
                 Messages.$w$cshowsPrec6 ww1 ww3 ww4 ww5 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowInvocation :: GHC.Show.Show Messages.Invocation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Invocation
                  Messages.$fShowInvocation_$cshowsPrec
                  Messages.$fShowInvocation_$cshow
                  Messages.$fShowInvocation_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowInvocation1 :: Messages.Invocation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Messages.Invocation) (w1 :: GHC.Base.String) ->
                 case w of ww { Messages.Invocation ww1 ww2 ->
                 Messages.$w$cshowsPrec7 0# ww1 ww2 w1 }) -}
237f2e13378c637156bd68283c21d13f
  $fShowInvocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invocation "#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowInvocation_$cshow :: Messages.Invocation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Invocation) ->
                 Messages.$fShowInvocation_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowInvocation_$cshowList ::
    [Messages.Invocation] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Invocation]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Invocation
                   Messages.$fShowInvocation1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowInvocation_$cshowsPrec ::
    GHC.Types.Int -> Messages.Invocation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.Invocation)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Invocation ww3 ww4 ->
                 Messages.$w$cshowsPrec7 ww1 ww3 ww4 w2 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLambdaDef :: GHC.Show.Show Messages.LambdaDef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LambdaDef
                  Messages.$fShowLambdaDef_$cshowsPrec
                  Messages.$fShowLambdaDef_$cshow
                  Messages.$fShowLambdaDef_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLambdaDef1 :: Messages.LambdaDef -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>,
     Unfolding: (\ (w :: Messages.LambdaDef) ->
                 case w of ww { Messages.LambdaDef ww1 ww2 ->
                 Messages.$w$cshowsPrec8 0# ww1 ww2 }) -}
3a50e19f064a1ac7cfc464b513cb8591
  $fShowLambdaDef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaDef "#) -}
0ee6776e4e490bb6f0f836c1125be88b
  $fShowLambdaDef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program "#) -}
3261c2f4fef601b99508a47e1e197d34
  $fShowLambdaDef4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowLambdaDef5) -}
a6d86650ebacc511061e14b11be4a61b
  $fShowLambdaDef5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnStatement "#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLambdaDef_$cshow :: Messages.LambdaDef -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.LambdaDef) ->
                 Messages.$fShowLambdaDef_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLambdaDef_$cshowList ::
    [Messages.LambdaDef] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.LambdaDef]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.LambdaDef
                   Messages.$fShowLambdaDef1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLambdaDef_$cshowsPrec ::
    GHC.Types.Int -> Messages.LambdaDef -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U,1*U(1*U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.LambdaDef) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                 Messages.$w$cshowsPrec8 ww1 ww3 ww4 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoadComand :: GHC.Show.Show Messages.LoadComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LoadComand
                  Messages.$fShowLoadComand_$cshowsPrec
                  Messages.$fShowLoadComand_$cshow
                  Messages.$fShowLoadComand_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoadComand1 :: Messages.LoadComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: (\ (w :: Messages.LoadComand) ->
                 case w of ww { Messages.LoadComand ww1 ww2 ->
                 Messages.$w$cshowsPrec4 0# ww1 ww2 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoadComand_$cshow :: Messages.LoadComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.LoadComand) ->
                 Messages.$fShowLoadComand_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoadComand_$cshowList ::
    [Messages.LoadComand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.LoadComand]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.LoadComand
                   Messages.$fShowLoadComand1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoadComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.LoadComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.LoadComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.LoadComand ww3 ww4 ->
                 Messages.$w$cshowsPrec4 ww1 ww3 ww4 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoop :: GHC.Show.Show Messages.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Loop
                  Messages.$fShowLoop_$cshowsPrec
                  Messages.$fShowLoop_$cshow
                  Messages.$fShowLoop_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoop1 :: Messages.Loop -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: (\ (w :: Messages.Loop) ->
                 case w of ww { Messages.While ww1 ww2 ->
                 Messages.$w$cshowsPrec12 0# ww1 ww2 }) -}
83bf25c06e1fdf7bd17394bf866dd21e
  $fShowLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("While "#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoop_$cshow :: Messages.Loop -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Loop) ->
                 Messages.$fShowLoop_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoop_$cshowList :: [Messages.Loop] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Loop]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Messages.Loop Messages.$fShowLoop1 ls s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowLoop_$cshowsPrec ::
    GHC.Types.Int -> Messages.Loop -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Loop) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.While ww3 ww4 ->
                 Messages.$w$cshowsPrec12 ww1 ww3 ww4 } }) -}
3ceab001701b2eca0bbde310cda1dad4
  $fShowMessage :: GHC.Show.Show Messages.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Message
                  Messages.$fShowMessage_$cshowsPrec
                  Messages.$fShowMessage_$cshow
                  Messages.$fShowMessage_$cshowList -}
3ceab001701b2eca0bbde310cda1dad4
  $fShowMessage1 :: Messages.Message -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Messages.$fShowMessage_$cshowsPrec
                   Messages.$fShowAssignment3) -}
47a187507628270f53a12c48a81d91da
  $fShowMessage10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileWorkerRequest "#) -}
7980d28b31d3566f16b67035c3027aff
  $fShowMessage11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowMessage12) -}
6c6692326a76c6476664d053a60448df
  $fShowMessage12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileClientRequest "#) -}
d884c2d6e17ad248a26d0d6552039490
  $fShowMessage2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Messages.$fShowMessage3) -}
450cb34e791fc381cd3db3578f3d0c41
  $fShowMessage3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowMessage4) -}
7cb57711ce3025717636bd35bdc99581
  $fShowMessage4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RegisterWorker"#) -}
22e5b09ca652b38d16e8b7b30def6cfc
  $fShowMessage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowMessage6) -}
450eca7928e43679dd0fb98454adff08
  $fShowMessage6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileClientReply "#) -}
26ba43e4c86cc7a5bdc892bf5bf8951d
  $fShowMessage7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilationError "#) -}
ab1fded8331918e7ffe83e1894e04176
  $fShowMessage8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Success "#) -}
699ac1453c20e409f15acfff268d7567
  $fShowMessage9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompileWorkerReply "#) -}
3ceab001701b2eca0bbde310cda1dad4
  $fShowMessage_$cshow :: Messages.Message -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Message) ->
                 Messages.$fShowMessage_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3ceab001701b2eca0bbde310cda1dad4
  $fShowMessage_$cshowList :: [Messages.Message] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Message]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Message
                   Messages.$fShowMessage1
                   ls
                   s) -}
3ceab001701b2eca0bbde310cda1dad4
  $fShowMessage_$cshowsPrec ::
    GHC.Types.Int -> Messages.Message -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Messages.Message) ->
                 case ds of wild {
                   Messages.CompileClientRequest b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { Messages.Program ww1 ww2 ->
                          Messages.$w$cshowsPrec9 11# ww1 ww2 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowMessage11 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowMessage11
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Messages.CompileWorkerRequest b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        w1 :: GHC.Integer.Type.Integer
                        = case b1 of wild2 { GHC.Word.W64# x# ->
                          let {
                            i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                          } in
                          case GHC.Prim.>=# i# 0# of lwild {
                            DEFAULT -> GHC.Integer.Type.wordToInteger x#
                            1# -> GHC.Integer.Type.smallInteger i# } }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww { Messages.Program ww1 ww2 ->
                          Messages.$w$cshowsPrec9 11# ww1 ww2 }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowMessage10
                            (case GHC.Show.$w$cshowsPrec4
                                    11#
                                    w1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g x1)) of ww2 { (#,#) ww3 ww4 ->
                             GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } }
                   Messages.CompileWorkerReply b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        w1 :: GHC.Integer.Type.Integer
                        = case b1 of wild2 { GHC.Word.W64# x# ->
                          let {
                            i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                          } in
                          case GHC.Prim.>=# i# 0# of lwild {
                            DEFAULT -> GHC.Integer.Type.wordToInteger x#
                            1# -> GHC.Integer.Type.smallInteger i# } }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowMessage9
                            (case GHC.Show.$w$cshowsPrec4
                                    11#
                                    w1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (Messages.$w$cshowsPrec13
                                          11#
                                          b2
                                          x1)) of ww2 { (#,#) ww3 ww4 ->
                             GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } }
                   Messages.CompileClientReply b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Messages.$fShowMessage5
                             (Messages.$w$cshowsPrec13 11# b1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowMessage5
                                (Messages.$w$cshowsPrec13
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Messages.RegisterWorker -> Messages.$fShowMessage2 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowOperator :: GHC.Show.Show Messages.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Operator
                  Messages.$fShowOperator_$cshowsPrec
                  Messages.$fShowOperator_$cshow
                  Messages.$fShowOperator_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowOperator1 :: Messages.Operator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Operator) ->
                 Messages.$w$cshowsPrec14 0# w) -}
8cb13a9241881fa2a398114e19fb72ce
  $fShowOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BinaryOperator "#) -}
44760ad06dddfb946ae60d25ff211e71
  $fShowOperator3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator4) -}
6a17af3f3f22e5f6cf699916c077d77e
  $fShowOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolType"#) -}
06af961b6936891d2bf19e839d412dee
  $fShowOperator5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator6) -}
353d0bacea30bc69eb821603a5641060
  $fShowOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringType"#) -}
847097907cb5553a449ba2d7cf0b4bf8
  $fShowOperator7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator8) -}
49f24f0fda81412b764e28edc870c704
  $fShowOperator8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntType"#) -}
1d6fdfe67fbbbd466345860c1f239bfb
  $fShowOperator9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnaryOperator "#) -}
ebfa9a6c786d870f392dd18603156817
  $fShowOperatorType :: GHC.Show.Show Messages.OperatorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fShowOperatorType_$cshowsPrec
                  Messages.$fShowOperatorType_$cshow
                  Messages.$fShowOperatorType_$cshowList -}
ebfa9a6c786d870f392dd18603156817
  $fShowOperatorType_$cshow ::
    Messages.OperatorType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.OperatorType) ->
                 case x of wild {
                   Messages.IntType -> Messages.$fShowOperator7
                   Messages.StringType -> Messages.$fShowOperator5
                   Messages.BoolType -> Messages.$fShowOperator3 }) -}
ebfa9a6c786d870f392dd18603156817
  $fShowOperatorType_$cshowList ::
    [Messages.OperatorType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.OperatorType]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.OperatorType
                   Messages.$w$cshowsPrec15
                   ls
                   s) -}
ebfa9a6c786d870f392dd18603156817
  $fShowOperatorType_$cshowsPrec ::
    GHC.Types.Int -> Messages.OperatorType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.OperatorType)
                   (w2 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec15 w1 w2) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowOperator_$cshow :: Messages.Operator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Operator) ->
                 Messages.$fShowOperator_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowOperator_$cshowList :: [Messages.Operator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Operator]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Operator
                   Messages.$fShowOperator1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowOperator_$cshowsPrec ::
    GHC.Types.Int -> Messages.Operator -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Operator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec14 ww1 w1 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowProgram :: GHC.Show.Show Messages.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Program
                  Messages.$fShowProgram_$cshowsPrec
                  Messages.$fShowProgram_$cshow
                  Messages.$fShowProgram_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowProgram1 :: Messages.Program -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>,
     Unfolding: (\ (w :: Messages.Program) ->
                 case w of ww { Messages.Program ww1 ww2 ->
                 Messages.$w$cshowsPrec9 0# ww1 ww2 }) -}
bcb4ae112e107767277481abb8051472
  $fShowProgramResult :: GHC.Show.Show Messages.ProgramResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ProgramResult
                  Messages.$fShowProgramResult_$cshowsPrec
                  Messages.$fShowProgramResult_$cshow
                  Messages.$fShowProgramResult_$cshowList -}
bcb4ae112e107767277481abb8051472
  $fShowProgramResult1 :: Messages.ProgramResult -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Messages.ProgramResult)
                   (w1 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec13 0# w w1) -}
bcb4ae112e107767277481abb8051472
  $fShowProgramResult_$cshow ::
    Messages.ProgramResult -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.ProgramResult) ->
                 case x of wild {
                   Messages.Success b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowMessage8
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5))
                   Messages.CompilationError b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowMessage7
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5)) }) -}
bcb4ae112e107767277481abb8051472
  $fShowProgramResult_$cshowList ::
    [Messages.ProgramResult] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.ProgramResult]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.ProgramResult
                   Messages.$fShowProgramResult1
                   ls
                   s) -}
bcb4ae112e107767277481abb8051472
  $fShowProgramResult_$cshowsPrec ::
    GHC.Types.Int -> Messages.ProgramResult -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.ProgramResult)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec13 ww1 w1 w2 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowProgram_$cshow :: Messages.Program -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Program) ->
                 Messages.$fShowProgram_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowProgram_$cshowList :: [Messages.Program] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Program]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Program
                   Messages.$fShowProgram1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowProgram_$cshowsPrec ::
    GHC.Types.Int -> Messages.Program -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Program) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Program ww3 ww4 ->
                 Messages.$w$cshowsPrec9 ww1 ww3 ww4 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowPublishComand :: GHC.Show.Show Messages.PublishComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.PublishComand
                  Messages.$fShowPublishComand_$cshowsPrec
                  Messages.$fShowPublishComand_$cshow
                  Messages.$fShowPublishComand_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowPublishComand1 :: Messages.PublishComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: (\ (w :: Messages.PublishComand) ->
                 case w of ww { Messages.PublishComand ww1 ww2 ww3 ->
                 Messages.$w$cshowsPrec5 0# ww1 ww2 ww3 }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowPublishComand_$cshow ::
    Messages.PublishComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.PublishComand) ->
                 Messages.$fShowPublishComand_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowPublishComand_$cshowList ::
    [Messages.PublishComand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.PublishComand]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.PublishComand
                   Messages.$fShowPublishComand1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowPublishComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.PublishComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.PublishComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.PublishComand ww3 ww4 ww5 ->
                 Messages.$w$cshowsPrec5 ww1 ww3 ww4 ww5 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowReturnStatement :: GHC.Show.Show Messages.ReturnStatement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ReturnStatement
                  Messages.$fShowReturnStatement_$cshowsPrec
                  Messages.$fShowReturnStatement_$cshow
                  Messages.$fShowReturnStatement_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowReturnStatement1 ::
    Messages.ReturnStatement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: (\ (w :: Messages.ReturnStatement) ->
                 case w of ww { Messages.ReturnStatement ww1 ->
                 Messages.$w$cshowsPrec11 0# ww1 }) -}
e306362baaac1630380d1d13fb7ef788
  $fShowReturnStatement2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowReturnStatement_$cshow ::
    Messages.ReturnStatement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.ReturnStatement) ->
                 case x of wild { Messages.ReturnStatement b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Messages.$fShowLambdaDef4)
                   (Messages.$fShowExpression_$cshowsPrec
                      Messages.$fShowReturnStatement2
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowReturnStatement_$cshowList ::
    [Messages.ReturnStatement] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.ReturnStatement]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.ReturnStatement
                   Messages.$fShowReturnStatement1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowReturnStatement_$cshowsPrec ::
    GHC.Types.Int -> Messages.ReturnStatement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.ReturnStatement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.ReturnStatement ww3 ->
                 Messages.$w$cshowsPrec11 ww1 ww3 } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowStatement :: GHC.Show.Show Messages.Statement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Statement
                  Messages.$fShowStatement_$cshowsPrec
                  Messages.$fShowStatement_$cshow
                  Messages.$fShowStatement_$cshowList -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowStatement1 :: Messages.Statement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Statement) ->
                 Messages.$w$cshowsPrec10 0# w) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowStatement_$cshow :: Messages.Statement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Statement) ->
                 Messages.$fShowStatement_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowStatement_$cshowList ::
    [Messages.Statement] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Messages.Statement]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Messages.Statement
                   Messages.$fShowStatement1
                   ls
                   s) -}
0c1cf875573e84976eac13bcc0b718c7
  $fShowStatement_$cshowsPrec ::
    GHC.Types.Int -> Messages.Statement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Statement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec10 ww1 w1 }) -}
ddde3ab4d02693e88b43908ea10e9eef
  $tc'Assignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13245384116995898399##
                   7865126082316830415##
                   Messages.$trModule
                   Messages.$tc'Assignment2
                   0#
                   Messages.$tc'Assignment1) -}
fb6263dba155c6dc01ff1ce1f2cd9f02
  $tc'Assignment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2a1a7cc56d5ec1dfbd001196ed2f5014
  $tc'Assignment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Assignment3) -}
cfc355f7b8b4fc7d3e29b0b735c1b777
  $tc'Assignment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assignment"#) -}
c226448ac21c5edad26792ba5373f853
  $tc'AssignmentStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12956832272629971152##
                   16502476691310227445##
                   Messages.$trModule
                   Messages.$tc'AssignmentStatement2
                   0#
                   Messages.$tc'AssignmentStatement1) -}
f325b581858e20f8a9c6ed8e90b7577e
  $tc'AssignmentStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
84185aa13f26549767474f26ff204abe
  $tc'AssignmentStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'AssignmentStatement3) -}
ca79256c17a61ea1f9e198cacfa1939a
  $tc'AssignmentStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AssignmentStatement"#) -}
60cfcfdb9b473f0d6133954b9afa2d09
  $tc'BinaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10979565429128812943##
                   9992072673423843216##
                   Messages.$trModule
                   Messages.$tc'BinaryOperator2
                   0#
                   Messages.$tc'BinaryOperator1) -}
3d8d9e42d0034c180f5716280a0accf8
  $tc'BinaryOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cb866d005236fe63a6defabc9c09c008
  $tc'BinaryOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BinaryOperator3) -}
7e04dbc9a1f9900c9ab59b924aae01ee
  $tc'BinaryOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryOperator"#) -}
627a920622570d9c34189622ab52c790
  $tc'BoolConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4384744236001300963##
                   11326765409419428329##
                   Messages.$trModule
                   Messages.$tc'BoolConstant2
                   0#
                   Messages.$tc'BoolConstant1) -}
fe3fc1442e70fcfdfc55c53c758b20b6
  $tc'BoolConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
743050e1cf6e978185d1f215c4a93a4d
  $tc'BoolConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BoolConstant3) -}
81143ba94ce8aa99618573478835a224
  $tc'BoolConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolConstant"#) -}
b00760de48f363a6c8d96b344bcffaac
  $tc'BoolType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15509437650009192434##
                   351615430027573796##
                   Messages.$trModule
                   Messages.$tc'BoolType2
                   0#
                   Messages.$tc'BoolType1) -}
0f66bac2fb925461ef04d834b9cae31a
  $tc'BoolType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e8ae9de48eeaa1ec261e242337280cbc
  $tc'BoolType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BoolType3) -}
56226e90262646d71841691fb737b06d
  $tc'BoolType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolType"#) -}
8ab97f3a80c6107e06aa2c2e94cf5a19
  $tc'BracesExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10577296654970180180##
                   7249898856143428283##
                   Messages.$trModule
                   Messages.$tc'BracesExpression2
                   0#
                   Messages.$tc'BracesExpression1) -}
ee276f70a676a4398698dbafc30de166
  $tc'BracesExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b14e806f6427907e298c61242a279b93
  $tc'BracesExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BracesExpression3) -}
edb490d6f2c61c14157dcd8828831e82
  $tc'BracesExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BracesExpression"#) -}
14eb44eec402f0f53cfa5d586d884718
  $tc'CompilationError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10527804736050543137##
                   6488889522775524170##
                   Messages.$trModule
                   Messages.$tc'CompilationError2
                   0#
                   Messages.$tc'CompilationError1) -}
c3d9d4d9bc65586c8dba4c8df04c4b7f
  $tc'CompilationError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c1de56a9d443a4e3cfd81814e71b58df
  $tc'CompilationError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompilationError3) -}
5dd4712aebbb643b6084b7b62c3a5f25
  $tc'CompilationError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompilationError"#) -}
57e8aecda9bab4b9b7656e13b678b87b
  $tc'CompileClientReply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5215302729848588904##
                   3855831842297887283##
                   Messages.$trModule
                   Messages.$tc'CompileClientReply2
                   0#
                   Messages.$tc'CompileClientReply1) -}
d310a93a21e4cb34031a6cac7ffea337
  $tc'CompileClientReply1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
70379087de9add577334b6929513d781
  $tc'CompileClientReply2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompileClientReply3) -}
93c6748a7a5a6feff179c236b2307f23
  $tc'CompileClientReply3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileClientReply"#) -}
ed39c980064afda53bf266127fcca4c1
  $tc'CompileClientRequest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13118623632806285647##
                   3745337031248931738##
                   Messages.$trModule
                   Messages.$tc'CompileClientRequest2
                   0#
                   Messages.$tc'CompileClientRequest1) -}
2553a57d8b9fd6953ac33f10f604d66f
  $tc'CompileClientRequest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3e0dcadb9f8a4e13ebffdb888f881a10
  $tc'CompileClientRequest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'CompileClientRequest3) -}
e80f7e37416e67381a623e22fd47f3b7
  $tc'CompileClientRequest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileClientRequest"#) -}
117a5663edec113ff3b302a8af23424e
  $tc'CompileWorkerReply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5402312659335170465##
                   642341639423164273##
                   Messages.$trModule
                   Messages.$tc'CompileWorkerReply2
                   0#
                   Messages.$tc'CompileWorkerReply1) -}
0c571cc5d1efc5321e1aa40aa38ca02d
  $tc'CompileWorkerReply1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
afde66279c0f25a559fb043651458e80
  $tc'CompileWorkerReply2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompileWorkerReply3) -}
940e96358bc1e807d4bbcc61bcae99a6
  $tc'CompileWorkerReply3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileWorkerReply"#) -}
1f72450226cbc460f2a7d068c4f2b123
  $tc'CompileWorkerRequest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16751853485768094227##
                   14973712714610405481##
                   Messages.$trModule
                   Messages.$tc'CompileWorkerRequest2
                   0#
                   Messages.$tc'CompileWorkerRequest1) -}
37fe4b93b4a8563d7d9bfa5c77817c64
  $tc'CompileWorkerRequest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d596c7b707b8f6e7a97faa4aaf34e7b5
  $tc'CompileWorkerRequest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'CompileWorkerRequest3) -}
1ca17110671dc326085e6ac47bb2bb8f
  $tc'CompileWorkerRequest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileWorkerRequest"#) -}
baed293a85f379ec502f076d45a3e4f4
  $tc'ConstantExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   747660540038590706##
                   1467563612044770372##
                   Messages.$trModule
                   Messages.$tc'ConstantExpression2
                   0#
                   Messages.$tc'ConstantExpression1) -}
98752100afbbcc3b603850a162f83bc5
  $tc'ConstantExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7c8729ee5c913692bd1c58f2e0a66ed7
  $tc'ConstantExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'ConstantExpression3) -}
d9b3ebb15a602dbb534bce535e39a758
  $tc'ConstantExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstantExpression"#) -}
8b195c7f72102dd2bbd3c792da5bbbc0
  $tc'DBComandStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9741364121160121320##
                   18420724098943496909##
                   Messages.$trModule
                   Messages.$tc'DBComandStatement2
                   0#
                   Messages.$tc'DBComandStatement1) -}
77111550783794c018c2f47d283ceaf9
  $tc'DBComandStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0de1e28ea94de9c6704fb90a8c4ac611
  $tc'DBComandStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'DBComandStatement3) -}
e4e07cfe3e8661c06717896c1f7149be
  $tc'DBComandStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DBComandStatement"#) -}
3fcd758d097341244dafd2727daf5b19
  $tc'IfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   557181571234350881##
                   10918403308211809778##
                   Messages.$trModule
                   Messages.$tc'IfThenElse2
                   0#
                   Messages.$tc'IfThenElse1) -}
1a009f7f3bf1dfb9bfe022ded26c3b73
  $tc'IfThenElse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f04df4e33df6331c6987d2920d3adf30
  $tc'IfThenElse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IfThenElse3) -}
c6a2f8715208453b39652e7be17feb1a
  $tc'IfThenElse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElse"#) -}
a2681e8c9f5515dee340d63eac8f9df3
  $tc'IfThenElseExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17300808299148111897##
                   1000495294372610426##
                   Messages.$trModule
                   Messages.$tc'IfThenElseExpression2
                   0#
                   Messages.$tc'IfThenElseExpression1) -}
88e9f7bc1482cb27d0403fc4894a498c
  $tc'IfThenElseExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
953049d0c2c7a1e3dc5303b440515424
  $tc'IfThenElseExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'IfThenElseExpression3) -}
d2c3d5fc2b48d765ff6aeebb0836f625
  $tc'IfThenElseExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElseExpression"#) -}
58049e38a16ce5d2f0305816d7b67fbe
  $tc'IntConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18335888203943937770##
                   2975671497777658252##
                   Messages.$trModule
                   Messages.$tc'IntConstant2
                   0#
                   Messages.$tc'IntConstant1) -}
25e93971d7974ea47d9ca659716def3c
  $tc'IntConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
020f90807b8a3ce9947996ec105afbb5
  $tc'IntConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IntConstant3) -}
1808dcb4c18fb10d8a1a1554e351ffb0
  $tc'IntConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntConstant"#) -}
19239c87d0b43cb8bf594080de4b045a
  $tc'IntType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   612866561689280409##
                   6025087538470257005##
                   Messages.$trModule
                   Messages.$tc'IntType1
                   0#
                   Messages.$tc'BoolType1) -}
4696d5595f9e4ddbea8e4174fe0797d5
  $tc'IntType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IntType2) -}
a9cf510cd4af1cdc943ae9d28a4d2bd6
  $tc'IntType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntType"#) -}
ef0b7a1343ba21b010571ecd0d425c76
  $tc'Invocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4750086780162756869##
                   1092197134511901334##
                   Messages.$trModule
                   Messages.$tc'Invocation2
                   0#
                   Messages.$tc'Invocation1) -}
e48c88d695c02ba0dfcc7d6052b98cba
  $tc'Invocation1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3a8c4569af6c0684c6d6c81c671d498b
  $tc'Invocation2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Invocation3) -}
8c6517d88da3d422bbae4fb7e1d9128e
  $tc'Invocation3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Invocation"#) -}
3d5335d90073c0048ca5f8f5cd772d76
  $tc'InvocationExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4480238143005620329##
                   16289573237571079857##
                   Messages.$trModule
                   Messages.$tc'InvocationExpression2
                   0#
                   Messages.$tc'InvocationExpression1) -}
f760aa9baf55797582a78ec4ec280607
  $tc'InvocationExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
af255ffb75b13723a9a54f71f253a3f3
  $tc'InvocationExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'InvocationExpression3) -}
bcfdc8ace83e606141bd95618ed0250f
  $tc'InvocationExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvocationExpression"#) -}
2cb163f40e7fdaccb69165531e09979b
  $tc'InvocationStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8065056533134303182##
                   9910470579439425361##
                   Messages.$trModule
                   Messages.$tc'InvocationStatement2
                   0#
                   Messages.$tc'InvocationStatement1) -}
9bf1e739eff580d9abe9978dd61c7ec6
  $tc'InvocationStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f33cda4b0c4bd0c80d1c976b9eaf3252
  $tc'InvocationStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'InvocationStatement3) -}
65ed23e54c0420e1d94a63e945ffe324
  $tc'InvocationStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvocationStatement"#) -}
502fa431dc25109b1af6374cabd06d5c
  $tc'LambdaDef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4842821693072427885##
                   17349615877368652402##
                   Messages.$trModule
                   Messages.$tc'LambdaDef2
                   0#
                   Messages.$tc'LambdaDef1) -}
6aec7c6f98021efe656f7a12d5a59454
  $tc'LambdaDef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
346f568a5385a988747061ee3cc6410a
  $tc'LambdaDef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LambdaDef3) -}
55fdeb22cde936d51415b3f950b2f896
  $tc'LambdaDef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaDef"#) -}
7ee239a877087e94b1c8b8c363ddc532
  $tc'LambdaDefExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4973663165433209205##
                   13887453984576008141##
                   Messages.$trModule
                   Messages.$tc'LambdaDefExpression2
                   0#
                   Messages.$tc'LambdaDefExpression1) -}
5ece83fe9b94b468c35e2f50fba0cdd9
  $tc'LambdaDefExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3e6eb6fe21147406f0d790b70343afb7
  $tc'LambdaDefExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LambdaDefExpression3) -}
020f73870dd0d9eccdea373723a4c400
  $tc'LambdaDefExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaDefExpression"#) -}
d154f19991d764a58542fdd7ba152d11
  $tc'LoadComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11064294071956039060##
                   736916343452318326##
                   Messages.$trModule
                   Messages.$tc'LoadComand2
                   0#
                   Messages.$tc'LoadComand1) -}
de452434ee6c5b4e27e8bb9d608ebb8d
  $tc'LoadComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dc91b225f8daffaa671f3bcc4156b091
  $tc'LoadComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadComand3) -}
336e3d8e62c9747ccf637c671a9109e0
  $tc'LoadComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadComand"#) -}
98ef1ece4e1738bb9846e3fa00ee9be7
  $tc'LoadDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3187141776301841121##
                   17922593835720739436##
                   Messages.$trModule
                   Messages.$tc'LoadDBComand2
                   0#
                   Messages.$tc'LoadDBComand1) -}
bec1ba25508c61876abe64873b27f614
  $tc'LoadDBComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e193d0d0b45c07887ae043b148b6f15d
  $tc'LoadDBComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadDBComand3) -}
eedede6c79cc1f85550ff4d74f4d7cb2
  $tc'LoadDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadDBComand"#) -}
6704f7b44b3613326f91281d3bbcacb0
  $tc'LoadError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1271545207025613074##
                   9918926989464692689##
                   Messages.$trModule
                   Messages.$tc'LoadError2
                   0#
                   Messages.$tc'LoadError1) -}
e26d2e1c5c69a2113a13697a5d41d991
  $tc'LoadError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aa1925d53a9cddeb17ee1a111d41b900
  $tc'LoadError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadError3) -}
739f5fc730ad7b4553dae09d42d6faf4
  $tc'LoadError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadError"#) -}
e887b684b908b6065538dccb76b70627
  $tc'LoadErrorForID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2562491481189145623##
                   4533279102491703541##
                   Messages.$trModule
                   Messages.$tc'LoadErrorForID2
                   0#
                   Messages.$tc'LoadErrorForID1) -}
090c031124df460178e704dfed493b50
  $tc'LoadErrorForID1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c1a32a2c433907116be0546dcfc9e712
  $tc'LoadErrorForID2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadErrorForID3) -}
1c3b3091ab1ff59703dceb1b054b519a
  $tc'LoadErrorForID3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadErrorForID"#) -}
b67ee5ac6bc0d768ef94023797c3b353
  $tc'LoadMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8300257539398614527##
                   13969967151263493144##
                   Messages.$trModule
                   Messages.$tc'LoadMessage1
                   0#
                   Messages.$tc'LoadError1) -}
cf04b2a9af00509f6ac9db9c1aa4c903
  $tc'LoadMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadMessage2) -}
3fdfbfd604f4b5691c7bbef968d3e4b0
  $tc'LoadMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadMessage"#) -}
f7414f8c5d5fcfab2945e06d2bf9cdae
  $tc'LoadMessageWithID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5624807609610661642##
                   10265023982801705782##
                   Messages.$trModule
                   Messages.$tc'LoadMessageWithID1
                   0#
                   Messages.$tc'LoadErrorForID1) -}
77b8392a63e1b066d789fe33c3e1158e
  $tc'LoadMessageWithID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadMessageWithID2) -}
58d9d0bcca5603ac037b84ee6c6eff5d
  $tc'LoadMessageWithID2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadMessageWithID"#) -}
e8a6afcb2caf1cde86eee6b5153f6350
  $tc'LoadResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17064057374987084711##
                   12211145066890038218##
                   Messages.$trModule
                   Messages.$tc'LoadResult1
                   0#
                   Messages.$tc'LoadError1) -}
42e5a6486c6a57a16af994caf592cb05
  $tc'LoadResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadResult2) -}
27a2813362c330067c5739c4c48630e9
  $tc'LoadResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadResult"#) -}
5dae84293ca59cbcd890614c60ee7908
  $tc'LoadResultForID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1118182478535174104##
                   3780932736603264645##
                   Messages.$trModule
                   Messages.$tc'LoadResultForID1
                   0#
                   Messages.$tc'LoadErrorForID1) -}
caba35e581343fe81b6ad5444572da9d
  $tc'LoadResultForID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadResultForID2) -}
f25dd581ef76c42bc0fe1d5c35c1c167
  $tc'LoadResultForID2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadResultForID"#) -}
90edc52e1a519b943826f3800ec94e54
  $tc'LoopStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2565446318443678889##
                   12010442862696119445##
                   Messages.$trModule
                   Messages.$tc'LoopStatement2
                   0#
                   Messages.$tc'LoopStatement1) -}
1e70d8537b700da3a733ed0731730fc6
  $tc'LoopStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1cd9a4c6605d0a91670bf7a142490ce0
  $tc'LoopStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoopStatement3) -}
4b3771c26c6ead456d2bc82367bad2e6
  $tc'LoopStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopStatement"#) -}
693746e985d9d1c8645c42e260a697f3
  $tc'OperatorExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12848301684696631478##
                   13730480731672547473##
                   Messages.$trModule
                   Messages.$tc'OperatorExpression2
                   0#
                   Messages.$tc'OperatorExpression1) -}
6114e51dcd97c59165bff5cf398bc99b
  $tc'OperatorExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b394d40fb8cb5650bfb899dc2d9d2e08
  $tc'OperatorExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'OperatorExpression3) -}
d5bd80379e4d3d5d3bbc741d0b0c064c
  $tc'OperatorExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OperatorExpression"#) -}
507c4766b5c235afce0be10b7aee1db0
  $tc'Program :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7711942720798907593##
                   304059982488021480##
                   Messages.$trModule
                   Messages.$tc'Program2
                   0#
                   Messages.$tc'Program1) -}
dc4c0b8f78002dbd02bf711918b1d21e
  $tc'Program1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
26e38c15c82442d775eb954a9e0abd47
  $tc'Program2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Program3) -}
d12c14483c664f43e03d5b4f77fdd0ac
  $tc'Program3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Program"#) -}
ec517ab2bda0077adea00ba53496b473
  $tc'PublishComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11959021085818420306##
                   14573935098974548988##
                   Messages.$trModule
                   Messages.$tc'PublishComand2
                   0#
                   Messages.$tc'PublishComand1) -}
00b514197c6f51d01a4119a817208f39
  $tc'PublishComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
685f520769fcd502624bb84f14882543
  $tc'PublishComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishComand3) -}
803a6e3921a6df40905a8873eb9b35fe
  $tc'PublishComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishComand"#) -}
81e38ca8d1b4415689a30ae0f28d30dd
  $tc'PublishDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5147427381323251379##
                   6683385174019932357##
                   Messages.$trModule
                   Messages.$tc'PublishDBComand2
                   0#
                   Messages.$tc'PublishDBComand1) -}
0ca2e89ad04ce5f0d082276d44dc0a56
  $tc'PublishDBComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb9a22235c5d57cff6ddcdc46af39853
  $tc'PublishDBComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishDBComand3) -}
e25f0cc704430127081e442c1854a609
  $tc'PublishDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishDBComand"#) -}
6954bd6fc5b4140fa113329d4bb37119
  $tc'PublishMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5452293060379353959##
                   578154254379965773##
                   Messages.$trModule
                   Messages.$tc'PublishMessage2
                   0#
                   Messages.$tc'PublishMessage1) -}
aebf8df5d74edd74ed7aabbdb47c3ea6
  $tc'PublishMessage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
254d69dc97520e29e748b1ceef982223
  $tc'PublishMessage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishMessage3) -}
073829971dd6d08a04484796f3074a35
  $tc'PublishMessage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishMessage"#) -}
82a3d78515c08b6146dd60f488682442
  $tc'RegisterDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4200154124188257767##
                   3823014224114866057##
                   Messages.$trModule
                   Messages.$tc'RegisterDBWorker2
                   0#
                   Messages.$tc'RegisterDBWorker1) -}
d3eacf5a88b3b4df3c951f7596a0fda5
  $tc'RegisterDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
4731dbc1c92b7193ee80aaa70578793c
  $tc'RegisterDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'RegisterDBWorker3) -}
7abb989b956dbf64a499ed7794039eb2
  $tc'RegisterDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RegisterDBWorker"#) -}
acea1972c081296b6385d1a919aa140d
  $tc'RegisterWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4179295426253520296##
                   7337852233303855948##
                   Messages.$trModule
                   Messages.$tc'RegisterWorker2
                   0#
                   Messages.$tc'RegisterWorker1) -}
f0a11ddc2804aabd394cdfa8c31df26c
  $tc'RegisterWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
40253e26ea892be39bccaf8b27dd56d9
  $tc'RegisterWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'RegisterWorker3) -}
f1abc3674bab205f4222565406ac56a2
  $tc'RegisterWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RegisterWorker"#) -}
fc738ab97e822e31b257a60b0a0b8b3d
  $tc'ReturnStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17284564763723397274##
                   10866280638081037316##
                   Messages.$trModule
                   Messages.$tc'ReturnStatement2
                   0#
                   Messages.$tc'ReturnStatement1) -}
abeedda1aa5c9c7a60323a5624f8e606
  $tc'ReturnStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
10bcdfb30aa822f0ef535b3d1d07b6f6
  $tc'ReturnStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'ReturnStatement3) -}
7263fddd1d344ec1c34e293548c5e2c9
  $tc'ReturnStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReturnStatement"#) -}
5af9a5fbe2de369bc4a672440684cf6f
  $tc'StringConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2375453477705412199##
                   2572411373832663171##
                   Messages.$trModule
                   Messages.$tc'StringConstant2
                   0#
                   Messages.$tc'StringConstant1) -}
5324630a30f331444f9873350f2b6fc1
  $tc'StringConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
df4b23e4c4ae94cfd8aa2948144c1285
  $tc'StringConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'StringConstant3) -}
8785b9cafb05160c44e7865e6f7072ad
  $tc'StringConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringConstant"#) -}
2eecbdb3f999bab5867140707f19efe4
  $tc'StringType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7673830480742963992##
                   2117622884057573458##
                   Messages.$trModule
                   Messages.$tc'StringType1
                   0#
                   Messages.$tc'BoolType1) -}
254e2fb6a8645fe25d2315f9c10f4a12
  $tc'StringType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'StringType2) -}
364a8e4f325ba197fd8b2eb95be9590c
  $tc'StringType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringType"#) -}
91b22145e350ce123d96c3b01cdadd9c
  $tc'Success :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13379229042892221802##
                   2849952227528060430##
                   Messages.$trModule
                   Messages.$tc'Success1
                   0#
                   Messages.$tc'CompilationError1) -}
cb6160614def0e93829c75febda7eb16
  $tc'Success1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Success2) -}
d527563563c8d1e558b9e29b4a782571
  $tc'Success2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Success"#) -}
23e9a19d1732a533f9c1e7ca450057b1
  $tc'UnaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16309949020674647362##
                   18144196106915260645##
                   Messages.$trModule
                   Messages.$tc'UnaryOperator2
                   0#
                   Messages.$tc'UnaryOperator1) -}
15c6d1208375a577a321ea846077aec1
  $tc'UnaryOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb8475d12b3b7585aaec8db4d1b9e0a9
  $tc'UnaryOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'UnaryOperator3) -}
f340e81ef8740d183aabd9583d2ee674
  $tc'UnaryOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryOperator"#) -}
5b853a0f39cb39510bc7f8ba101ea660
  $tc'VariableExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17499037494659415381##
                   8271538624388709575##
                   Messages.$trModule
                   Messages.$tc'VariableExpression2
                   0#
                   Messages.$tc'VariableExpression1) -}
a71c1091205de424e1752b1371cd6e8f
  $tc'VariableExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f30ccfc9a52f05234fd8e1bc699c3414
  $tc'VariableExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'VariableExpression3) -}
73b63fa82121e2dc9e233c9028437918
  $tc'VariableExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VariableExpression"#) -}
bd9fdbeffe4e2e87ae54dc96d64dcef0
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6255324988135015585##
                   16639011821784968217##
                   Messages.$trModule
                   Messages.$tc'While2
                   0#
                   Messages.$tc'While1) -}
b913c2aaa1e3402fb215d44714013f49
  $tc'While1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7d99a5f79edbd4db52977a2b64f887a9
  $tc'While2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'While3) -}
b4b192dd8b5757a04cbead16215e649a
  $tc'While3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'While"#) -}
102bc631c85c0a242a3a1ed929430096
  $tcAssignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15594586746729135674##
                   12511841975235432415##
                   Messages.$trModule
                   Messages.$tcAssignment1
                   0#
                   GHC.Types.krep$*) -}
7995ef9181beeaf656d01acd8986d59a
  $tcAssignment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcAssignment2) -}
bfeb8f504eb94f13d75a3c77830ac697
  $tcAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assignment"#) -}
e3c489437b58ba74dedf3f959fa4954d
  $tcConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13987499234826522464##
                   16899992783696861863##
                   Messages.$trModule
                   Messages.$tcConstant1
                   0#
                   GHC.Types.krep$*) -}
a1dbe1d3054ee9d0374c744b477b01ad
  $tcConstant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcConstant2) -}
664d285971e40f2962c505093c1da147
  $tcConstant2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Constant"#) -}
6abb7082653722cd5ccd77b7f79e7b5c
  $tcDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8180585026729165230##
                   3266943307774943342##
                   Messages.$trModule
                   Messages.$tcDBComand1
                   0#
                   GHC.Types.krep$*) -}
68f24421bea091d7e66f8a906ad57956
  $tcDBComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcDBComand2) -}
c87d7d9f134979b6cd3b6bb122aa3f48
  $tcDBComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBComand"#) -}
aca109f42bfeeae1e364e2b82d7f88dc
  $tcDBMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6739617675495703174##
                   3176247406258589958##
                   Messages.$trModule
                   Messages.$tcDBMessage1
                   0#
                   GHC.Types.krep$*) -}
b62b01f814aabffa5707f800476ae079
  $tcDBMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcDBMessage2) -}
2152fd272c79ef7d0061642bb7d02e2c
  $tcDBMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBMessage"#) -}
a1226e27fd4d5325dd4ce5a419480da6
  $tcExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7552576218505903083##
                   10056567890256971108##
                   Messages.$trModule
                   Messages.$tcExpression1
                   0#
                   GHC.Types.krep$*) -}
988758292d8e7c4577a83269e7fa8b4b
  $tcExpression1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcExpression2) -}
eed37ccde2a4608ee547c8f28026fa6b
  $tcExpression2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expression"#) -}
28d6aa84024e5deed40bce6a8530ce9c
  $tcIfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4036245707076368063##
                   9413788605489220138##
                   Messages.$trModule
                   Messages.$tcIfThenElse1
                   0#
                   GHC.Types.krep$*) -}
fed0403e3f70c60fb1466aa03b5fecec
  $tcIfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcIfThenElse2) -}
3f9120b52f77e2d93a6db225609fbd59
  $tcIfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IfThenElse"#) -}
b86c8006d894a36d24783395c11b7315
  $tcInvocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3830465299743464139##
                   15508778853336872958##
                   Messages.$trModule
                   Messages.$tcInvocation1
                   0#
                   GHC.Types.krep$*) -}
d85190f2d415a0bd6867702b2df408c6
  $tcInvocation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcInvocation2) -}
808ace00cc34072f9bf2f592a0918a95
  $tcInvocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invocation"#) -}
1ba11025838071515afa67458d94779d
  $tcLambdaDef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10394421133878633303##
                   16532198174802184894##
                   Messages.$trModule
                   Messages.$tcLambdaDef1
                   0#
                   GHC.Types.krep$*) -}
5daa50828e9039abb23bcc3cfb0ee37e
  $tcLambdaDef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLambdaDef2) -}
4e340dd89f32d82b779f20d1322dc9f7
  $tcLambdaDef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaDef"#) -}
406d8445c617421f159607af9aae94d4
  $tcLoadComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16725124405765005680##
                   11302134654236893988##
                   Messages.$trModule
                   Messages.$tcLoadComand1
                   0#
                   GHC.Types.krep$*) -}
8eb3bc3ffdc6124c124a333979e76d94
  $tcLoadComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLoadComand2) -}
daad956c9fbd48ff0c1a6c17643bb766
  $tcLoadComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadComand"#) -}
8fe2fe26dfcb0babd9313ba0a22c08ad
  $tcLoop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13724839485490844322##
                   8388826216699261306##
                   Messages.$trModule
                   Messages.$tcLoop1
                   0#
                   GHC.Types.krep$*) -}
5f9edb90cd67a8060e41ce9db6ab7d41
  $tcLoop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLoop2) -}
54d15aa10218284dc7cca8df04a85dda
  $tcLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Loop"#) -}
180b34ed415238f83146c738250fa54b
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18095720010957550947##
                   18242425942302527132##
                   Messages.$trModule
                   Messages.$tcMessage1
                   0#
                   GHC.Types.krep$*) -}
691b2367c2a48cb06d9abb819b13d707
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcMessage2) -}
b51c53d76f3f38666bd261e8b3bb8251
  $tcMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Message"#) -}
aa0ac0388f094703a2b2858589bcf307
  $tcOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5831328606968255153##
                   13417277599986348124##
                   Messages.$trModule
                   Messages.$tcOperator1
                   0#
                   GHC.Types.krep$*) -}
b97f5751019efc5983207526050795fa
  $tcOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcOperator2) -}
76c0524c1fd9477f0f669368c71a285f
  $tcOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Operator"#) -}
4def31d5943497f65648f608534c0b16
  $tcOperatorType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7038807011345184161##
                   2709100482200941068##
                   Messages.$trModule
                   Messages.$tcOperatorType1
                   0#
                   GHC.Types.krep$*) -}
2c0570a537234a15979059e4130f3229
  $tcOperatorType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcOperatorType2) -}
53be789ec280192292b0483e79e42daa
  $tcOperatorType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OperatorType"#) -}
791626b4706c5733a7d6df11210c98d5
  $tcProgram :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14887656764807381532##
                   15270138664893149238##
                   Messages.$trModule
                   Messages.$tcProgram1
                   0#
                   GHC.Types.krep$*) -}
8f878245bcd3fbae8ee6354301e7ca9d
  $tcProgram1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcProgram2) -}
42061b3e9c961df2485b700b3e3242af
  $tcProgram2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program"#) -}
0898126e9686f4eeb00e71c204cdaaa4
  $tcProgramResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8406080517375697220##
                   5426329375396550902##
                   Messages.$trModule
                   Messages.$tcProgramResult1
                   0#
                   GHC.Types.krep$*) -}
b8626bf83d3bb161e9fd26a7185e2ea3
  $tcProgramResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcProgramResult2) -}
4f38e94cd250542d20159b51bd7442c4
  $tcProgramResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProgramResult"#) -}
79006ad419976e8ec412019159d4ac42
  $tcPublishComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8861814854551781519##
                   13409650045721820376##
                   Messages.$trModule
                   Messages.$tcPublishComand1
                   0#
                   GHC.Types.krep$*) -}
73d328374f542bb610e4e5f382cc5561
  $tcPublishComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcPublishComand2) -}
f2ac81189ee2064ead3fb132789c5504
  $tcPublishComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishComand"#) -}
579419db0fb87a1286d39e2037c40a5a
  $tcReturnStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6258749085905608641##
                   638038342995775802##
                   Messages.$trModule
                   Messages.$tcReturnStatement1
                   0#
                   GHC.Types.krep$*) -}
a322362b6c06b22721757b01132a20c0
  $tcReturnStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcReturnStatement2) -}
fae7c84a0d044b7d8b990ee1acfb4b21
  $tcReturnStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnStatement"#) -}
b99bf36cf783f16725ba65639c38be49
  $tcStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   655226610855215122##
                   934648828399590394##
                   Messages.$trModule
                   Messages.$tcStatement1
                   0#
                   GHC.Types.krep$*) -}
258618009c82b0d2cfa086c3870eb218
  $tcStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcStatement2) -}
82ca6c0c24272a90039ddc9d3bb25a2f
  $tcStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Statement"#) -}
0f1504a78dfc4c71f2af3ec82ab72451
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Messages.$trModule3
                   Messages.$trModule1) -}
af4a86d8dd1f61bef977b468dcf4e889
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$trModule2) -}
22e8bfd647094835fccdd75729a6b36b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Messages"#) -}
cf9db30583f5dcaa355c18c52acc5761
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$trModule4) -}
c35dd0548c5a2c19d024d71ab9406960
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("utils-0.1.0.0-BZjJqld5fnPXsXgmebWNy"#) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Assignment r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Assignment r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       w i'1 (Messages.Assignment a1 a2)) })) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Expression r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget10 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Statement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget11 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.LoadComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.LoadComand r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$s$cget2
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: GHC.Base.String)[OneShot] ->
                       w i'1 (Messages.LoadComand a1 a2)) })) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget12 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Loop r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Loop r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget11
                      @ Messages.Statement
                      Messages.$fBinaryStatement
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [Messages.Statement])[OneShot] ->
                       w i'1 (Messages.While a1 a2)) })) -}
3ceab001701b2eca0bbde310cda1dad4
  $w$cget13 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Message r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget14 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Operator r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
ebfa9a6c786d870f392dd18603156817
  $w$cget15 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.OperatorType r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.OperatorType r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> w (Data.ByteString.Internal.PS
                                   dt2
                                   dt3
                                   (GHC.Prim.+# dt4 1#)
                                   (GHC.Prim.-# dt5 1#))
                                Messages.BoolType
                           0##
                           -> w (Data.ByteString.Internal.PS
                                   dt2
                                   dt3
                                   (GHC.Prim.+# dt4 1#)
                                   (GHC.Prim.-# dt5 1#))
                                Messages.IntType
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt2
                                   dt3
                                   (GHC.Prim.+# dt4 1#)
                                   (GHC.Prim.-# dt5 1#))
                                Messages.StringType } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.BoolType
                        0##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.IntType
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.StringType } } } }) -}
bcb4ae112e107767277481abb8051472
  $w$cget16 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.ProgramResult r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
b356b0386e99853e494630ae909b7ce2
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Constant r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Constant r) ->
                 let {
                   lvl13 :: Data.ByteString.Internal.ByteString
                            -> GHC.Base.String -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Base.String)[OneShot] ->
                     w i' (Messages.StringConstant a1)
                 } in
                 let {
                   lvl14 :: Data.ByteString.Internal.ByteString
                            -> GHC.Types.Int -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Types.Int)[OneShot] ->
                     w i' (Messages.IntConstant a1)
                 } in
                 let {
                   lvl15 :: Data.ByteString.Internal.ByteString
                            -> GHC.Types.Bool -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Types.Bool)[OneShot] ->
                     w i' (Messages.BoolConstant a1)
                 } in
                 let {
                   $wks :: GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Word#
                           -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww4 :: GHC.Prim.Addr#)
                       (ww5 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (ww6 :: GHC.Prim.Int#)[OneShot]
                       (ww7 :: GHC.Prim.Int#)[OneShot]
                       (ww8 :: GHC.Prim.Word#)[OneShot] ->
                     case ww8 of wild {
                       DEFAULT -> Data.Binary.Class.$w$cget @ r ww4 ww5 ww6 ww7 lvl15
                       0## -> Data.Binary.Class.$w$cget3 @ r ww4 ww5 ww6 ww7 lvl14
                       1## -> Data.Binary.Class.$w$s$cget2 @ r ww4 ww5 ww6 ww7 lvl13 }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         $wks dt2 dt3 (GHC.Prim.+# dt4 1#) (GHC.Prim.-# dt5 1#) ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#)
                        ipv1 } } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.DBComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.DBComand r) ->
                 let {
                   lvl13 :: Data.ByteString.Internal.ByteString
                            -> Messages.PublishComand -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Messages.PublishComand)[OneShot] ->
                     w i' (Messages.PublishDBComand a1)
                 } in
                 let {
                   lvl14 :: Data.ByteString.Internal.ByteString
                            -> Messages.Expression -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Messages.Expression)[OneShot] ->
                     case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                     Data.Binary.Class.$w$s$cget2
                       @ r
                       ww5
                       ww6
                       ww7
                       ww8
                       (\ (i'1 :: Data.ByteString.Internal.ByteString)
                          (a2 :: GHC.Base.String)[OneShot] ->
                        w i'1 (Messages.LoadDBComand (Messages.LoadComand a1 a2))) }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> Messages.$w$cget1
                                @ r
                                dt2
                                dt3
                                (GHC.Prim.+# dt4 1#)
                                (GHC.Prim.-# dt5 1#)
                                lvl14
                           0##
                           -> Messages.$w$cget4
                                @ r
                                dt2
                                dt3
                                (GHC.Prim.+# dt4 1#)
                                (GHC.Prim.-# dt5 1#)
                                lvl13 } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> Messages.$w$cget1
                             @ r
                             ww
                             ww1
                             (GHC.Prim.+# ww2 1#)
                             (GHC.Prim.-# ww3 1#)
                             lvl14
                        0##
                        -> Messages.$w$cget4
                             @ r
                             ww
                             ww1
                             (GHC.Prim.+# ww2 1#)
                             (GHC.Prim.-# ww3 1#)
                             lvl13 } } } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.PublishComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.PublishComand r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Data.Binary.Class.$w$cget3
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a3 :: GHC.Types.Int)[OneShot] ->
                          w i'2 (Messages.PublishComand a1 a2 a3)) }) })) -}
8ee84146ad6f0d7a5196e2a468f042df
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.DBMessage r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget6 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.IfThenElse r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.IfThenElse r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Messages.$w$cget1
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a3 :: Messages.Expression)[OneShot] ->
                          w i'2 (Messages.IfThenElse a1 a2 a3)) }) })) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget7 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Invocation r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Invocation r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget11
                      @ Messages.Expression
                      Messages.$fBinaryExpression
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [Messages.Expression])[OneShot] ->
                       w i'1 (Messages.Invocation a1 a2)) })) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget8 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.LambdaDef r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.LambdaDef r) ->
                 Data.Binary.Class.$w$cget11
                   @ [GHC.Types.Char]
                   Data.Binary.Class.$fBinaryVersion_$s$fBinary[]
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [GHC.Base.String])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget9
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Program)[OneShot] ->
                       w i'1 (Messages.LambdaDef a1 a2)) })) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cget9 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Program r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Program r) ->
                 Data.Binary.Class.$w$cget11
                   @ Messages.Statement
                   Messages.$fBinaryStatement
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Messages.Statement])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       w i'1 (Messages.Program a1 (Messages.ReturnStatement a2))) })) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput ::
    GHC.Base.String
    -> Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Messages.Expression) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case Messages.$w$cput1 ww1 of ww2 { (#,#) ww3 ww4 ->
                     (Data.Binary.Put.PairS @ () ww3 ww4)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput1 ::
    Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput10 ::
    [Messages.Statement]
    -> Messages.ReturnStatement
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ (ww :: [Messages.Statement])
                   (ww1 :: Messages.ReturnStatement) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case ww1 of wild { Messages.ReturnStatement e ->
                     case Messages.$w$cput1 e of ww2 { (#,#) ww3 ww4 ->
                     (Data.Binary.Put.PairS @ () ww3 ww4)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Statement
                                ww
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryLambdaDef_go ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x2 :: Data.ByteString.Builder.Internal.BuildStep r
                       = g (case k `cast`
                                 (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                            w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x1 })
                     } in
                     let {
                       lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                         case x of wild1 { GHC.Int.I64# x# ->
                         let {
                           w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                         } in
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                dt2
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                eta of s2 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 1#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                s2 of s1 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 2#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                s1 of s3 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 3#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                s3 of s4 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 4#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                s4 of s5 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 5#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                s5 of s6 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 6#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                s6 of s7 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 7#)
                                0#
                                (GHC.Prim.narrow8Word# w1)
                                s7 of s8 { DEFAULT ->
                         (x2
                            (Data.ByteString.Builder.Internal.BufferRange
                               (GHC.Prim.plusAddr# dt2 8#)
                               dt3))
                           `cast`
                         (GHC.Types.N:IO[0]
                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                           s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt2
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           (x2
                              (Data.ByteString.Builder.Internal.BufferRange
                                 (GHC.Prim.plusAddr# dt2 8#)
                                 dt3))
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                             s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt2
                                lvl13
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput11 ::
    Messages.Statement
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput12 ::
    Messages.Expression
    -> [Messages.Statement]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: [Messages.Statement]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Statement
                                ww1
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryLoop_go ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (let {
                          x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                        } in
                        let {
                          lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.ByteString.Builder.Internal.BuildSignal r #)
                            {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                          = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case x of wild1 { GHC.Int.I64# x# ->
                            let {
                              w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                            } in
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                   eta of s2 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 1#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                   s2 of s1 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 2#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                   s1 of s3 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 3#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                   s3 of s4 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 4#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                   s4 of s5 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 5#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                   s5 of s6 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 6#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                   s6 of s7 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 7#)
                                   0#
                                   (GHC.Prim.narrow8Word# w1)
                                   s7 of s8 { DEFAULT ->
                            (x2
                               (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 8#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s8 } } } } } } } } } }
                        } in
                        (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                         case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 8# of lwild {
                           DEFAULT
                           -> case x of wild1 { GHC.Int.I64# x# ->
                              let {
                                w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                     eta1 of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s7 of s8 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 8#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } }
                           1#
                           -> (# eta1,
                                 Data.ByteString.Builder.Internal.BufferFull
                                   @ r
                                   8#
                                   dt2
                                   lvl13
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) #) } })
                          `cast`
                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
3ceab001701b2eca0bbde310cda1dad4
  $w$cput13 ::
    Messages.Message
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput14 ::
    Messages.Operator
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
bcb4ae112e107767277481abb8051472
  $w$cput15 ::
    Messages.ProgramResult
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.ProgramResult) ->
                 case w of wild {
                   Messages.Success res
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList res of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.CompilationError descr
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList descr of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
b356b0386e99853e494630ae909b7ce2
  $w$cput2 ::
    Messages.Constant
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.Constant) ->
                 case w of wild {
                   Messages.IntConstant i
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cput9 i of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.StringConstant s
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList s of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.BoolConstant b
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cput b of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     2##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       2##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput3 ::
    Messages.DBComand
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.DBComand) ->
                 case w of wild {
                   Messages.PublishDBComand pc
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case pc of ww { Messages.PublishComand ww1 ww2 ww3 ->
                          case Messages.$w$cput5 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                          (Data.Binary.Put.PairS @ () ww5 ww6)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.LoadDBComand lc
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case lc of ww { Messages.LoadComand ww1 ww2 ->
                          case Messages.$w$cput4 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 1#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt2
                                     lvl13
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput4 ::
    Messages.Expression
    -> GHC.Base.String
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: GHC.Base.String) ->
                 let {
                   k :: Data.Binary.Put.PairS ()
                   = case Data.Binary.Class.$w$cputList ww1 of ww2 { (#,#) ww3 ww4 ->
                     Data.Binary.Put.PairS @ () ww3 ww4 }
                 } in
                 (# case k of wild { Data.Binary.Put.PairS b1 w' -> b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput5 ::
    Messages.Expression
    -> Messages.Expression
    -> GHC.Types.Int
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: Messages.Expression)
                   (ww2 :: GHC.Types.Int) ->
                 let {
                   k :: Data.Binary.Put.PairS ()
                   = case Data.Binary.Class.$w$cput9 ww2 of ww3 { (#,#) ww4 ww5 ->
                     Data.Binary.Put.PairS @ () ww4 ww5 }
                 } in
                 (# case k of wild { Data.Binary.Put.PairS b1 w' -> b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f21 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (f21
                          (case k of wild { Data.Binary.Put.PairS b1 w' ->
                           w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                             x })))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
8ee84146ad6f0d7a5196e2a468f042df
  $w$cput6 ::
    Messages.DBMessage
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput7 ::
    Messages.Expression
    -> Messages.Expression
    -> Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case Messages.$w$cput1 ww2 of ww3 { (#,#) ww4 ww5 ->
                     (Data.Binary.Put.PairS @ () ww4 ww5)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f21 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (f21
                          (case k `cast`
                                (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                           w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                             x })))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput8 ::
    GHC.Base.String
    -> [Messages.Expression]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [Messages.Expression]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Expression
                                ww1
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryInvocation_go ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (let {
                          x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                        } in
                        let {
                          lvl13 :: Data.ByteString.Builder.Internal.BufferRange
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.ByteString.Builder.Internal.BuildSignal r #)
                            {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                          = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case x of wild1 { GHC.Int.I64# x# ->
                            let {
                              w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                            } in
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                   eta of s2 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 1#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                   s2 of s1 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 2#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                   s1 of s3 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 3#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                   s3 of s4 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 4#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                   s4 of s5 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 5#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                   s5 of s6 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 6#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                   s6 of s7 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt2 7#)
                                   0#
                                   (GHC.Prim.narrow8Word# w1)
                                   s7 of s8 { DEFAULT ->
                            (x2
                               (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 8#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s8 } } } } } } } } } }
                        } in
                        (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                         case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 8# of lwild {
                           DEFAULT
                           -> case x of wild1 { GHC.Int.I64# x# ->
                              let {
                                w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt2
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                     eta1 of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt2 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s7 of s8 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt2 8#)
                                    dt3))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } }
                           1#
                           -> (# eta1,
                                 Data.ByteString.Builder.Internal.BufferFull
                                   @ r
                                   8#
                                   dt2
                                   lvl13
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) #) } })
                          `cast`
                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cput9 ::
    [GHC.Base.String]
    -> Messages.Program
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.String])
                   (ww1 :: Messages.Program) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case ww1 of ww2 { Messages.Program ww3 ww4 ->
                     case Messages.$w$cput10 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                     (Data.Binary.Put.PairS @ () ww6 ww7)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.$fBinaryVersion_$s$cputList ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w ->
                         w `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Messages.Expression) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowAssignment2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowAssignment2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec10 ::
    GHC.Prim.Int# -> Messages.Statement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec11 ::
    GHC.Prim.Int# -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: Messages.Expression) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Messages.$fShowLambdaDef4 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Messages.$fShowLambdaDef4
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Messages.Expression -> [Messages.Statement] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: [Messages.Statement]) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLoop2
                       (f20
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of wild {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                                : x1 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (Messages.$w$cshowsPrec10
                                        0#
                                        x1
                                        (let {
                                           lvl43 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                         } in
                                         letrec {
                                           showl :: [Messages.Statement] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [Messages.Statement]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl43
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (Messages.$w$cshowsPrec10 0# y (showl ys)) }
                                         } in
                                         showl xs)) })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
bcb4ae112e107767277481abb8051472
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> Messages.ProgramResult -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Messages.ProgramResult)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.Success b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowMessage8
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowMessage8
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   Messages.CompilationError b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowMessage7
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowMessage7
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1))))) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec14 ::
    GHC.Prim.Int# -> Messages.Operator -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Messages.Operator) ->
                 case w of wild {
                   Messages.UnaryOperator b1 b2 b3
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b3
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowOperator9
                            (let {
                               eta :: GHC.Base.String
                               = GHC.Show.showLitString
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                             } in
                             case b1 of wild1 {
                               Messages.IntType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator7
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.StringType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator5
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.BoolType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)) })
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }
                   Messages.BinaryOperator b1 b2 b3 b4
                   -> let {
                        f20 :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b3
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowOperator2
                            (let {
                               eta :: GHC.Base.String
                               = GHC.Show.showLitString
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (f20
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (g x)))))
                             } in
                             case b1 of wild1 {
                               Messages.IntType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator7
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.StringType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator5
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.BoolType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)) })
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) } }) -}
ebfa9a6c786d870f392dd18603156817
  $w$cshowsPrec15 ::
    Messages.OperatorType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.OperatorType)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.IntType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator7 w1
                   Messages.StringType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator5 w1
                   Messages.BoolType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator3 w1 }) -}
b356b0386e99853e494630ae909b7ce2
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Messages.Constant -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Messages.Constant)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.IntConstant b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant4
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant4
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Messages.StringConstant b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   Messages.BoolConstant b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant2
                             (case b1 of wild1 {
                                GHC.Types.False
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool4 w1
                                GHC.Types.True
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool2 w1 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant2
                                (case b1 of wild1 {
                                   GHC.Types.False
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool4
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                                   GHC.Types.True
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) })) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Messages.DBComand) ->
                 case w of wild {
                   Messages.PublishDBComand b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Messages.PublishComand ww2 ww3 ww4 ->
                          Messages.$w$cshowsPrec5 11# ww2 ww3 ww4 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand5 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowDBComand5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Messages.LoadDBComand b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Messages.LoadComand ww2 ww3 ->
                          Messages.$w$cshowsPrec4 11# ww2 ww3 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand2 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowDBComand2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Messages.Expression -> GHC.Base.String -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: GHC.Base.String) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowDBComand4
                        (f20
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Show.showLitString
                                    ww2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowDBComand4
                           (f20
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Show.showLitString
                                       ww2
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)3
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Messages.Expression
    -> Messages.Expression
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   f21 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     f20
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f21
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                 case GHC.Show.$wshowSignedInt 11# ww5 x of ww6 { (#,#) ww7 ww8 ->
                                 GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand7 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Messages.$fShowDBComand7
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Messages.Expression
    -> Messages.Expression
    -> Messages.Expression
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression)
                   (ww3 :: Messages.Expression) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   f21 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww3
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowIfThenElse2
                        (f20
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (f21 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowIfThenElse2
                           (f20
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (f21
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> [Messages.Expression]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: [Messages.Expression])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowInvocation2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of wild {
                                      [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                                      : x1 xs
                                      -> GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__3
                                           (Messages.$w$cshowsPrec1
                                              0#
                                              x1
                                              (let {
                                                 lvl43 :: [GHC.Types.Char]
                                                 = GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.showList__2
                                                     x
                                               } in
                                               letrec {
                                                 showl :: [Messages.Expression] -> GHC.Base.String
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ (ds2 :: [Messages.Expression]) ->
                                                   case ds2 of wild1 {
                                                     [] -> lvl43
                                                     : y ys
                                                     -> GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.showList__1
                                                          (Messages.$w$cshowsPrec1
                                                             0#
                                                             y
                                                             (showl ys)) }
                                               } in
                                               showl xs)) })))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> [GHC.Base.String] -> Messages.Program -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U,1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [GHC.Base.String])
                   (ww2 :: Messages.Program) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Messages.Program ww4 ww5 ->
                     Messages.$w$cshowsPrec9 11# ww4 ww5 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLambdaDef2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.$fShow(,)3
                                  (GHC.Show.showLitString
                                     x1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (let {
                                           lvl43 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                         } in
                                         letrec {
                                           showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [[GHC.Types.Char]]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl43
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)3
                                                       (GHC.Show.showLitString
                                                          y
                                                          (GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.$fShow(,)3
                                                             (showl ys)))) }
                                         } in
                                         showl xs)))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
0c1cf875573e84976eac13bcc0b718c7
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> [Messages.Statement]
    -> Messages.ReturnStatement
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Messages.Statement])
                   (ww2 :: Messages.ReturnStatement) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Messages.ReturnStatement ww4 ->
                     Messages.$w$cshowsPrec11 11# ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLambdaDef3
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Messages.$w$cshowsPrec10
                                  0#
                                  x1
                                  (let {
                                     lvl43 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Messages.Statement] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Messages.Statement]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl43
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Messages.$w$cshowsPrec10 0# y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
4cc06f1334a48ea890a04de06a229bcd
  $wdt ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             2##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   2##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
ec2b5f8e419f12a454f5cac1261c37ac
  $wdt1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
7b18e98fd2240c717f2b037d6cb1045d
  $wdt2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt2
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  dt3))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
0c1cf875573e84976eac13bcc0b718c7
  data Assignment = Assignment GHC.Base.String Messages.Expression
b356b0386e99853e494630ae909b7ce2
  data Constant
    = IntConstant GHC.Types.Int
    | StringConstant GHC.Base.String
    | BoolConstant GHC.Types.Bool
0c1cf875573e84976eac13bcc0b718c7
  data DBComand
    = PublishDBComand Messages.PublishComand
    | LoadDBComand Messages.LoadComand
8ee84146ad6f0d7a5196e2a468f042df
  data DBMessage
    = PublishMessage GHC.Base.String GHC.Base.String GHC.Types.Int
    | LoadMessage GHC.Base.String
    | LoadMessageWithID Network.Transport.ConnectionId GHC.Base.String
    | LoadResult GHC.Base.String
    | LoadResultForID Network.Transport.ConnectionId GHC.Base.String
    | LoadError GHC.Base.String
    | LoadErrorForID Network.Transport.ConnectionId GHC.Base.String
    | RegisterDBWorker
0c1cf875573e84976eac13bcc0b718c7
  data Expression
    = InvocationExpression Messages.Invocation
    | ConstantExpression Messages.Constant
    | OperatorExpression Messages.Operator
    | IfThenElseExpression Messages.IfThenElse
    | LambdaDefExpression Messages.LambdaDef
    | BracesExpression Messages.Expression
    | VariableExpression GHC.Base.String
0c1cf875573e84976eac13bcc0b718c7
  data IfThenElse
    = IfThenElse Messages.Expression
                 Messages.Expression
                 Messages.Expression
0c1cf875573e84976eac13bcc0b718c7
  data Invocation = Invocation GHC.Base.String [Messages.Expression]
0c1cf875573e84976eac13bcc0b718c7
  data LambdaDef = LambdaDef [GHC.Base.String] Messages.Program
0c1cf875573e84976eac13bcc0b718c7
  data LoadComand = LoadComand Messages.Expression GHC.Base.String
0c1cf875573e84976eac13bcc0b718c7
  data Loop = While Messages.Expression [Messages.Statement]
3ceab001701b2eca0bbde310cda1dad4
  data Message
    = CompileClientRequest Messages.Program
    | CompileWorkerRequest Network.Transport.ConnectionId
                           Messages.Program
    | CompileWorkerReply Network.Transport.ConnectionId
                         Messages.ProgramResult
    | CompileClientReply Messages.ProgramResult
    | RegisterWorker
0c1cf875573e84976eac13bcc0b718c7
  data Operator
    = UnaryOperator Messages.OperatorType
                    GHC.Base.String
                    Messages.Expression
    | BinaryOperator Messages.OperatorType
                     GHC.Base.String
                     Messages.Expression
                     Messages.Expression
ebfa9a6c786d870f392dd18603156817
  data OperatorType = IntType | StringType | BoolType
0c1cf875573e84976eac13bcc0b718c7
  data Program
    = Program [Messages.Statement] Messages.ReturnStatement
bcb4ae112e107767277481abb8051472
  data ProgramResult
    = Success GHC.Base.String | CompilationError GHC.Base.String
0c1cf875573e84976eac13bcc0b718c7
  data PublishComand
    = PublishComand Messages.Expression
                    Messages.Expression
                    GHC.Types.Int
0c1cf875573e84976eac13bcc0b718c7
  data ReturnStatement = ReturnStatement Messages.Expression
0c1cf875573e84976eac13bcc0b718c7
  data Statement
    = AssignmentStatement Messages.Assignment
    | LoopStatement Messages.Loop
    | InvocationStatement Messages.Invocation
    | DBComandStatement Messages.DBComand
instance Data.Binary.Class.Binary [Messages.Assignment]
  = Messages.$fBinaryAssignment
instance Data.Binary.Class.Binary [Messages.Constant]
  = Messages.$fBinaryConstant
instance Data.Binary.Class.Binary [Messages.DBComand]
  = Messages.$fBinaryDBComand
instance Data.Binary.Class.Binary [Messages.DBMessage]
  = Messages.$fBinaryDBMessage
instance Data.Binary.Class.Binary [Messages.Expression]
  = Messages.$fBinaryExpression
instance Data.Binary.Class.Binary [Messages.IfThenElse]
  = Messages.$fBinaryIfThenElse
instance Data.Binary.Class.Binary [Messages.Invocation]
  = Messages.$fBinaryInvocation
instance Data.Binary.Class.Binary [Messages.LambdaDef]
  = Messages.$fBinaryLambdaDef
instance Data.Binary.Class.Binary [Messages.LoadComand]
  = Messages.$fBinaryLoadComand
instance Data.Binary.Class.Binary [Messages.Loop]
  = Messages.$fBinaryLoop
instance Data.Binary.Class.Binary [Messages.Message]
  = Messages.$fBinaryMessage
instance Data.Binary.Class.Binary [Messages.Operator]
  = Messages.$fBinaryOperator
instance Data.Binary.Class.Binary [Messages.OperatorType]
  = Messages.$fBinaryOperatorType
instance Data.Binary.Class.Binary [Messages.Program]
  = Messages.$fBinaryProgram
instance Data.Binary.Class.Binary [Messages.ProgramResult]
  = Messages.$fBinaryProgramResult
instance Data.Binary.Class.Binary [Messages.PublishComand]
  = Messages.$fBinaryPublishComand
instance Data.Binary.Class.Binary [Messages.ReturnStatement]
  = Messages.$fBinaryReturnStatement
instance Data.Binary.Class.Binary [Messages.Statement]
  = Messages.$fBinaryStatement
instance GHC.Classes.Eq [Messages.OperatorType]
  = Messages.$fEqOperatorType
instance GHC.Show.Show [Messages.Assignment]
  = Messages.$fShowAssignment
instance GHC.Show.Show [Messages.Constant]
  = Messages.$fShowConstant
instance GHC.Show.Show [Messages.DBComand]
  = Messages.$fShowDBComand
instance GHC.Show.Show [Messages.DBMessage]
  = Messages.$fShowDBMessage
instance GHC.Show.Show [Messages.Expression]
  = Messages.$fShowExpression
instance GHC.Show.Show [Messages.IfThenElse]
  = Messages.$fShowIfThenElse
instance GHC.Show.Show [Messages.Invocation]
  = Messages.$fShowInvocation
instance GHC.Show.Show [Messages.LambdaDef]
  = Messages.$fShowLambdaDef
instance GHC.Show.Show [Messages.LoadComand]
  = Messages.$fShowLoadComand
instance GHC.Show.Show [Messages.Loop] = Messages.$fShowLoop
instance GHC.Show.Show [Messages.Message] = Messages.$fShowMessage
instance GHC.Show.Show [Messages.Operator]
  = Messages.$fShowOperator
instance GHC.Show.Show [Messages.OperatorType]
  = Messages.$fShowOperatorType
instance GHC.Show.Show [Messages.Program] = Messages.$fShowProgram
instance GHC.Show.Show [Messages.ProgramResult]
  = Messages.$fShowProgramResult
instance GHC.Show.Show [Messages.PublishComand]
  = Messages.$fShowPublishComand
instance GHC.Show.Show [Messages.ReturnStatement]
  = Messages.$fShowReturnStatement
instance GHC.Show.Show [Messages.Statement]
  = Messages.$fShowStatement
"SPEC/Messages defaultPutList @ Assignment" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Assignment)
  Data.Binary.Class.defaultPutList @ Messages.Assignment $dBinary
  = Messages.$fBinaryAssignment_$sdefaultPutList
"SPEC/Messages defaultPutList @ Constant" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.Constant)
  Data.Binary.Class.defaultPutList @ Messages.Constant $dBinary
  = Messages.$fBinaryConstant_$sdefaultPutList
"SPEC/Messages defaultPutList @ DBComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.DBComand)
  Data.Binary.Class.defaultPutList @ Messages.DBComand $dBinary
  = Messages.$fBinaryDBComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ DBMessage" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.DBMessage)
  Data.Binary.Class.defaultPutList @ Messages.DBMessage $dBinary
  = Messages.$fBinaryDBMessage_$sdefaultPutList
"SPEC/Messages defaultPutList @ Expression" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Expression)
  Data.Binary.Class.defaultPutList @ Messages.Expression $dBinary
  = Messages.$fBinaryExpression_$sdefaultPutList
"SPEC/Messages defaultPutList @ IfThenElse" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.IfThenElse)
  Data.Binary.Class.defaultPutList @ Messages.IfThenElse $dBinary
  = Messages.$fBinaryIfThenElse_$sdefaultPutList
"SPEC/Messages defaultPutList @ Invocation" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Invocation)
  Data.Binary.Class.defaultPutList @ Messages.Invocation $dBinary
  = Messages.$fBinaryInvocation_$sdefaultPutList
"SPEC/Messages defaultPutList @ LambdaDef" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.LambdaDef)
  Data.Binary.Class.defaultPutList @ Messages.LambdaDef $dBinary
  = Messages.$fBinaryLambdaDef_$sdefaultPutList
"SPEC/Messages defaultPutList @ LoadComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.LoadComand)
  Data.Binary.Class.defaultPutList @ Messages.LoadComand $dBinary
  = Messages.$fBinaryLoadComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ Loop" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Messages.Loop)
  Data.Binary.Class.defaultPutList @ Messages.Loop $dBinary
  = Messages.$fBinaryLoop_$sdefaultPutList
"SPEC/Messages defaultPutList @ Message" forall ($dBinary :: Data.Binary.Class.Binary
                                                               Messages.Message)
  Data.Binary.Class.defaultPutList @ Messages.Message $dBinary
  = Messages.$fBinaryMessage_$sdefaultPutList
"SPEC/Messages defaultPutList @ Operator" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.Operator)
  Data.Binary.Class.defaultPutList @ Messages.Operator $dBinary
  = Messages.$fBinaryOperator_$sdefaultPutList
"SPEC/Messages defaultPutList @ OperatorType" forall ($dBinary :: Data.Binary.Class.Binary
                                                                    Messages.OperatorType)
  Data.Binary.Class.defaultPutList @ Messages.OperatorType $dBinary
  = Messages.$fBinaryOperatorType_$sdefaultPutList
"SPEC/Messages defaultPutList @ Program" forall ($dBinary :: Data.Binary.Class.Binary
                                                               Messages.Program)
  Data.Binary.Class.defaultPutList @ Messages.Program $dBinary
  = Messages.$fBinaryProgram_$sdefaultPutList
"SPEC/Messages defaultPutList @ ProgramResult" forall ($dBinary :: Data.Binary.Class.Binary
                                                                     Messages.ProgramResult)
  Data.Binary.Class.defaultPutList @ Messages.ProgramResult $dBinary
  = Messages.$fBinaryProgramResult_$sdefaultPutList
"SPEC/Messages defaultPutList @ PublishComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                     Messages.PublishComand)
  Data.Binary.Class.defaultPutList @ Messages.PublishComand $dBinary
  = Messages.$fBinaryPublishComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ ReturnStatement" forall ($dBinary :: Data.Binary.Class.Binary
                                                                       Messages.ReturnStatement)
  Data.Binary.Class.defaultPutList @ Messages.ReturnStatement
                                   $dBinary
  = Messages.$fBinaryReturnStatement_$sdefaultPutList
"SPEC/Messages defaultPutList @ Statement" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.Statement)
  Data.Binary.Class.defaultPutList @ Messages.Statement $dBinary
  = Messages.$fBinaryStatement_$sdefaultPutList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

