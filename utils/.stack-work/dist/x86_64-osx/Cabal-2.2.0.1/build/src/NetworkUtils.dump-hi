
==================== FINAL INTERFACE ====================
2019-09-22 16:53:43.329759 UTC

interface utils-0.1.0.0-BZjJqld5fnPXsXgmebWNy:NetworkUtils 8044
  interface hash: 76cffb6ed677821265d0c669f72aa113
  ABI hash: b57898109c42e05ce4e6280cb5fbe835
  export-list hash: 84e67ae1f378c1cb16aed163063e2ca0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 65b3af0017b0c080b33fe1c2bfb31876
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  NetworkUtils.connMap
  NetworkUtils.connectToServer
  NetworkUtils.isWaiting
  NetworkUtils.runDefaultMaster
  NetworkUtils.workersList
  NetworkUtils.MasterRequestHandler
  NetworkUtils.ServerMaster{NetworkUtils.ServerMaster _connMap _isWaiting _workersList}
module dependencies:
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      array-0.5.2.0 base-4.11.1.0 base-orphans-0.7 bifunctors-5.5.3
                      binary-0.8.5.1 bytestring-0.10.8.2 call-stack-0.1.0 comonad-5.0.4
                      containers-0.5.11.0 contravariant-1.4.1 data-accessor-0.2.2.8
                      deepseq-1.4.3.0 distributive-0.5.3 exceptions-0.10.0 free-5.0.2
                      ghc-boot-th-8.4.4 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 kan-extensions-5.2 lens-4.16.1 mtl-2.2.2
                      network-2.6.3.6 network-transport-0.5.2 network-transport-tcp-0.6.0
                      pretty-1.1.3.6 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.4
                      semigroupoids-5.2.2 stm-2.4.5.1 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.1 th-abstraction-0.2.10.0
                      transformers-0.5.5.0 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unordered-containers-0.2.9.0
                      vector-0.12.0.2
orphans: network-2.6.3.6:Network.Socket
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.4.5.1:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         network-transport-0.5.2:Network.Transport
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.MVar 5887537e57bb20af86721190334ddceb
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 06420d98d10ee04b8dda9c0d88032c55
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  bytestring-0.10.8.2:Data.ByteString 273248cbc494640ee3139e6d00588e9f
import  -/  bytestring-0.10.8.2:Data.ByteString.Char8 801fee6d15f5471654463d991475364a
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal dc7d0c96ef45c703ca21607112260299
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  lens-4.16.1:Control.Lens 532019473786772c921a68b9043e1684
import  -/  lens-4.16.1:Control.Lens.Getter c3a50fe525c9191ea4f0fb36da41d87d
import  -/  lens-4.16.1:Control.Lens.Setter 8b49db9931c6d2c1ff9f3e914948402f
import  -/  lens-4.16.1:Control.Lens.TH 80943a68b2537f54a227cfb1385e8e44
import  -/  lens-4.16.1:Control.Lens.Type 79743c50f73260ff25de1cf66b4745da
import  -/  network-2.6.3.6:Network.Socket ad6c399a864f4064035be687dd16ffec
import  -/  network-2.6.3.6:Network.Socket.Internal af2cb1ca411a338f4846b994baabce94
import  -/  network-transport-0.5.2:Network.Transport 18cb17ad2d91e2c94ab38d1745341964
import  -/  network-transport-tcp-0.6.0:Network.Transport.TCP d6ded0b4157015b7eac3885c8e60206e
import  -/  stm-2.4.5.1:Control.Concurrent.STM.TVar 17f0d58b753eebd51af9c5bea2cff66f
11fdbbcf0444e0dd1d2d91f3a91d0783
  $tc'ServerMaster :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2191008295222692024##
                   732829316112465342##
                   NetworkUtils.$trModule
                   NetworkUtils.$tc'ServerMaster2
                   0#
                   NetworkUtils.$tc'ServerMaster1) -}
e8860bc513335aef35be3eb31451f2c0
  $tc'ServerMaster1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
75a28f7665b35820d63c5c2f3c0673d7
  $tc'ServerMaster2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NetworkUtils.$tc'ServerMaster3) -}
0af2b17b523a3ebaa6a3e5dec0d97928
  $tc'ServerMaster3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ServerMaster"#) -}
12afc230a7d1043b9fc6e67f0d3cdbb6
  $tcServerMaster :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1983406899369574080##
                   7718341612834543871##
                   NetworkUtils.$trModule
                   NetworkUtils.$tcServerMaster1
                   0#
                   GHC.Types.krep$*) -}
9c4199dc171a93e4c7797c354506ec83
  $tcServerMaster1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NetworkUtils.$tcServerMaster2) -}
a04d4157c07c1ce846c452d57dbd2b52
  $tcServerMaster2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ServerMaster"#) -}
26115b98328b123b33a8d5fb768906a0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NetworkUtils.$trModule3
                   NetworkUtils.$trModule1) -}
4664ce018f853c5d1cb8ccffecd0d475
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NetworkUtils.$trModule2) -}
e87ca22abb93b86a12901b286328205a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NetworkUtils"#) -}
681ae4d5dc32c2ed7af80866fe0fa01e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NetworkUtils.$trModule4) -}
fff975019b499d5940a2f4cb6902466e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("utils-0.1.0.0-BZjJqld5fnPXsXgmebWNy"#) -}
318c8b80c5cdb1d10c7a3a042611653c
  $w$sgo1 ::
    Network.Transport.ConnectionId
    -> GHC.Prim.Word#
    -> a1
    -> Data.Map.Internal.Map Network.Transport.ConnectionId a1
    -> Data.Map.Internal.Map Network.Transport.ConnectionId a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
1c61bf7c1fd1317f99f74087db7fc987
  $w$sgo13 ::
    GHC.Prim.Word#
    -> Data.Map.Internal.Map Network.Transport.ConnectionId a1
    -> Data.Map.Internal.Map Network.Transport.ConnectionId a1
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
6a5684a7e4f38e33696373aa9ad9c189
  $wpoly_go13 ::
    GHC.Prim.Word#
    -> Data.Map.Internal.Map Network.Transport.ConnectionId a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
497721312f8953e0c1431f444399adbd
  type MasterRequestHandler =
    NetworkUtils.ServerMaster
    -> Network.Transport.ConnectionId
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.IO ()
f12d5f52564144746b62dc0a47181f8d
  data ServerMaster
    = ServerMaster {_connMap :: Data.Map.Internal.Map
                                  Network.Transport.ConnectionId
                                  (GHC.MVar.MVar Network.Transport.Connection),
                    _workersList :: GHC.MVar.MVar [Network.Transport.Connection],
                    _isWaiting :: Data.Map.Internal.Map
                                    Network.Transport.ConnectionId
                                    (GHC.Conc.Sync.TVar GHC.Types.Bool)}
f12d5f52564144746b62dc0a47181f8d
  _connMap ::
    NetworkUtils.ServerMaster
    -> Data.Map.Internal.Map
         Network.Transport.ConnectionId
         (GHC.MVar.MVar Network.Transport.Connection)
  RecSel Left NetworkUtils.ServerMaster
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: NetworkUtils.ServerMaster) ->
                 case ds of wild { NetworkUtils.ServerMaster ds1 ds2 ds3 ->
                 ds1 }) -}
f12d5f52564144746b62dc0a47181f8d
  _isWaiting ::
    NetworkUtils.ServerMaster
    -> Data.Map.Internal.Map
         Network.Transport.ConnectionId (GHC.Conc.Sync.TVar GHC.Types.Bool)
  RecSel Left NetworkUtils.ServerMaster
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: NetworkUtils.ServerMaster) ->
                 case ds of wild { NetworkUtils.ServerMaster ds1 ds2 ds3 ->
                 ds3 }) -}
f12d5f52564144746b62dc0a47181f8d
  _workersList ::
    NetworkUtils.ServerMaster
    -> GHC.MVar.MVar [Network.Transport.Connection]
  RecSel Left NetworkUtils.ServerMaster
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: NetworkUtils.ServerMaster) ->
                 case ds of wild { NetworkUtils.ServerMaster ds1 ds2 ds3 ->
                 ds2 }) -}
df03a74202478e79bcbaff61dceabe25
  connMap ::
    Control.Lens.Type.Lens'
      NetworkUtils.ServerMaster
      (Data.Map.Internal.Map
         Network.Transport.ConnectionId
         (GHC.MVar.MVar Network.Transport.Connection))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Data.Map.Internal.Map
                            Network.Transport.ConnectionId
                            (GHC.MVar.MVar Network.Transport.Connection)
                          -> f (Data.Map.Internal.Map
                                  Network.Transport.ConnectionId
                                  (GHC.MVar.MVar Network.Transport.Connection)))
                   (ds :: NetworkUtils.ServerMaster) ->
                 case ds of wild { NetworkUtils.ServerMaster x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (Data.Map.Internal.Map
                        Network.Transport.ConnectionId
                        (GHC.MVar.MVar Network.Transport.Connection))
                   @ NetworkUtils.ServerMaster
                   (\ (y1 :: Data.Map.Internal.Map
                               Network.Transport.ConnectionId
                               (GHC.MVar.MVar Network.Transport.Connection)) ->
                    NetworkUtils.ServerMaster y1 x2 x3)
                   (f1 x1) }) -}
d0273c0dd9552defd5c32cceb783100f
  connectToServer ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO
         (Data.Either.Either
            GHC.Base.String
            (Network.Transport.Connection, Network.Transport.EndPoint))
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkUtils.connectToServer1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  GHC.Base.String
                                  (Network.Transport.Connection, Network.Transport.EndPoint)>_R)) -}
bbc389dfad8ca69522824cd8a69fc201
  connectToServer1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Base.String
            (Network.Transport.Connection, Network.Transport.EndPoint) #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (serverAddr :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Network.Transport.TCP.createTransport2
                        NetworkUtils.connectToServer_host
                        port
                        (\ (ds :: Network.Socket.ServiceName)[OneShot] ->
                         (NetworkUtils.connectToServer_host, port))
                        Network.Transport.TCP.defaultTCPParameters
                        eta of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> NetworkUtils.connectToServer6
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either
                              GHC.Base.String
                              (Network.Transport.Connection, Network.Transport.EndPoint)>_R)
                        ipv
                   Data.Either.Right y
                   -> case y of wild1 { (,) x ds1 ->
                      case x of wild2 { Network.Transport.Transport ds2 ds3 ->
                      case ds2
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   (Network.Transport.TransportError
                                      Network.Transport.NewEndPointErrorCode)
                                   Network.Transport.EndPoint>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild3 {
                        Data.Either.Left ipv4
                        -> NetworkUtils.connectToServer3
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   GHC.Base.String
                                   (Network.Transport.Connection, Network.Transport.EndPoint)>_R)
                             ipv2
                        Data.Either.Right endpoint
                        -> case endpoint of wild4 { Network.Transport.EndPoint ds5 ds6 ds7 ds8 ds9 ds10 ->
                           case (ds7
                                   (Data.ByteString.Internal.packChars serverAddr)
                                     `cast`
                                   (Sym (Network.Transport.N:EndPointAddress[0]))
                                   Network.Transport.ReliableOrdered
                                   Network.Transport.defaultConnectHints)
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.Either.Either
                                        (Network.Transport.TransportError
                                           Network.Transport.ConnectErrorCode)
                                        Network.Transport.Connection>_R)
                                  ipv2 of ds11 { (#,#) ipv4 ipv5 ->
                           case ipv5 of wild5 {
                             Data.Either.Left err
                             -> (# ipv4,
                                   Data.Either.Left
                                     @ GHC.Base.String
                                     @ (Network.Transport.Connection, Network.Transport.EndPoint)
                                     (case err of ww2 { Network.Transport.TransportError ww3 ww4 ->
                                      GHC.CString.unpackAppendCString#
                                        Network.Transport.$fExceptionTransportError8
                                        (Network.Transport.$w$cshowsPrec1
                                           ww3
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)3
                                                 (GHC.Show.showLitString
                                                    ww4
                                                    NetworkUtils.connectToServer2)))) }) #)
                             Data.Either.Right conn
                             -> (# ipv4,
                                   Data.Either.Right
                                     @ GHC.Base.String
                                     @ (Network.Transport.Connection, Network.Transport.EndPoint)
                                     (conn, wild4) #) } } } } } } } } }) -}
a03f5d16b6b99966345a2884be2ace63
  connectToServer2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a2d60928613859b6b8680b384d3649b7
  connectToServer3 ::
    GHC.Types.IO
      (Data.Either.Either
         GHC.Base.String
         (Network.Transport.Connection, Network.Transport.EndPoint))
  {- Unfolding: (GHC.Magic.noinline
                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                   @ (Data.Either.Either
                        GHC.Base.String
                        (Network.Transport.Connection, Network.Transport.EndPoint))
                   NetworkUtils.connectToServer4) -}
6568430e7cbedc7c6d34c6bc742b5e1b
  connectToServer4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   NetworkUtils.connectToServer5) -}
9b01fc8964cc5bb76eb5942fd2f3f9c6
  connectToServer5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/NetworkUtils.hs:31:3-16"#) -}
b04a30d475f1913c92138cc461f2763f
  connectToServer6 ::
    GHC.Types.IO
      (Data.Either.Either
         GHC.Base.String
         (Network.Transport.Connection, Network.Transport.EndPoint))
  {- Unfolding: (GHC.Magic.noinline
                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                   @ (Data.Either.Either
                        GHC.Base.String
                        (Network.Transport.Connection, Network.Transport.EndPoint))
                   NetworkUtils.connectToServer7) -}
57deabd4a2423f87aa9e0e54fa27138b
  connectToServer7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   NetworkUtils.connectToServer8) -}
b344267de6db798cdf8c91bfc7888a86
  connectToServer8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/NetworkUtils.hs:30:3-17"#) -}
ec625d48ce66aab4d0787bc12e637241
  connectToServer9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("127.0.0.1"#) -}
cc09ce9f9ef4efed549e353cfc9645af
  connectToServer_host :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   NetworkUtils.connectToServer9) -}
a6f5760c7b7ac6eeb7ed896cb10532bd
  isWaiting ::
    Control.Lens.Type.Lens'
      NetworkUtils.ServerMaster
      (Data.Map.Internal.Map
         Network.Transport.ConnectionId (GHC.Conc.Sync.TVar GHC.Types.Bool))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Data.Map.Internal.Map
                            Network.Transport.ConnectionId (GHC.Conc.Sync.TVar GHC.Types.Bool)
                          -> f (Data.Map.Internal.Map
                                  Network.Transport.ConnectionId
                                  (GHC.Conc.Sync.TVar GHC.Types.Bool)))
                   (ds :: NetworkUtils.ServerMaster) ->
                 case ds of wild { NetworkUtils.ServerMaster x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (Data.Map.Internal.Map
                        Network.Transport.ConnectionId (GHC.Conc.Sync.TVar GHC.Types.Bool))
                   @ NetworkUtils.ServerMaster
                   (\ (y1 :: Data.Map.Internal.Map
                               Network.Transport.ConnectionId
                               (GHC.Conc.Sync.TVar GHC.Types.Bool)) ->
                    NetworkUtils.ServerMaster x1 x2 y1)
                   (f1 x3) }) -}
93cc0724087e08c3b25058acc0cb23f2
  runDefaultMaster ::
    NetworkUtils.MasterRequestHandler -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,C(C1(C1(C1(U))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkUtils.runDefaultMaster1
                  `cast`
                (<NetworkUtils.MasterRequestHandler>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
436fd87be9ef8ce39bd3084ff0fdb7e7
  runDefaultMaster1 ::
    NetworkUtils.MasterRequestHandler
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,C(C1(C1(C1(U))))><S,U> -}
4f4c82651e4d2f640ee2fd8fe5e69181
  workersList ::
    Control.Lens.Type.Lens'
      NetworkUtils.ServerMaster
      (GHC.MVar.MVar [Network.Transport.Connection])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.MVar.MVar [Network.Transport.Connection]
                          -> f (GHC.MVar.MVar [Network.Transport.Connection]))
                   (ds :: NetworkUtils.ServerMaster) ->
                 case ds of wild { NetworkUtils.ServerMaster x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.MVar.MVar [Network.Transport.Connection])
                   @ NetworkUtils.ServerMaster
                   (\ (y1 :: GHC.MVar.MVar [Network.Transport.Connection]) ->
                    NetworkUtils.ServerMaster x1 y1 x3)
                   (f1 x2) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

