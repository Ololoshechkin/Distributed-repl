
==================== FINAL INTERFACE ====================
2019-10-08 19:31:09.718977 UTC

interface dbworker-0.1.0.0-53uXTkTJucEHzp2AG7U2TY:Lib 8044
  interface hash: 5eb304d4a4e4ec8a4f4d220ed7bbf0ca
  ABI hash: b7841170227d3a72667c4eff6b2a0d9b
  export-list hash: c7a10b42be70446fdc08241d7fb043d3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 122ef824bc39ab4a8030deaf6bb22b38
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.makeFSDBWorker
  Lib.makeSQLDBWorker
  Lib.tryConnectToServer
  Lib.workerServer
  Lib.DBWorker{Lib.load Lib.publish}
  Lib.FileSystemDBWorker{Lib.FileSystemDBWorker}
  Lib.LoadHandler
  Lib.PublishHandler
  Lib.SQLiteDBWorker{Lib.SQLiteDBWorker connection}
module dependencies:
package dependencies: Only-0.1 StateVar-1.1.1.1 adjunctions-4.4
                      array-0.5.2.0 attoparsec-0.13.2.2 base-4.11.1.0 base-orphans-0.7
                      bifunctors-5.5.3 binary-0.8.5.1 blaze-builder-0.4.1.0
                      blaze-textual-0.2.1.0 bytestring-0.10.8.2 call-stack-0.1.0
                      comonad-5.0.4 containers-0.5.11.0 contravariant-1.4.1
                      data-accessor-0.2.2.8 deepseq-1.4.3.0 direct-sqlite-2.3.23
                      distributive-0.5.3 exceptions-0.10.0 free-5.0.2 ghc-boot-th-8.4.4
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 kan-extensions-5.2 lens-4.16.1 mtl-2.2.2
                      network-2.6.3.6 network-transport-0.5.2 network-transport-tcp-0.6.0
                      pretty-1.1.3.6 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.4
                      scientific-0.3.6.2 semigroupoids-5.2.2 sqlite-simple-0.4.16.0
                      stm-2.4.5.1 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.1
                      th-abstraction-0.2.10.0 time-1.8.0.2 transformers-0.5.5.0
                      transformers-base-0.4.5.2 transformers-compat-0.6.2
                      unordered-containers-0.2.9.0 utils-0.1.0.0 vector-0.12.0.2
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         network-2.6.3.6:Network.Socket reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.4.5.1:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         adjunctions-4.4:Data.Functor.Rep
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         network-transport-0.5.2:Network.Transport
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  Only-0.1:Data.Tuple.Only 0798d24209ddddd99fbe13fc0a503be2
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO.Handle fb550f271baae6fe7b19205b8166986b
import  -/  base-4.11.1.0:GHC.IO.Handle.FD 6cb851c401fa9a04314651bd6425440d
import  -/  base-4.11.1.0:GHC.IO.Handle.Text e23ef47ca91991c54e165e15e91a1ab0
import  -/  base-4.11.1.0:GHC.IO.IOMode 925d7d58f693b23bffdd8cdbdf9d203b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  network-transport-0.5.2:Network.Transport 18cb17ad2d91e2c94ab38d1745341964
import  -/  sqlite-simple-0.4.16.0:Database.SQLite.Simple 35ab3824cd2889ce8c3c27b43b4b4bbf
import  -/  sqlite-simple-0.4.16.0:Database.SQLite.Simple.FromRow 670a4cba237435364f47d4e7fd3dabb0
import  -/  sqlite-simple-0.4.16.0:Database.SQLite.Simple.Internal 35662a5f1f756cfa89fe1e31d9f8e1e9
import  -/  utils-0.1.0.0:Messages d092de2cd317fb3a419e83b1cbab3b00
import  -/  utils-0.1.0.0:NetworkUtils b57898109c42e05ce4e6280cb5fbe835
2a4ac730021abe0ec08cdb7b366f0e0b
  $fDBWorkerFileSystemDBWorker :: Lib.DBWorker Lib.FileSystemDBWorker
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.FileSystemDBWorker
                  Lib.$fDBWorkerFileSystemDBWorker5
                    `cast`
                  (<Lib.FileSystemDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <GHC.Base.String>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  Lib.$fDBWorkerFileSystemDBWorker1
                    `cast`
                  (<Lib.FileSystemDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <Network.Transport.ConnectionId>_R
                   ->_R Sym (GHC.Types.N:IO[0] <Messages.DBMessage>_R)) -}
a11faa447d365d492ef1f984ced3f287
  $fDBWorkerFileSystemDBWorker1 ::
    Lib.FileSystemDBWorker
    -> GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.DBMessage #)
  {- Arity: 4, Strictness: <L,A><L,U><L,U><S,U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Lib.FileSystemDBWorker)
                   (w1 :: GHC.Base.String)
                   (w2 :: Network.Transport.ConnectionId)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Lib.$w$cload w1 w2 w3) -}
3b6d48600d52b443feb9c396decc89e4
  $fDBWorkerFileSystemDBWorker2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Lib.$fDBWorkerFileSystemDBWorker3) -}
55869ad1a7928c44d975395b159b8506
  $fDBWorkerFileSystemDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\" found"#) -}
8f31bb9e98c35bd70de5026170d48327
  $fDBWorkerFileSystemDBWorker4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("No key \""#) -}
2eba4511e059035de4822d2acb41a706
  $fDBWorkerFileSystemDBWorker5 ::
    Lib.FileSystemDBWorker
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,A><L,U><L,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (ds :: Lib.FileSystemDBWorker)
                   (key :: GHC.Base.String)
                   (value :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        key
                        GHC.IO.IOMode.WriteMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        value
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.hClose1 ipv1 ipv2 } }) -}
2a4ac730021abe0ec08cdb7b366f0e0b
  $fDBWorkerSQLiteDBWorker :: Lib.DBWorker Lib.SQLiteDBWorker
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.SQLiteDBWorker
                  Lib.$fDBWorkerSQLiteDBWorker5
                    `cast`
                  (<Lib.SQLiteDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <GHC.Base.String>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  Lib.$fDBWorkerSQLiteDBWorker1
                    `cast`
                  (<Lib.SQLiteDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <Network.Transport.ConnectionId>_R
                   ->_R Sym (GHC.Types.N:IO[0] <Messages.DBMessage>_R)) -}
0fafffa3652dc19c7ac949d6f8b92268
  $fDBWorkerSQLiteDBWorker1 ::
    Lib.SQLiteDBWorker
    -> GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.DBMessage #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U))><L,U><L,U><S,U>,
     Unfolding: (\ (worker :: Lib.SQLiteDBWorker)
                   (key :: GHC.Base.String)
                   (cid :: Network.Transport.ConnectionId)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   conn :: Database.SQLite.Simple.Internal.Connection
                   = case worker of wild { Lib.SQLiteDBWorker ds -> ds }
                 } in
                 Database.SQLite.Simple.withExclusiveTransaction2
                   @ Messages.DBMessage
                   conn
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case Lib.$fDBWorkerSQLiteDBWorker3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                    case Database.SQLite.Simple.$wwithStatement
                           @ [GHC.Base.String]
                           conn
                           ww1
                           ww2
                           ww3
                           (\ (stmt :: Database.SQLite.Simple.Statement)[OneShot]
                              (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case stmt
                                   `cast`
                                 (Database.SQLite.Simple.N:Statement[0] ; Database.SQLite3.Direct.N:Statement[0]) of ww4 { GHC.Ptr.Ptr ww5 ->
                            case Database.SQLite.Simple.$w$sbind
                                   ww5
                                   (GHC.Types.:
                                      @ Database.SQLite3.SQLData
                                      (case GHC.Magic.runRW#
                                              @ ('GHC.Types.TupleRep
                                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                              @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Text.Internal.Text #)
                                              (\ (s2 :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                               case GHC.Prim.newByteArray#
                                                      @ GHC.Prim.RealWorld
                                                      10#
                                                      s2 of ds1 { (#,#) ipv ipv1 ->
                                               Lib.$wouter
                                                 ipv1
                                                 4#
                                                 key
                                                 0#
                                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                                       case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                       Database.SQLite3.SQLText dt } })
                                      (GHC.Types.[] @ Database.SQLite3.SQLData))
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            letrec {
                              loop :: [GHC.Base.String]
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
                                <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                              = \ (val :: [GHC.Base.String])
                                  (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case Database.SQLite.Simple.$wnextRowWith
                                       @ GHC.Base.String
                                       Lib.$fDBWorkerSQLiteDBWorker2
                                         `cast`
                                       ((<Database.SQLite.Simple.Internal.RowParseRO>_R
                                         ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <(GHC.Types.Int,
                                                         [Database.SQLite3.SQLData])>_N
                                                       <Database.SQLite.Simple.Ok.Ok>_R
                                                       <GHC.Base.String>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                         <*>_N
                                                                                         <Database.SQLite.Simple.Internal.RowParseRO>_R
                                                                                         <Control.Monad.Trans.State.Strict.StateT
                                                                                            (GHC.Types.Int,
                                                                                             [Database.SQLite3.SQLData])
                                                                                            Database.SQLite.Simple.Ok.Ok>_R
                                                                                         <GHC.Base.String>_N) ; Sym (Database.SQLite.Simple.Internal.N:RowParser[0]) <GHC.Base.String>_N))
                                       ww5
                                       s2 of ds2 { (#,#) ipv2 ipv3 ->
                                case ipv3 of wild {
                                  GHC.Base.Nothing
                                  -> (# ipv2, GHC.List.reverse @ GHC.Base.String val #)
                                  GHC.Base.Just row
                                  -> loop (GHC.Types.: @ GHC.Base.String row val) ipv2 } }
                            } in
                            loop (GHC.Types.[] @ GHC.Base.String) ipv } })
                             `cast`
                           (<Database.SQLite.Simple.Statement>_R
                            ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R))
                           s of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         []
                         -> Messages.LoadErrorForID
                              cid
                              (GHC.CString.unpackAppendCString#
                                 Lib.$fDBWorkerFileSystemDBWorker4
                                 (GHC.Base.++_$s++
                                    @ GHC.Types.Char
                                    Lib.$fDBWorkerFileSystemDBWorker2
                                    GHC.Show.$fShow(,)3
                                    (GHC.Show.showLitString key GHC.Show.$fShow[]1)))
                         : ds1 ds2 -> Messages.LoadResultForID cid ds1 } #) } })
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <Messages.DBMessage>_R))
                   Database.SQLite.Simple.Deferred
                   eta) -}
5791a2861a67a588fc47265f53de641a
  $fDBWorkerSQLiteDBWorker2 ::
    Database.SQLite.Simple.Internal.RowParseRO
    -> (GHC.Types.Int, [Database.SQLite3.SQLData])
    -> Database.SQLite.Simple.Ok.Ok
         (GHC.Base.String, (GHC.Types.Int, [Database.SQLite3.SQLData]))
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Database.SQLite.Simple.Internal.RowParseRO)
                   (w2 :: (GHC.Types.Int, [Database.SQLite3.SQLData])) ->
                 case w1
                        `cast`
                      (Database.SQLite.Simple.Internal.N:RowParseRO[0]) of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.I# ww6 ->
                 Database.SQLite.Simple.FromRow.$wfieldWith
                   @ GHC.Base.String
                   Database.SQLite.Simple.FromField.$fFromField[]_$cfromField
                   ww1
                   ww6
                   ww4 } } }) -}
7fe4cdd5fd9ada084190ae7d5f237648
  $fDBWorkerSQLiteDBWorker3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker4) -}
f85d137430da3d870cc3e0561aee5e1d
  $fDBWorkerSQLiteDBWorker4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("SELECT * from kvmaptable where key = ?"#) -}
37e190ef274aff004153ae255e5762d5
  $fDBWorkerSQLiteDBWorker5 ::
    Lib.SQLiteDBWorker
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U))><L,U><L,U><S,U>,
     Unfolding: (\ (worker :: Lib.SQLiteDBWorker)
                   (key :: GHC.Base.String)
                   (value :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   conn :: Database.SQLite.Simple.Internal.Connection
                   = case worker of wild { Lib.SQLiteDBWorker ds -> ds }
                 } in
                 case Database.SQLite.Simple.withExclusiveTransaction2
                        @ ()
                        conn
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case Lib.$fDBWorkerSQLiteDBWorker8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                         case Database.SQLite.Simple.$wwithStatement
                                @ ()
                                conn
                                ww1
                                ww2
                                ww3
                                (\ (stmt :: Database.SQLite.Simple.Statement)[OneShot]
                                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case stmt
                                        `cast`
                                      (Database.SQLite.Simple.N:Statement[0] ; Database.SQLite3.Direct.N:Statement[0]) of ww4 { GHC.Ptr.Ptr ww5 ->
                                 case Database.SQLite.Simple.$w$sbind
                                        ww5
                                        (case Lib.$w$dToRow key value of ww6 { (#,#) ww7 ww8 ->
                                         GHC.Types.: @ Database.SQLite3.SQLData ww7 ww8 })
                                        s1 of ds1 { (#,#) ipv ipv1 ->
                                 case Database.SQLite3.$wstep ww5 ipv of ds { (#,#) ipv2 ipv3 ->
                                 (# ipv2, GHC.Tuple.() #) } } })
                                  `cast`
                                (<Database.SQLite.Simple.Statement>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                s of ds1 { (#,#) ipv ipv1 ->
                         case Lib.$fDBWorkerSQLiteDBWorker6 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                         case Database.SQLite.Simple.$wwithStatement
                                @ ()
                                conn
                                ww5
                                ww6
                                ww7
                                (\ (stmt :: Database.SQLite.Simple.Statement)[OneShot]
                                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case stmt
                                        `cast`
                                      (Database.SQLite.Simple.N:Statement[0] ; Database.SQLite3.Direct.N:Statement[0]) of ww8 { GHC.Ptr.Ptr ww9 ->
                                 case Database.SQLite.Simple.$w$sbind
                                        ww9
                                        (case Lib.$w$dToRow key value of ww10 { (#,#) ww11 ww12 ->
                                         GHC.Types.: @ Database.SQLite3.SQLData ww11 ww12 })
                                        s1 of ds2 { (#,#) ipv2 ipv3 ->
                                 case Database.SQLite3.$wstep ww9 ipv2 of ds { (#,#) ipv4 ipv5 ->
                                 (# ipv4, GHC.Tuple.() #) } } })
                                  `cast`
                                (<Database.SQLite.Simple.Statement>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                ipv of ds2 { (#,#) ipv2 ipv3 ->
                         (# ipv2, GHC.Tuple.() #) } } } })
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        Database.SQLite.Simple.Deferred
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
f79933c3ec1d986258fc736d108b10d1
  $fDBWorkerSQLiteDBWorker6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker7) -}
11a7b814399feb66931b3483f8d74219
  $fDBWorkerSQLiteDBWorker7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("UPDATE kvmaptable SET val = ? WHERE key = ?;"#) -}
d54e51f0bab0a121b4cb4fe034d7c077
  $fDBWorkerSQLiteDBWorker8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker9) -}
2a8266cec57ded4659adf21622e6d3ed
  $fDBWorkerSQLiteDBWorker9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("INSERT INTO kvmaptable (key, value) VALUES (?,?)"#) -}
f2ce00924c5c402a3a2b920ed94f146d
  $tc'C:DBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13357249553343913791##
                   5993179387721705440##
                   Lib.$trModule
                   Lib.$tc'C:DBWorker2
                   1#
                   Lib.$tc'C:DBWorker1) -}
34b2963f540bcd5a007e5c2f2f10ce7e
  $tc'C:DBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8f810c1e29b9acf700f688b5399f71f2
  $tc'C:DBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'C:DBWorker3) -}
23e0b6353a0da7f2db446bac6a89f5ae
  $tc'C:DBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:DBWorker"#) -}
660c165741c97aa8e2dd8ca9bd7c781c
  $tc'FileSystemDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10853784319683691498##
                   14909935085741634816##
                   Lib.$trModule
                   Lib.$tc'FileSystemDBWorker2
                   0#
                   Lib.$tc'FileSystemDBWorker1) -}
8d81c733a422cf915107183b62804420
  $tc'FileSystemDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
7fcb82450c9ec61d5efdf7c54ada1250
  $tc'FileSystemDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'FileSystemDBWorker3) -}
bf36cb789a0443c77e0575df15fff1a8
  $tc'FileSystemDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FileSystemDBWorker"#) -}
79d50f8475ffaa3dc71cef0a12897740
  $tc'SQLiteDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7661137813009701151##
                   8259118135933868998##
                   Lib.$trModule
                   Lib.$tc'SQLiteDBWorker2
                   0#
                   Lib.$tc'SQLiteDBWorker1) -}
076b35dbbe613ad8ef846f172c89a760
  $tc'SQLiteDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
35b4efa7d98dec32e1b8d168ef791dbc
  $tc'SQLiteDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'SQLiteDBWorker3) -}
89936274c790cbff547159a417bbb31c
  $tc'SQLiteDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SQLiteDBWorker"#) -}
1ac80523664a0a3f10bc6087ba3feb49
  $tcDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5532878016847207402##
                   10383118264011083526##
                   Lib.$trModule
                   Lib.$tcDBWorker2
                   0#
                   Lib.$tcDBWorker1) -}
6173174d54f4d214be762011cc9f5d3b
  $tcDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
73a88b526b7ad252ad9f0ec9d2c86015
  $tcDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcDBWorker3) -}
40d4e94e5692839b031f04049633daaa
  $tcDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBWorker"#) -}
61932510c4b6ebf221c4992eb6d1648c
  $tcFileSystemDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8189769250467573988##
                   11883815221851649901##
                   Lib.$trModule
                   Lib.$tcFileSystemDBWorker1
                   0#
                   GHC.Types.krep$*) -}
007291103d830b3898632dbc0647c308
  $tcFileSystemDBWorker1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcFileSystemDBWorker2) -}
1c1bb611efa12d8752b273dfe2be32cf
  $tcFileSystemDBWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FileSystemDBWorker"#) -}
15aa1e1fd2e1de323d0968330cc21f00
  $tcSQLiteDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16954157799517153363##
                   12379728936437961775##
                   Lib.$trModule
                   Lib.$tcSQLiteDBWorker1
                   0#
                   GHC.Types.krep$*) -}
a21d684e05297c87d77a00cffbb3ef38
  $tcSQLiteDBWorker1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcSQLiteDBWorker2) -}
6292958da820661808878e09900325b0
  $tcSQLiteDBWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SQLiteDBWorker"#) -}
6e6385d83172ab439876419de946ea9c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
f16b87ef31f92a251fecd526e4526a40
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
a16b2ee1af24f7e2329810d5ad4ef2b6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
5d19f293d7f2ddb05380febf96a3a0dd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
2466a2699602b60d9f2965a4a39f8fcb
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("dbworker-0.1.0.0-53uXTkTJucEHzp2AG7U2TY"#) -}
41bad813b928a1fd1344f46b9b842ab5
  $w$cload ::
    GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.DBMessage #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Network.Transport.ConnectionId)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        w
                        GHC.IO.IOMode.ReadMode
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Bool
                        GHC.IO.Handle.hIsEOF3
                        ipv1
                        GHC.IO.Handle.hIsEOF2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Types.False
                   -> case GHC.IO.Handle.Internals.wantReadableHandle_1
                             @ GHC.Base.String
                             GHC.IO.Handle.Text.hGetLine4
                             ipv1
                             GHC.IO.Handle.Text.hGetLine2
                               `cast`
                             (<GHC.IO.Handle.Types.Handle__>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      (# ipv6, Messages.LoadResultForID w1 ipv5 #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      (# ipv4,
                         Messages.LoadErrorForID
                           w1
                           (GHC.CString.unpackAppendCString#
                              Lib.$fDBWorkerFileSystemDBWorker4
                              (GHC.Base.++_$s++
                                 @ GHC.Types.Char
                                 Lib.$fDBWorkerFileSystemDBWorker2
                                 GHC.Show.$fShow(,)3
                                 (GHC.Show.showLitString w GHC.Show.$fShow[]1))) #) } } } }) -}
04b8b9825ab2239468ef8afc98549370
  $w$dToRow ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> (# Database.SQLite3.SQLData, [Database.SQLite3.SQLData] #)
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Char]) (ww1 :: [GHC.Types.Char]) ->
                 (# case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            Lib.$wouter ipv1 4# ww 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                    Database.SQLite3.SQLText dt } },
                    GHC.Types.:
                      @ Database.SQLite3.SQLData
                      (case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               Lib.$wouter ipv1 4# ww1 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                       Database.SQLite3.SQLText dt } })
                      (GHC.Types.[] @ Database.SQLite3.SQLData) #)) -}
3103df03e6a119ca259e8fc9c5072939
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
092cb2415d9c8a491949fc2aa6e448ff
  $wworkerServer ::
    Lib.DBWorker a =>
    a
    -> ([Data.ByteString.Internal.ByteString]
        -> GHC.Types.IO
             (Data.Either.Either
                (Network.Transport.TransportError Network.Transport.SendErrorCode)
                ()))
    -> Network.Transport.EndPoint
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><C(C(S(SL))),C(C1(U(U,A)))><L,U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Lib.DBWorker a)
                   (w1 :: a)
                   (ww :: [Data.ByteString.Internal.ByteString]
                          -> GHC.Types.IO
                               (Data.Either.Either
                                  (Network.Transport.TransportError Network.Transport.SendErrorCode)
                                  ()))
                   (w2 :: Network.Transport.EndPoint)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (ww Lib.workerServer3)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either
                              (Network.Transport.TransportError Network.Transport.SendErrorCode)
                              ()>_R)
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   go :: forall a1.
                         Lib.DBWorker a1 =>
                         a1
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 4> {- Arity: 3,
                                 Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><S,U> -}
                   = \ @ a1
                       ($dDBWorker :: Lib.DBWorker a1)
                       (server :: a1)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case w2 of wild { Network.Transport.EndPoint ds2 ds3 ds4 ds5 ds6 ds7 ->
                     case ds2 `cast` (GHC.Types.N:IO[0] <Network.Transport.Event>_R)
                            s of ds8 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild1 {
                       DEFAULT -> go @ a1 $dDBWorker server ipv2
                       Network.Transport.Received dt ds
                       -> case ds of wild2 {
                            [] -> go @ a1 $dDBWorker server ipv2
                            : bytes ds9
                            -> case Data.Binary.Get.runGet3
                                      @ Messages.DBMessage
                                      Lib.workerServer2
                                      (Data.ByteString.Lazy.fromStrict bytes) of wild3 {
                                 DEFAULT -> go @ a1 $dDBWorker server ipv2
                                 Messages.PublishMessage key value ds10
                                 -> case (Lib.publish @ a1 $dDBWorker server key value)
                                           `cast`
                                         (GHC.Types.N:IO[0] <()>_R)
                                           ipv2 of ds11 { (#,#) ipv4 ipv5 ->
                                    go @ a1 $dDBWorker server ipv4 }
                                 Messages.LoadMessageWithID cid key
                                 -> case (Lib.load @ a1 $dDBWorker server key cid)
                                           `cast`
                                         (GHC.Types.N:IO[0] <Messages.DBMessage>_R)
                                           ipv2 of ds10 { (#,#) ipv4 ipv5 ->
                                    case (ww
                                            (GHC.Types.:
                                               @ Data.ByteString.Internal.ByteString
                                               (let {
                                                  cs :: Data.ByteString.Lazy.Internal.ByteString
                                                  = Data.ByteString.Builder.toLazyByteString
                                                      (case Messages.$w$cput6
                                                              ipv5 of ww1 { (#,#) ww2 ww3 ->
                                                       ww3 })
                                                } in
                                                Data.ByteString.Lazy.toStrict_goLen0 cs cs)
                                               (GHC.Types.[]
                                                  @ Data.ByteString.Internal.ByteString)))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 (Network.Transport.TransportError
                                                    Network.Transport.SendErrorCode)
                                                 ()>_R)
                                           ipv4 of ds11 { (#,#) ipv6 ipv7 ->
                                    go @ a1 $dDBWorker server ipv6 } } } } } } }
                 } in
                 go @ a w w1 ipv }) -}
2a4ac730021abe0ec08cdb7b366f0e0b
  class DBWorker a where
    publish :: a -> Lib.PublishHandler
    load :: a -> Lib.LoadHandler
    {-# MINIMAL publish, load #-}
5e3bc23ae2b71c0ccc8f215ffe9d4d60
  data FileSystemDBWorker = FileSystemDBWorker
36ece83f3d93bb3fa110a68bb29c77bc
  type LoadHandler =
    GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Types.IO Messages.DBMessage
c468f8f5205b773957ae1c76388eb941
  type PublishHandler =
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
58b71625e866d0323eb2d87e14aef989
  data SQLiteDBWorker
    = SQLiteDBWorker {connection :: Database.SQLite.Simple.Internal.Connection}
58b71625e866d0323eb2d87e14aef989
  connection ::
    Lib.SQLiteDBWorker -> Database.SQLite.Simple.Internal.Connection
  RecSel Left Lib.SQLiteDBWorker
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SQLiteDBWorker) ->
                 case ds of wild { Lib.SQLiteDBWorker ds1 -> ds1 }) -}
b8505d1ac722e04d18840af8091dc2f9
  makeFSDBWorker :: GHC.Types.IO Lib.FileSystemDBWorker
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.makeFSDBWorker1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lib.FileSystemDBWorker>_R)) -}
3ac9183adab76f76bc2b71632443fb68
  makeFSDBWorker1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.FileSystemDBWorker #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Lib.FileSystemDBWorker #)) -}
42203a4706c215f94cc70210ac04f5a4
  makeSQLDBWorker :: GHC.Types.IO Lib.SQLiteDBWorker
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.makeSQLDBWorker1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lib.SQLiteDBWorker>_R)) -}
8e1dd8af6fccb402953478349cf7f678
  makeSQLDBWorker1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.SQLiteDBWorker #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Database.SQLite.Simple.open1
                        (GHC.CString.unpackCString# Lib.makeSQLDBWorker3)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.Text.Show.unpackCString#
                        Lib.makeSQLDBWorker2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wwithStatement
                        @ ()
                        ipv1
                        ww1
                        ww2
                        ww3
                        Database.SQLite.Simple.execute_2
                          `cast`
                        (<Database.SQLite.Simple.Statement>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, Lib.SQLiteDBWorker ipv1 #) } } }) -}
983ba84ea3931facdb1cab0a3721c72b
  makeSQLDBWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("CREATE TABLE IF NOT EXISTS kvmaptable (key TEXT PRIMARY KEY, value TEXT)"#) -}
6f2c4af907170a17fd5d33f47fd706d6
  makeSQLDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kvmaptable.db"#) -}
14228cf47b9a792dd60461f87c2d6154
  tryConnectToServer ::
    GHC.Base.String
    -> GHC.Base.String
    -> (Network.Transport.Connection
        -> Network.Transport.EndPoint -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.tryConnectToServer1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Transport.Connection
                       -> Network.Transport.EndPoint -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d535570511d1bada775da002e57e0128
  tryConnectToServer1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> (Network.Transport.Connection
        -> Network.Transport.EndPoint -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: (\ (serverAddr :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (action :: Network.Transport.Connection
                              -> Network.Transport.EndPoint -> GHC.Types.IO ())
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case NetworkUtils.connectToServer1
                        serverAddr
                        port
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left errMsg
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        errMsg
                        GHC.Types.True
                        ipv
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) masterConn masterEndpoint ->
                      (action masterConn masterEndpoint)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv } } }) -}
d474b6a55af306b1fa02a0d99e1927b9
  workerServer ::
    Lib.DBWorker a =>
    a
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><S(C(C(S(SL)))L),1*U(C(C1(U(U,A))),A)><L,U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.workerServer1
                  `cast`
                (forall (a :: <*>_N).
                 <Lib.DBWorker a>_R
                 ->_R <a>_R
                 ->_R <Network.Transport.Connection>_R
                 ->_R <Network.Transport.EndPoint>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2c93c1fad304c55c7a2271a1350d162f
  workerServer1 ::
    Lib.DBWorker a =>
    a
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><S(C(C(S(SL)))L),1*U(C(C1(U(U,A))),A)><L,U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: Lib.DBWorker a)
                   (w1 :: a)
                   (w2 :: Network.Transport.Connection)
                   (w3 :: Network.Transport.EndPoint)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2 of ww { Network.Transport.Connection ww1 ww2 ->
                 Lib.$wworkerServer @ a w w1 ww1 w3 w4 }) -}
5a842da262a6a0f43c23c3d4a2c0c57d
  workerServer2 :: Data.Binary.Get.Decoder Messages.DBMessage
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ Messages.DBMessage
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ Messages.DBMessage
                      (Messages.$w$cget5
                         @ Messages.DBMessage
                         __NULL
                         Data.ByteString.Internal.$fMonoidByteString1
                         0#
                         0#
                         (Data.Binary.Get.Internal.$WDone @ Messages.DBMessage)))
                   0#) -}
5062cf2bff650b678c4bab532a1dc8da
  workerServer3 :: [Data.ByteString.Internal.ByteString]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.ByteString.Internal.ByteString
                   Lib.workerServer4
                   (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
2764de4b86a02e7fd272f863b8c3817c
  workerServer4 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict_goLen0
                   Lib.workerServer_cs
                   Lib.workerServer_cs) -}
7b70b8462eb2cbcd23bfc79d2e4296af
  workerServer5 :: Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case Messages.$w$cput6
                        Messages.RegisterDBWorker of ww { (#,#) ww1 ww2 ->
                 ww2 }) -}
53f38ca9b433dc47d23e35f5facf0535
  workerServer_cs :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Lib.workerServer5) -}
instance Lib.DBWorker [Lib.FileSystemDBWorker]
  = Lib.$fDBWorkerFileSystemDBWorker
instance Lib.DBWorker [Lib.SQLiteDBWorker]
  = Lib.$fDBWorkerSQLiteDBWorker
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

