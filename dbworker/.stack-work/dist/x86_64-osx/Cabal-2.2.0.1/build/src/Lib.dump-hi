
==================== FINAL INTERFACE ====================
2019-10-09 09:26:25.441853 UTC

interface dbworker-0.1.0.0-3U5RJnmCUpqBsLcBe2UnI0:Lib 8044
  interface hash: 5fec2605a16dc7dcd736fe7654d49531
  ABI hash: c68621edecda52c7f8fff27ce64625bd
  export-list hash: e36e89d419a370c571e77af3e146bac2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: edc240cff07672acfac2366b91c900a4
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.makeFSDBWorker
  Lib.makeSQLDBWorker
  Lib.tryConnectToServer
  Lib.workerServer
  Lib.DBWorker{Lib.load Lib.publish}
  Lib.FileSystemDBWorker{Lib.FileSystemDBWorker}
  Lib.LoadHandler
  Lib.PublishHandler
  Lib.SQLiteDBWorker{Lib.SQLiteDBWorker connection}
module dependencies:
package dependencies: Only-0.1 StateVar-1.1.1.1 abstract-par-0.3.3
                      adjunctions-4.4 array-0.5.2.0 attoparsec-0.13.2.2 base-4.11.1.0
                      base-orphans-0.7 bifunctors-5.5.3 binary-0.8.5.1
                      blaze-builder-0.4.1.0 blaze-textual-0.2.1.0 bytestring-0.10.8.2
                      call-stack-0.1.0 comonad-5.0.4 containers-0.5.11.0
                      contravariant-1.4.1 data-accessor-0.2.2.8 deepseq-1.4.3.0
                      direct-sqlite-2.3.23 directory-1.3.1.5 distributive-0.5.3
                      easy-file-0.2.2 exceptions-0.10.0 filepath-1.4.2 free-5.0.2
                      ghc-boot-th-8.4.4 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 kan-extensions-5.2
                      lens-4.16.1 monad-par-0.3.4.8 monad-par-extras-0.3.3 mtl-2.2.2
                      network-2.6.3.6 network-transport-0.5.2 network-transport-tcp-0.6.0
                      pretty-1.1.3.6 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.4
                      scientific-0.3.6.2 semigroupoids-5.2.2 sqlite-simple-0.4.16.0
                      stm-2.4.5.1 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.1
                      th-abstraction-0.2.10.0 time-1.8.0.2 transformers-0.5.5.0
                      transformers-base-0.4.5.2 transformers-compat-0.6.2 unix-2.7.2.2
                      unordered-containers-0.2.9.0 utils-0.1.0.0 vector-0.12.0.2
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         network-2.6.3.6:Network.Socket reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.4.5.1:Control.Monad.STM
         monad-par-0.3.4.8:Control.Monad.Par.Scheds.Trace
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         adjunctions-4.4:Data.Functor.Rep
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         network-transport-0.5.2:Network.Transport
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  Only-0.1:Data.Tuple.Only 0798d24209ddddd99fbe13fc0a503be2
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO.Handle fb550f271baae6fe7b19205b8166986b
import  -/  base-4.11.1.0:GHC.IO.Handle.FD 6cb851c401fa9a04314651bd6425440d
import  -/  base-4.11.1.0:GHC.IO.Handle.Text e23ef47ca91991c54e165e15e91a1ab0
import  -/  base-4.11.1.0:GHC.IO.IOMode 925d7d58f693b23bffdd8cdbdf9d203b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  directory-1.3.1.5:System.Directory b48f2bf02a6acabeb39c396bf3b1d6d3
import  -/  easy-file-0.2.2:System.EasyFile f4e2237885215c04eda068ff13a19667
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  network-transport-0.5.2:Network.Transport 18cb17ad2d91e2c94ab38d1745341964
import  -/  sqlite-simple-0.4.16.0:Database.SQLite.Simple 20e2ba743feb84c256c9497a23a79e2a
import  -/  sqlite-simple-0.4.16.0:Database.SQLite.Simple.FromRow 8a772f06111efae6b0b54b8bd69ab300
import  -/  sqlite-simple-0.4.16.0:Database.SQLite.Simple.Internal fd43506fb42a9d5687a1492482285126
import  -/  utils-0.1.0.0:Messages f163bf9a7a33e16d4758d509c538a791
import  -/  utils-0.1.0.0:NetworkUtils 3821ce2108e1c88fa63c76058138d588
655d32e7ced5c96b1fafe7f6d1ce758b
  $fDBWorkerFileSystemDBWorker :: Lib.DBWorker Lib.FileSystemDBWorker
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.FileSystemDBWorker
                  Lib.$fDBWorkerFileSystemDBWorker5
                    `cast`
                  (<Lib.FileSystemDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <GHC.Base.String>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  Lib.$fDBWorkerFileSystemDBWorker1
                    `cast`
                  (<Lib.FileSystemDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <Network.Transport.ConnectionId>_R
                   ->_R Sym (GHC.Types.N:IO[0] <Messages.DBMessage>_R)) -}
91a7c9eb5ca5b812bdeed79a0d614b9d
  $fDBWorkerFileSystemDBWorker1 ::
    Lib.FileSystemDBWorker
    -> GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.DBMessage #)
  {- Arity: 4, Strictness: <L,A><L,U><L,U><S,U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Lib.FileSystemDBWorker)
                   (w1 :: GHC.Base.String)
                   (w2 :: Network.Transport.ConnectionId)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Lib.$w$cload w1 w2 w3) -}
df2aa001518da83f37024cfcf1287312
  $fDBWorkerFileSystemDBWorker2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Lib.$fDBWorkerFileSystemDBWorker3) -}
1c285e152a41d4aeeef1d58703a41eba
  $fDBWorkerFileSystemDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\" found"#) -}
b60141f2b50bdb6161a449bb64e642e0
  $fDBWorkerFileSystemDBWorker4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("No key \""#) -}
e3dc91436bd3d9159d27286666977453
  $fDBWorkerFileSystemDBWorker5 ::
    Lib.FileSystemDBWorker
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,A><L,U><L,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (ds :: Lib.FileSystemDBWorker)
                   (key :: GHC.Base.String)
                   (value :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        key
                        GHC.IO.IOMode.WriteMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        value
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.hClose1 ipv1 ipv2 } }) -}
655d32e7ced5c96b1fafe7f6d1ce758b
  $fDBWorkerSQLiteDBWorker :: Lib.DBWorker Lib.SQLiteDBWorker
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.SQLiteDBWorker
                  Lib.$fDBWorkerSQLiteDBWorker2
                    `cast`
                  (<Lib.SQLiteDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <GHC.Base.String>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  Lib.$fDBWorkerSQLiteDBWorker1
                    `cast`
                  (<Lib.SQLiteDBWorker>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <Network.Transport.ConnectionId>_R
                   ->_R Sym (GHC.Types.N:IO[0] <Messages.DBMessage>_R)) -}
2f9005416eccbab7f0d278da5e4974ea
  $fDBWorkerSQLiteDBWorker1 ::
    Lib.SQLiteDBWorker
    -> GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.DBMessage #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U))><L,U><L,U><S,U> -}
4dd8ea357e95f4a74183269d87d7942a
  $fDBWorkerSQLiteDBWorker10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("publish"#) -}
c691d353a2ad05d1b2978ec9b252d672
  $fDBWorkerSQLiteDBWorker2 ::
    Lib.SQLiteDBWorker
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U))><L,U><L,U><S,U>,
     Unfolding: (\ (worker :: Lib.SQLiteDBWorker)
                   (key :: GHC.Base.String)
                   (value :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.$fDBWorkerSQLiteDBWorker9
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { () ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.$fDBWorkerSQLiteDBWorker7
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of ds3 { () ->
                 let {
                   conn :: Database.SQLite.Simple.Internal.Connection
                   = case worker of wild { Lib.SQLiteDBWorker ds4 -> ds4 }
                 } in
                 case Database.SQLite.Simple.withExclusiveTransaction2
                        @ ()
                        conn
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case Lib.$fDBWorkerSQLiteDBWorker5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                         case Database.SQLite.Simple.$wwithStatement
                                @ ()
                                conn
                                ww1
                                ww2
                                ww3
                                (\ (stmt :: Database.SQLite.Simple.Statement)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case stmt
                                        `cast`
                                      (Database.SQLite.Simple.N:Statement[0] ; Database.SQLite3.Direct.N:Statement[0]) of ww4 { GHC.Ptr.Ptr ww5 ->
                                 case Database.SQLite.Simple.$w$sbind
                                        ww5
                                        (case Lib.$w$dToRow key value of ww6 { (#,#) ww7 ww8 ->
                                         GHC.Types.: @ Database.SQLite3.SQLData ww7 ww8 })
                                        s2 of ds4 { (#,#) ipv4 ipv5 ->
                                 case Database.SQLite3.$wstep ww5 ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                                 (# ipv6, GHC.Tuple.() #) } } })
                                  `cast`
                                (<Database.SQLite.Simple.Statement>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                s1 of ds4 { (#,#) ipv4 ipv5 ->
                         (# ipv4, GHC.Tuple.() #) } })
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        Database.SQLite.Simple.Deferred
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.$fDBWorkerSQLiteDBWorker3
                        GHC.Types.True
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case ipv7 of ds6 { () -> (# ipv6, GHC.Tuple.() #) } } } } } } }) -}
a9b3bd799667d3ae09f5f790e70f6a39
  $fDBWorkerSQLiteDBWorker3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker4) -}
925dd7ebcb793bbecafd37a5a9c6d8da
  $fDBWorkerSQLiteDBWorker4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("inserted"#) -}
ffa4767ec74d252197e81c0d74c09cd4
  $fDBWorkerSQLiteDBWorker5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker6) -}
02d4462823d2ca5e022a596270647b3f
  $fDBWorkerSQLiteDBWorker6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("INSERT or REPLACE INTO kvmaptable (key, value) VALUES (?,?)"#) -}
361a8923f02eb7b97c97c1bc4a696f9b
  $fDBWorkerSQLiteDBWorker7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker8) -}
586486f965d1ad8197c53d9615794da7
  $fDBWorkerSQLiteDBWorker8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("insert"#) -}
848a3e158c3234fd63b9746ce97f0a84
  $fDBWorkerSQLiteDBWorker9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Lib.$fDBWorkerSQLiteDBWorker10) -}
5d40b36c42e6954320056c9a6fef162f
  $tc'C:DBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15912355597176792716##
                   2546434267481004546##
                   Lib.$trModule
                   Lib.$tc'C:DBWorker2
                   1#
                   Lib.$tc'C:DBWorker1) -}
bf8d05a7d319a0e5b9d704c097ebab69
  $tc'C:DBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
21345b682900b757cca74f03bd33cdcc
  $tc'C:DBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'C:DBWorker3) -}
59e0cc356e736bc0142a5648b84cebd3
  $tc'C:DBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:DBWorker"#) -}
ca6858be09785283f571b06d6c715644
  $tc'FileSystemDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18181375829200956991##
                   938958104093834006##
                   Lib.$trModule
                   Lib.$tc'FileSystemDBWorker2
                   0#
                   Lib.$tc'FileSystemDBWorker1) -}
bd70e199dfc5baac9881dea043d75651
  $tc'FileSystemDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
4a0c6c47ac45a49941f2e98d193ee1ad
  $tc'FileSystemDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'FileSystemDBWorker3) -}
7e7f9409b00b0ae10d963b2a6a84e035
  $tc'FileSystemDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FileSystemDBWorker"#) -}
c425aa2166217169d7bead4a31a738d9
  $tc'SQLiteDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17745791989748054925##
                   4129312584404260867##
                   Lib.$trModule
                   Lib.$tc'SQLiteDBWorker2
                   0#
                   Lib.$tc'SQLiteDBWorker1) -}
07b5d9f7448bf8b5ec83d991f0266f6c
  $tc'SQLiteDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
249fe3ff1363f82c73709b06113b0c16
  $tc'SQLiteDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'SQLiteDBWorker3) -}
505914c158a96e35fa83f73c563dc839
  $tc'SQLiteDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SQLiteDBWorker"#) -}
b51d582598cd0c6abc983aa7464ef60d
  $tcDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13898194454685521082##
                   916654558942157121##
                   Lib.$trModule
                   Lib.$tcDBWorker2
                   0#
                   Lib.$tcDBWorker1) -}
faf0056adbca8b53a317a8451835f77b
  $tcDBWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
17bd5aacf69e5d39c7d34efeaafdc53e
  $tcDBWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcDBWorker3) -}
7f6b80b8c1b28fe9ed0b2e8805535308
  $tcDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBWorker"#) -}
2eda7b078c914e3939d630ecefc5cc69
  $tcFileSystemDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10074104889336601195##
                   9232993626321817264##
                   Lib.$trModule
                   Lib.$tcFileSystemDBWorker1
                   0#
                   GHC.Types.krep$*) -}
a0e3ed83c56b57eef96d51269da67d5c
  $tcFileSystemDBWorker1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcFileSystemDBWorker2) -}
469cd35d4732355a78aae02a8fcb9386
  $tcFileSystemDBWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FileSystemDBWorker"#) -}
4155f1596b9e2ff72e0c6cc93bb58c1d
  $tcSQLiteDBWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14385773258558973487##
                   11186373803462131488##
                   Lib.$trModule
                   Lib.$tcSQLiteDBWorker1
                   0#
                   GHC.Types.krep$*) -}
64830adde6ecd9b81b7441728f9f2389
  $tcSQLiteDBWorker1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcSQLiteDBWorker2) -}
74c9f3200d7a2033217ce91a8d0520bf
  $tcSQLiteDBWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SQLiteDBWorker"#) -}
0881051035795a932795545645f21935
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
2630038f414eea3eeb9a2d886937853e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
1828fa0024f228da0940893cda062d2d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
32345851dfb3f83a3ac2cef6f1e0757e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
4fc075b2436b8b6a8377e711258618ca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("dbworker-0.1.0.0-3U5RJnmCUpqBsLcBe2UnI0"#) -}
95dad9b08fa3563910d57eea5e180e0e
  $w$cload ::
    GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.DBMessage #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Network.Transport.ConnectionId)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case System.Directory.createDirectoryIfMissing6
                                w
                                s of ds10 { (#,#) ipv ipv1 ->
                         (# ipv, GHC.Classes.not ipv1 #) })
                        System.Directory.doesDirectoryExist2
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   err :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Lib.$fDBWorkerFileSystemDBWorker4
                       (GHC.Base.++_$s++
                          @ GHC.Types.Char
                          Lib.$fDBWorkerFileSystemDBWorker2
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString w GHC.Show.$fShow[]1))
                 } in
                 case ipv1 of wild {
                   GHC.Types.False -> (# ipv, Messages.LoadErrorForID w1 err #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.FD.openFile1
                             w
                             GHC.IO.IOMode.ReadMode
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.IO.Handle.Internals.wantReadableHandle_1
                             @ GHC.Types.Bool
                             GHC.IO.Handle.hIsEOF3
                             ipv3
                             GHC.IO.Handle.hIsEOF2
                               `cast`
                             (<GHC.IO.Handle.Types.Handle__>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case ipv5 of wild1 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Internals.wantReadableHandle_1
                                  @ GHC.Base.String
                                  GHC.IO.Handle.Text.hGetLine4
                                  ipv3
                                  GHC.IO.Handle.Text.hGetLine2
                                    `cast`
                                  (<GHC.IO.Handle.Types.Handle__>_R
                                   ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                                  ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                           case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                           (# ipv8, Messages.LoadResultForID w1 ipv7 #) } }
                        GHC.Types.True
                        -> case GHC.IO.Handle.hClose1 ipv3 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                           (# ipv6, Messages.LoadErrorForID w1 err #) } } } } } }) -}
dfaefb0e70ee0eea843d6a737077ffd8
  $w$dToRow ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> (# Database.SQLite3.SQLData, [Database.SQLite3.SQLData] #)
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Char]) (ww1 :: [GHC.Types.Char]) ->
                 (# case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            Lib.$wouter ipv1 4# ww 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                    Database.SQLite3.SQLText dt } },
                    GHC.Types.:
                      @ Database.SQLite3.SQLData
                      (case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               Lib.$wouter ipv1 4# ww1 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                       Database.SQLite3.SQLText dt } })
                      (GHC.Types.[] @ Database.SQLite3.SQLData) #)) -}
a979667f5fc46f459c1908567dbe5b30
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
fbb268d73581a0d66cfd9f788403be2d
  $wworkerServer ::
    Lib.DBWorker a =>
    a
    -> ([Data.ByteString.Internal.ByteString]
        -> GHC.Types.IO
             (Data.Either.Either
                (Network.Transport.TransportError Network.Transport.SendErrorCode)
                ()))
    -> Network.Transport.EndPoint
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><C(C(S(SL))),C(C1(U(U,A)))><L,U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Lib.DBWorker a)
                   (w1 :: a)
                   (ww :: [Data.ByteString.Internal.ByteString]
                          -> GHC.Types.IO
                               (Data.Either.Either
                                  (Network.Transport.TransportError Network.Transport.SendErrorCode)
                                  ()))
                   (w2 :: Network.Transport.EndPoint)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (ww Lib.workerServer7)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either
                              (Network.Transport.TransportError Network.Transport.SendErrorCode)
                              ()>_R)
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   go :: forall a1.
                         Lib.DBWorker a1 =>
                         a1
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 4> {- Arity: 3,
                                 Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><S,U> -}
                   = \ @ a1
                       ($dDBWorker :: Lib.DBWorker a1)
                       (server :: a1)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case w2 of wild { Network.Transport.EndPoint ds2 ds3 ds4 ds5 ds6 ds7 ->
                     case ds2 `cast` (GHC.Types.N:IO[0] <Network.Transport.Event>_R)
                            s of ds8 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild1 {
                       DEFAULT -> go @ a1 $dDBWorker server ipv2
                       Network.Transport.Received dt ds
                       -> case ds of wild2 {
                            [] -> go @ a1 $dDBWorker server ipv2
                            : bytes ds9
                            -> case Data.Binary.Get.runGet3
                                      @ Messages.DBMessage
                                      Lib.workerServer6
                                      (Data.ByteString.Lazy.fromStrict bytes) of wild3 {
                                 DEFAULT -> go @ a1 $dDBWorker server ipv2
                                 Messages.PublishMessage key value ds10
                                 -> case GHC.IO.Handle.Text.hPutStr2
                                           GHC.IO.Handle.FD.stdout
                                           Lib.workerServer4
                                           GHC.Types.True
                                           ipv2 of ds11 { (#,#) ipv4 ipv5 ->
                                    case ipv5 of ds12 { () ->
                                    case (Lib.publish @ a1 $dDBWorker server key value)
                                           `cast`
                                         (GHC.Types.N:IO[0] <()>_R)
                                           ipv4 of ds13 { (#,#) ipv6 ipv7 ->
                                    go @ a1 $dDBWorker server ipv6 } } }
                                 Messages.LoadMessageWithID cid key
                                 -> case GHC.IO.Handle.Text.hPutStr2
                                           GHC.IO.Handle.FD.stdout
                                           Lib.workerServer2
                                           GHC.Types.True
                                           ipv2 of ds10 { (#,#) ipv4 ipv5 ->
                                    case ipv5 of ds11 { () ->
                                    case (Lib.load @ a1 $dDBWorker server key cid)
                                           `cast`
                                         (GHC.Types.N:IO[0] <Messages.DBMessage>_R)
                                           ipv4 of ds12 { (#,#) ipv6 ipv7 ->
                                    case (ww
                                            (GHC.Types.:
                                               @ Data.ByteString.Internal.ByteString
                                               (let {
                                                  cs :: Data.ByteString.Lazy.Internal.ByteString
                                                  = Data.ByteString.Builder.toLazyByteString
                                                      (case Messages.$w$cput6
                                                              ipv7 of ww1 { (#,#) ww2 ww3 ->
                                                       ww3 })
                                                } in
                                                Data.ByteString.Lazy.toStrict_goLen0 cs cs)
                                               (GHC.Types.[]
                                                  @ Data.ByteString.Internal.ByteString)))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 (Network.Transport.TransportError
                                                    Network.Transport.SendErrorCode)
                                                 ()>_R)
                                           ipv6 of ds13 { (#,#) ipv8 ipv9 ->
                                    go @ a1 $dDBWorker server ipv8 } } } } } } } } }
                 } in
                 go @ a w w1 ipv }) -}
655d32e7ced5c96b1fafe7f6d1ce758b
  class DBWorker a where
    publish :: a -> Lib.PublishHandler
    load :: a -> Lib.LoadHandler
    {-# MINIMAL publish, load #-}
e67a48f34317b276ddb1998e67b1112a
  data FileSystemDBWorker = FileSystemDBWorker
56d624773234b31c40b2583f4e8d86f4
  type LoadHandler =
    GHC.Base.String
    -> Network.Transport.ConnectionId
    -> GHC.Types.IO Messages.DBMessage
dda0d6f07c17ce6261ad46a6de16b22b
  type PublishHandler =
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
383245a27e896853a3cefff630ca81a4
  data SQLiteDBWorker
    = SQLiteDBWorker {connection :: Database.SQLite.Simple.Internal.Connection}
383245a27e896853a3cefff630ca81a4
  connection ::
    Lib.SQLiteDBWorker -> Database.SQLite.Simple.Internal.Connection
  RecSel Left Lib.SQLiteDBWorker
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SQLiteDBWorker) ->
                 case ds of wild { Lib.SQLiteDBWorker ds1 -> ds1 }) -}
28bf4162aa7d5d375c0ae519712db6fa
  makeFSDBWorker :: GHC.Types.IO Lib.FileSystemDBWorker
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.makeFSDBWorker1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lib.FileSystemDBWorker>_R)) -}
29f80cbc0ba4b9465bb300aba1149643
  makeFSDBWorker1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.FileSystemDBWorker #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Lib.FileSystemDBWorker #)) -}
d6057bc80b468f1aeff6f3ae560044a9
  makeSQLDBWorker :: GHC.Types.IO Lib.SQLiteDBWorker
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.makeSQLDBWorker1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lib.SQLiteDBWorker>_R)) -}
3a1ce3fc29ca635c63a04ce80c4fea60
  makeSQLDBWorker1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.SQLiteDBWorker #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Database.SQLite.Simple.open1
                        (GHC.CString.unpackCString# Lib.makeSQLDBWorker3)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.Text.Show.unpackCString#
                        Lib.makeSQLDBWorker2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wwithStatement
                        @ ()
                        ipv1
                        ww1
                        ww2
                        ww3
                        Database.SQLite.Simple.execute_2
                          `cast`
                        (<Database.SQLite.Simple.Statement>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, Lib.SQLiteDBWorker ipv1 #) } } }) -}
19a12005cd49e54ae9a1ed4ad33d5a54
  makeSQLDBWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("CREATE TABLE IF NOT EXISTS kvmaptable (key TEXT PRIMARY KEY, value TEXT)"#) -}
8de246ff7d9f34311529e8bc5e3582f5
  makeSQLDBWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kvmaptable.db"#) -}
90e986401ef7ddeb4b8dbda348de6a57
  tryConnectToServer ::
    GHC.Base.String
    -> GHC.Base.String
    -> (Network.Transport.Connection
        -> Network.Transport.EndPoint -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.tryConnectToServer1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Transport.Connection
                       -> Network.Transport.EndPoint -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e95dfd6f33adffd6caf1ef99675e4e38
  tryConnectToServer1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> (Network.Transport.Connection
        -> Network.Transport.EndPoint -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: (\ (serverAddr :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (action :: Network.Transport.Connection
                              -> Network.Transport.EndPoint -> GHC.Types.IO ())
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case NetworkUtils.connectToServer1
                        serverAddr
                        port
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left errMsg
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        errMsg
                        GHC.Types.True
                        ipv
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) masterConn masterEndpoint ->
                      (action masterConn masterEndpoint)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv } } }) -}
a4bee2599b699b770770c132d6da56b0
  workerServer ::
    Lib.DBWorker a =>
    a
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><S(C(C(S(SL)))L),1*U(C(C1(U(U,A))),A)><L,U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.workerServer1
                  `cast`
                (forall (a :: <*>_N).
                 <Lib.DBWorker a>_R
                 ->_R <a>_R
                 ->_R <Network.Transport.Connection>_R
                 ->_R <Network.Transport.EndPoint>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6650e735b56e3434a03fb7dbffb05e6a
  workerServer1 ::
    Lib.DBWorker a =>
    a
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(C1(U(U,A))))),C(C1(C1(C1(U(U,1*U))))))><L,U><S(C(C(S(SL)))L),1*U(C(C1(U(U,A))),A)><L,U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: Lib.DBWorker a)
                   (w1 :: a)
                   (w2 :: Network.Transport.Connection)
                   (w3 :: Network.Transport.EndPoint)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2 of ww { Network.Transport.Connection ww1 ww2 ->
                 Lib.$wworkerServer @ a w w1 ww1 w3 w4 }) -}
a33f931da445176dce0557fa6e402135
  workerServer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.workerServer3) -}
b65dfb3e3fedd83c108daf3fc2bb7e64
  workerServer3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(load server) k c"#) -}
38bc22cfe6fab5348425d9172f451a9e
  workerServer4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.workerServer5) -}
2da4b5e31190127ec18f9a3cddf140cb
  workerServer5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(publish server) k v"#) -}
05f397a622603c9a1192705d0b9f68bd
  workerServer6 :: Data.Binary.Get.Decoder Messages.DBMessage
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ Messages.DBMessage
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ Messages.DBMessage
                      (Messages.$w$cget5
                         @ Messages.DBMessage
                         __NULL
                         Data.ByteString.Internal.$fMonoidByteString1
                         0#
                         0#
                         (Data.Binary.Get.Internal.$WDone @ Messages.DBMessage)))
                   0#) -}
6ad1ce1d5f02f7ca35ce3910c7b45ff2
  workerServer7 :: [Data.ByteString.Internal.ByteString]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.ByteString.Internal.ByteString
                   Lib.workerServer8
                   (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) -}
c9dc3c556e172ffe6008ae6591ff134d
  workerServer8 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict_goLen0
                   Lib.workerServer_cs
                   Lib.workerServer_cs) -}
a8168c9c9f9874c38bbad696733bbd0f
  workerServer9 :: Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case Messages.$w$cput6
                        Messages.RegisterDBWorker of ww { (#,#) ww1 ww2 ->
                 ww2 }) -}
146fb37f3fc7bdb9568e7573085ce8ce
  workerServer_cs :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Lib.workerServer9) -}
instance Lib.DBWorker [Lib.FileSystemDBWorker]
  = Lib.$fDBWorkerFileSystemDBWorker
instance Lib.DBWorker [Lib.SQLiteDBWorker]
  = Lib.$fDBWorkerSQLiteDBWorker
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

