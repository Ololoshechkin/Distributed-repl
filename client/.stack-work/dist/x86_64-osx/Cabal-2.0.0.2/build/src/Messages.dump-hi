
==================== FINAL INTERFACE ====================
2019-09-14 21:22:15.374636 UTC

interface client-0.1.0.0-Fc21seRkY0DLkZZS0K7KYg:Messages 8021
  interface hash: 95acdfb64f4026c46770cc1082596b4e
  ABI hash: b2f50c3c8f97c746c784d1fd427169a2
  export-list hash: 9ddc4dfe33fe4a694f6fcf130fa3ae6b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b294497aae909e582c245beda16d32a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Messages.Assignment{Messages.Assignment}
  Messages.Constant{Messages.BoolConstant Messages.IntConstant Messages.StringConstant}
  Messages.DBComand{Messages.LoadDBComand Messages.PublishDBComand}
  Messages.Expression{Messages.BracesExpression Messages.ConstantExpression Messages.IfThenElseExpression Messages.InvocationExpression Messages.LambdaDefExpression Messages.OperatorExpression Messages.VariableExpression}
  Messages.IfThenElse{Messages.IfThenElse}
  Messages.Invocation{Messages.Invocation}
  Messages.LambdaDef{Messages.LambdaDef}
  Messages.LoadComand{Messages.LoadComand}
  Messages.Loop{Messages.While}
  Messages.Message{Messages.CompilationError Messages.CompileClientReply Messages.CompileClientRequest Messages.CompileWorkerReply Messages.CompileWorkerRequest Messages.RegisterWorker}
  Messages.Operator{Messages.BinaryOperator Messages.UnaryOperator}
  Messages.OperatorType{Messages.BoolType Messages.IntType Messages.StringType}
  Messages.Program{Messages.Program}
  Messages.PublishComand{Messages.PublishComand}
  Messages.ReturnStatement{Messages.ReturnStatement}
  Messages.Statement{Messages.AssignmentStatement Messages.DBComandStatement Messages.InvocationStatement Messages.LoopStatement}
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.0.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-prim-0.5.1.0 hashable-1.2.6.1 integer-gmp-1.0.1.0
                      network-transport-0.5.2 text-1.2.2.2
orphans: base-4.10.0.0:GHC.Base base-4.10.0.0:GHC.Float
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text
         text-1.2.2.2:Data.Text.Lazy text-1.2.2.2:Data.Text.Show
family instance modules: base-4.10.0.0:Control.Applicative
                         base-4.10.0.0:Data.Complex base-4.10.0.0:Data.Either
                         base-4.10.0.0:Data.Functor.Compose base-4.10.0.0:Data.Functor.Const
                         base-4.10.0.0:Data.Functor.Identity
                         base-4.10.0.0:Data.Functor.Product base-4.10.0.0:Data.Functor.Sum
                         base-4.10.0.0:Data.List.NonEmpty base-4.10.0.0:Data.Monoid
                         base-4.10.0.0:Data.Semigroup base-4.10.0.0:Data.Type.Equality
                         base-4.10.0.0:Data.Version base-4.10.0.0:Data.Void
                         base-4.10.0.0:GHC.Exts base-4.10.0.0:GHC.Generics
                         base-4.10.0.0:GHC.IO.Exception base-4.10.0.0:GHC.TypeLits
                         base-4.10.0.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         network-transport-0.5.2:Network.Transport text-1.2.2.2:Data.Text
                         text-1.2.2.2:Data.Text.Lazy
import  -/  base-4.10.0.0:Data.Word c4e948c409792d945106eb5269810128
import  -/  base-4.10.0.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.0.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.0.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  binary-0.8.5.1:Data.Binary 144542fa740940b048a5724d8f418675
import  -/  binary-0.8.5.1:Data.Binary.Class 39797e12758266958fcf9588a94364b0
import  -/  binary-0.8.5.1:Data.Binary.Get.Internal c1f70b3750da132f94db1b9b13050ffd
import  -/  ghc-prim-0.5.1.0:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  network-transport-0.5.2:Network.Transport 4fc10fe13621c7e59df89b5a3bf4f993
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryAssignment :: Data.Binary.Class.Binary Messages.Assignment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Assignment
                  Messages.$fBinaryAssignment_$cput
                  Messages.$fBinaryAssignment1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Assignment>_R))
                  Messages.$fBinaryAssignment_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryAssignment1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Assignment r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Assignment r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryAssignment_$cput ::
    Messages.Assignment -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Assignment) ->
                 case w of ww { Messages.Assignment ww1 ww2 ->
                 case Messages.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryAssignment_$sdefaultPutList ::
    [Messages.Assignment] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Assignment]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Assignment
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Assignment)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Assignment
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Assignment) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryAssignment_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Assignment]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fBinaryConstant :: Data.Binary.Class.Binary Messages.Constant
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Constant
                  Messages.$fBinaryConstant_$cput
                  Messages.$fBinaryConstant1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Constant>_R))
                  Messages.$fBinaryConstant_$sdefaultPutList -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fBinaryConstant1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Constant r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Constant r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
4b9d70eb9a104983be3966b71b798215
  $fBinaryConstant2 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt1 { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt1
                   Messages.$fBinaryConstant3 }) -}
fcf81b29be636e17be3412e165c8cd82
  $fBinaryConstant3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fBinaryConstant4) -}
ede210f621e1fc88d2b2aecdb6320b36
  $fBinaryConstant4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
843754cee0ae7ba1e4e68195a8004333
  $fBinaryConstant5 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
d7fa03844b99ff48cc3049eaa851f0e1
  $fBinaryConstant6 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt1 dt2 dt3 dt4 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# dt4 y) of wild2 {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt4))
                   GHC.Types.True
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
b849106d48b21082ac9029a9e22e6c0d
  $fBinaryConstant7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fBinaryConstant_$cput :: Messages.Constant -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Constant) ->
                 case Messages.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fBinaryConstant_$sdefaultPutList ::
    [Messages.Constant] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Constant]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Constant
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Constant)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Constant
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Constant) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryConstant_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Constant]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryDBComand :: Data.Binary.Class.Binary Messages.DBComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBComand
                  Messages.$fBinaryDBComand_$cput
                  Messages.$fBinaryDBComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.DBComand>_R))
                  Messages.$fBinaryDBComand_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryDBComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.DBComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.DBComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryDBComand_$cput :: Messages.DBComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.DBComand) ->
                 case Messages.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryDBComand_$sdefaultPutList ::
    [Messages.DBComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.DBComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.DBComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.DBComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.DBComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.DBComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryDBComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.DBComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryExpression :: Data.Binary.Class.Binary Messages.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Expression
                  Messages.$fBinaryExpression_$cput
                  Messages.$fBinaryExpression1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Expression>_R))
                  Messages.$fBinaryExpression_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryExpression1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Expression r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Expression r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryExpression_$cput ::
    Messages.Expression -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Expression) ->
                 case Messages.$w$cput1 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryExpression_$sdefaultPutList ::
    [Messages.Expression] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Expression]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Expression
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Expression)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Expression
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Expression) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryExpression_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Expression]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryIfThenElse :: Data.Binary.Class.Binary Messages.IfThenElse
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.IfThenElse
                  Messages.$fBinaryIfThenElse_$cput
                  Messages.$fBinaryIfThenElse1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.IfThenElse>_R))
                  Messages.$fBinaryIfThenElse_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryIfThenElse1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.IfThenElse r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.IfThenElse r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryIfThenElse_$cput ::
    Messages.IfThenElse -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.IfThenElse) ->
                 case w of ww { Messages.IfThenElse ww1 ww2 ww3 ->
                 case Messages.$w$cput6 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryIfThenElse_$sdefaultPutList ::
    [Messages.IfThenElse] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.IfThenElse]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.IfThenElse
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.IfThenElse)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.IfThenElse
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.IfThenElse) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryIfThenElse_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.IfThenElse]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryInvocation :: Data.Binary.Class.Binary Messages.Invocation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Invocation
                  Messages.$fBinaryInvocation_$cput
                  Messages.$fBinaryInvocation1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Invocation>_R))
                  Messages.$fBinaryInvocation_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryInvocation1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Invocation r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Invocation r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget6 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryInvocation_$cput ::
    Messages.Invocation -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Invocation) ->
                 case w of ww { Messages.Invocation ww1 ww2 ->
                 case Messages.$w$cput7 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryInvocation_$sdefaultPutList ::
    [Messages.Invocation] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Invocation]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Invocation
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Invocation)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Invocation
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Invocation) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryInvocation_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Invocation]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryInvocation_go ::
    [Messages.Expression] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLambdaDef :: Data.Binary.Class.Binary Messages.LambdaDef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LambdaDef
                  Messages.$fBinaryLambdaDef_$cput
                  Messages.$fBinaryLambdaDef1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.LambdaDef>_R))
                  Messages.$fBinaryLambdaDef_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLambdaDef1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.LambdaDef r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.LambdaDef r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget7 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLambdaDef_$cput ::
    Messages.LambdaDef -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.LambdaDef) ->
                 case w of ww { Messages.LambdaDef ww1 ww2 ->
                 case Messages.$w$cput8 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLambdaDef_$sdefaultPutList ::
    [Messages.LambdaDef] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.LambdaDef]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.LambdaDef
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.LambdaDef)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.LambdaDef
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.LambdaDef) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLambdaDef_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.LambdaDef]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLambdaDef_go ::
    [Messages.Statement] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoadComand :: Data.Binary.Class.Binary Messages.LoadComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LoadComand
                  Messages.$fBinaryLoadComand_$cput
                  Messages.$fBinaryLoadComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.LoadComand>_R))
                  Messages.$fBinaryLoadComand_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoadComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.LoadComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.LoadComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget10 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoadComand_$cput ::
    Messages.LoadComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.LoadComand) ->
                 case w of ww { Messages.LoadComand ww1 ww2 ->
                 case Messages.$w$cput4 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoadComand_$sdefaultPutList ::
    [Messages.LoadComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.LoadComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.LoadComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.LoadComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.LoadComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.LoadComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLoadComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.LoadComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoop :: Data.Binary.Class.Binary Messages.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Loop
                  Messages.$fBinaryLoop_$cput
                  Messages.$fBinaryLoop1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Loop>_R))
                  Messages.$fBinaryLoop_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoop1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Loop r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Loop r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget11 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoop_$cput :: Messages.Loop -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Loop) ->
                 case w of ww { Messages.While ww1 ww2 ->
                 case Messages.$w$cput11 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoop_$sdefaultPutList ::
    [Messages.Loop] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Loop]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Loop
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Loop)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Loop
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Loop) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryLoop_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Loop]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryLoop_go :: [Messages.Statement] -> Data.Binary.Put.PutM ()
  {- Arity: 1, Strictness: <S,1*U>m -}
4e3dd64e852327acd3a6ab25636e6494
  $fBinaryMessage :: Data.Binary.Class.Binary Messages.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Message
                  Messages.$fBinaryMessage_$cput
                  Messages.$fBinaryMessage1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Message>_R))
                  Messages.$fBinaryMessage_$sdefaultPutList -}
4e3dd64e852327acd3a6ab25636e6494
  $fBinaryMessage1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Message r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Message r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget12 @ r ww1 ww2 ww3 ww4 w1 }) -}
4e3dd64e852327acd3a6ab25636e6494
  $fBinaryMessage_$cput :: Messages.Message -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Message) ->
                 case Messages.$w$cput12 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
4e3dd64e852327acd3a6ab25636e6494
  $fBinaryMessage_$sdefaultPutList ::
    [Messages.Message] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Message]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Message
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Message)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Message
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Message) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryMessage_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Message]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryOperator :: Data.Binary.Class.Binary Messages.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Operator
                  Messages.$fBinaryOperator_$cput
                  Messages.$fBinaryOperator1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Operator>_R))
                  Messages.$fBinaryOperator_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryOperator1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Operator r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Operator r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget13 @ r ww1 ww2 ww3 ww4 w1 }) -}
cbf50271c93c7db9856cf221ecfac16f
  $fBinaryOperatorType ::
    Data.Binary.Class.Binary Messages.OperatorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fBinaryOperatorType_$cput
                  Messages.$fBinaryOperatorType7
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.OperatorType>_R))
                  Messages.$fBinaryOperatorType_$sdefaultPutList -}
11359695725b90021886855106bcd877
  $fBinaryOperatorType1 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType2
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                        (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))) -}
ffdf8abcb10d29b95f0479e21552f96c
  $fBinaryOperatorType2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt @ r w ww1 ww2 w2 }) -}
168142a54e132bee753e2ec68b158559
  $fBinaryOperatorType3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType4
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                        (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))) -}
2e6939ef4635085b5690c81a1b8c35bf
  $fBinaryOperatorType4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt1 @ r w ww1 ww2 w2 }) -}
88ed89ab2bb56de6b61bfea26397ddf4
  $fBinaryOperatorType5 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Messages.$fBinaryOperatorType6
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                        (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))) -}
65f0212f153580ceff36f4977e571c76
  $fBinaryOperatorType6 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Messages.$wdt2 @ r w ww1 ww2 w2 }) -}
cbf50271c93c7db9856cf221ecfac16f
  $fBinaryOperatorType7 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.OperatorType r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.OperatorType r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget14 @ r ww1 ww2 ww3 ww4 w1 }) -}
cbf50271c93c7db9856cf221ecfac16f
  $fBinaryOperatorType_$cput ::
    Messages.OperatorType -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Messages.OperatorType) ->
                 case ds of wild {
                   Messages.IntType
                   -> Messages.$fBinaryOperatorType5
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Messages.StringType
                   -> Messages.$fBinaryOperatorType3
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   Messages.BoolType
                   -> Messages.$fBinaryOperatorType1
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
cbf50271c93c7db9856cf221ecfac16f
  $fBinaryOperatorType_$sdefaultPutList ::
    [Messages.OperatorType] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.OperatorType]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.OperatorType
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.OperatorType)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.OperatorType
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.OperatorType) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryOperatorType_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.OperatorType]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryOperator_$cput :: Messages.Operator -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Operator) ->
                 case Messages.$w$cput13 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryOperator_$sdefaultPutList ::
    [Messages.Operator] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Operator]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Operator
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Operator)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Operator
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Operator) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryOperator_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Operator]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryProgram :: Data.Binary.Class.Binary Messages.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Program
                  Messages.$fBinaryProgram_$cput
                  Messages.$fBinaryProgram1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Program>_R))
                  Messages.$fBinaryProgram_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryProgram1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Program r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Program r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget8 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryProgram_$cput :: Messages.Program -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Program) ->
                 case w of ww { Messages.Program ww1 ww2 ->
                 case Messages.$w$cput9 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryProgram_$sdefaultPutList ::
    [Messages.Program] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Program]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Program
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Program)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Program
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Program) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryProgram_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Program]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryPublishComand ::
    Data.Binary.Class.Binary Messages.PublishComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.PublishComand
                  Messages.$fBinaryPublishComand_$cput
                  Messages.$fBinaryPublishComand1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.PublishComand>_R))
                  Messages.$fBinaryPublishComand_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryPublishComand1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.PublishComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Messages.PublishComand r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryPublishComand_$cput ::
    Messages.PublishComand -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.PublishComand) ->
                 case w of ww { Messages.PublishComand ww1 ww2 ww3 ->
                 case Messages.$w$cput5 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryPublishComand_$sdefaultPutList ::
    [Messages.PublishComand] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.PublishComand]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.PublishComand
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.PublishComand)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.PublishComand
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.PublishComand) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryPublishComand_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.PublishComand]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryReturnStatement ::
    Data.Binary.Class.Binary Messages.ReturnStatement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ReturnStatement
                  Messages.$fBinaryReturnStatement_$cput
                  Messages.$fBinaryReturnStatement1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Messages.ReturnStatement>_R))
                  Messages.$fBinaryReturnStatement_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryReturnStatement1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.ReturnStatement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (i :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success
                            Messages.ReturnStatement r) ->
                 Messages.$fBinaryExpression1
                   @ r
                   i
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    ks i' (Messages.ReturnStatement a1))) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryReturnStatement_$cput ::
    Messages.ReturnStatement -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Messages.ReturnStatement) ->
                 case ds of wild { Messages.ReturnStatement e ->
                 Messages.$fBinaryExpression_$cput e }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryReturnStatement_$sdefaultPutList ::
    [Messages.ReturnStatement] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.ReturnStatement]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.ReturnStatement
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.ReturnStatement)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.ReturnStatement
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.ReturnStatement) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryReturnStatement_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.ReturnStatement]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryStatement :: Data.Binary.Class.Binary Messages.Statement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Statement
                  Messages.$fBinaryStatement_$cput
                  Messages.$fBinaryStatement1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Messages.Statement>_R))
                  Messages.$fBinaryStatement_$sdefaultPutList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryStatement1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Messages.Statement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Messages.Statement r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Messages.$w$cget9 @ r ww1 ww2 ww3 ww4 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryStatement_$cput ::
    Messages.Statement -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Messages.Statement) ->
                 case Messages.$w$cput10 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fBinaryStatement_$sdefaultPutList ::
    [Messages.Statement] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [Messages.Statement]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ Messages.Statement
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ Messages.Statement)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ Messages.Statement
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: Messages.Statement) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (Messages.$fBinaryStatement_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[Messages.Statement]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowAssignment :: GHC.Show.Show Messages.Assignment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Assignment
                  Messages.$fShowAssignment_$cshowsPrec
                  Messages.$fShowAssignment_$cshow
                  Messages.$fShowAssignment_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowAssignment1 :: Messages.Assignment -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Messages.Assignment) ->
                 case w of ww { Messages.Assignment ww1 ww2 ->
                 Messages.$w$cshowsPrec 0# ww1 ww2 }) -}
6b344575b354d4d3f6d0ad37441aa63d
  $fShowAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assignment "#) -}
277065738b223e54eae5b6331b011a96
  $fShowAssignment3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowAssignment_$cshow :: Messages.Assignment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Assignment) ->
                 Messages.$fShowAssignment_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowAssignment_$cshowList ::
    [Messages.Assignment] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Assignment
                   Messages.$fShowAssignment1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowAssignment_$cshowsPrec ::
    GHC.Types.Int -> Messages.Assignment -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Assignment) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Assignment ww3 ww4 ->
                 Messages.$w$cshowsPrec ww1 ww3 ww4 } }) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fShowConstant :: GHC.Show.Show Messages.Constant
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Constant
                  Messages.$fShowConstant_$cshowsPrec
                  Messages.$fShowConstant_$cshow
                  Messages.$fShowConstant_$cshowList -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fShowConstant1 :: Messages.Constant -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Messages.Constant) (w1 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec2 0# w w1) -}
4cc7c0ceb866237d9944039b6aa017c8
  $fShowConstant2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolConstant "#) -}
089fca03503982cf51319fe2d8f8397c
  $fShowConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringConstant "#) -}
09be9026708a3e4d3ac2977dec6a9553
  $fShowConstant4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntConstant "#) -}
1dcd4fb7e4368246843fc62baf9b68cf
  $fShowConstant5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fShowConstant_$cshow :: Messages.Constant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.Constant) ->
                 case x of wild {
                   Messages.IntConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant4
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Messages.StringConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Messages.$fShowConstant5))
                   Messages.BoolConstant b1
                   -> GHC.CString.unpackAppendCString#
                        Messages.$fShowConstant2
                        (case b1 of wild1 {
                           GHC.Types.False -> GHC.Show.$fShowBool3
                           GHC.Types.True -> GHC.Show.$fShowBool1 }) }) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fShowConstant_$cshowList :: [Messages.Constant] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Constant
                   Messages.$fShowConstant1) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $fShowConstant_$cshowsPrec ::
    GHC.Types.Int -> Messages.Constant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.Constant)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec2 ww1 w1 w2 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowDBComand :: GHC.Show.Show Messages.DBComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.DBComand
                  Messages.$fShowDBComand_$cshowsPrec
                  Messages.$fShowDBComand_$cshow
                  Messages.$fShowDBComand_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowDBComand1 :: Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.DBComand) ->
                 Messages.$w$cshowsPrec3 0# w) -}
5c5e447c0ca913b5a2c82ce5b91bf799
  $fShowDBComand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand3) -}
ab3ae8d026322b524a1ae8860ed5f16e
  $fShowDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadDBComand "#) -}
e51e9057b2346ef794a6ed4de49777f0
  $fShowDBComand4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadComand "#) -}
fb84b5b201d32e67014121b5b6b52934
  $fShowDBComand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand6) -}
cdf6d6c55a0aefdc302b5d2ae7421f9d
  $fShowDBComand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishDBComand "#) -}
da37941fce96d5a9f49b2d83b57674cd
  $fShowDBComand7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowDBComand8) -}
38211ba2789b8b16ad2d3d6235fc2458
  $fShowDBComand8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishComand "#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowDBComand_$cshow :: Messages.DBComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Messages.DBComand) ->
                 case x of wild {
                   Messages.PublishDBComand b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Messages.$fShowDBComand5
                        (case b1 of ww { Messages.PublishComand ww1 ww2 ww3 ->
                         Messages.$w$cshowsPrec5
                           11#
                           ww1
                           ww2
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Messages.LoadDBComand b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Messages.$fShowDBComand2
                        (case b1 of ww { Messages.LoadComand ww1 ww2 ->
                         Messages.$w$cshowsPrec4
                           11#
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowDBComand_$cshowList :: [Messages.DBComand] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.DBComand
                   Messages.$fShowDBComand1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowDBComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.DBComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec3 ww1 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowExpression :: GHC.Show.Show Messages.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Expression
                  Messages.$fShowExpression_$cshowsPrec
                  Messages.$fShowExpression_$cshow
                  Messages.$fShowExpression_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowExpression1 :: Messages.Expression -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Expression) ->
                 Messages.$w$cshowsPrec1 0# w) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowExpression_$cshow :: Messages.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Expression) ->
                 Messages.$fShowExpression_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowExpression_$cshowList ::
    [Messages.Expression] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Expression
                   Messages.$fShowExpression1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Expression) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec1 ww1 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowIfThenElse :: GHC.Show.Show Messages.IfThenElse
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.IfThenElse
                  Messages.$fShowIfThenElse_$cshowsPrec
                  Messages.$fShowIfThenElse_$cshow
                  Messages.$fShowIfThenElse_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowIfThenElse1 :: Messages.IfThenElse -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Messages.IfThenElse) ->
                 case w of ww { Messages.IfThenElse ww1 ww2 ww3 ->
                 Messages.$w$cshowsPrec6 0# ww1 ww2 ww3 }) -}
279dadcc01fe6050c48127a4aa315ac4
  $fShowIfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IfThenElse "#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowIfThenElse_$cshow :: Messages.IfThenElse -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.IfThenElse) ->
                 Messages.$fShowIfThenElse_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowIfThenElse_$cshowList ::
    [Messages.IfThenElse] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.IfThenElse
                   Messages.$fShowIfThenElse1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowIfThenElse_$cshowsPrec ::
    GHC.Types.Int -> Messages.IfThenElse -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.IfThenElse) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.IfThenElse ww3 ww4 ww5 ->
                 Messages.$w$cshowsPrec6 ww1 ww3 ww4 ww5 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowInvocation :: GHC.Show.Show Messages.Invocation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Invocation
                  Messages.$fShowInvocation_$cshowsPrec
                  Messages.$fShowInvocation_$cshow
                  Messages.$fShowInvocation_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowInvocation1 :: Messages.Invocation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Messages.Invocation) (w1 :: GHC.Base.String) ->
                 case w of ww { Messages.Invocation ww1 ww2 ->
                 Messages.$w$cshowsPrec7 0# ww1 ww2 w1 }) -}
f031b0092f137e1b2f76806d8070944c
  $fShowInvocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invocation "#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowInvocation_$cshow :: Messages.Invocation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Invocation) ->
                 Messages.$fShowInvocation_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowInvocation_$cshowList ::
    [Messages.Invocation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Invocation
                   Messages.$fShowInvocation1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowInvocation_$cshowsPrec ::
    GHC.Types.Int -> Messages.Invocation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.Invocation)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Invocation ww3 ww4 ->
                 Messages.$w$cshowsPrec7 ww1 ww3 ww4 w2 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLambdaDef :: GHC.Show.Show Messages.LambdaDef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LambdaDef
                  Messages.$fShowLambdaDef_$cshowsPrec
                  Messages.$fShowLambdaDef_$cshow
                  Messages.$fShowLambdaDef_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLambdaDef1 :: Messages.LambdaDef -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>,
     Unfolding: (\ (w :: Messages.LambdaDef) ->
                 case w of ww { Messages.LambdaDef ww1 ww2 ->
                 Messages.$w$cshowsPrec8 0# ww1 ww2 }) -}
c73b958ae8fd75cc2824c6acab078eb9
  $fShowLambdaDef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaDef "#) -}
c7539741e9a5e82896ea345e47304ab1
  $fShowLambdaDef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program "#) -}
e3cb0e962a3f622995a552ec0fa1f0b0
  $fShowLambdaDef4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowLambdaDef5) -}
e48a587063a9f2a2b93bb3bb32dc1aeb
  $fShowLambdaDef5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnStatement "#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLambdaDef_$cshow :: Messages.LambdaDef -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.LambdaDef) ->
                 Messages.$fShowLambdaDef_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLambdaDef_$cshowList ::
    [Messages.LambdaDef] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.LambdaDef
                   Messages.$fShowLambdaDef1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLambdaDef_$cshowsPrec ::
    GHC.Types.Int -> Messages.LambdaDef -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U,1*U(1*U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.LambdaDef) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                 Messages.$w$cshowsPrec8 ww1 ww3 ww4 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoadComand :: GHC.Show.Show Messages.LoadComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.LoadComand
                  Messages.$fShowLoadComand_$cshowsPrec
                  Messages.$fShowLoadComand_$cshow
                  Messages.$fShowLoadComand_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoadComand1 :: Messages.LoadComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: (\ (w :: Messages.LoadComand) ->
                 case w of ww { Messages.LoadComand ww1 ww2 ->
                 Messages.$w$cshowsPrec4 0# ww1 ww2 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoadComand_$cshow :: Messages.LoadComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.LoadComand) ->
                 Messages.$fShowLoadComand_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoadComand_$cshowList ::
    [Messages.LoadComand] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.LoadComand
                   Messages.$fShowLoadComand1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoadComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.LoadComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.LoadComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.LoadComand ww3 ww4 ->
                 Messages.$w$cshowsPrec4 ww1 ww3 ww4 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoop :: GHC.Show.Show Messages.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Loop
                  Messages.$fShowLoop_$cshowsPrec
                  Messages.$fShowLoop_$cshow
                  Messages.$fShowLoop_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoop1 :: Messages.Loop -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: (\ (w :: Messages.Loop) ->
                 case w of ww { Messages.While ww1 ww2 ->
                 Messages.$w$cshowsPrec12 0# ww1 ww2 }) -}
e30df06ed138ae32f04ff74d3e17660a
  $fShowLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("While "#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoop_$cshow :: Messages.Loop -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Loop) ->
                 Messages.$fShowLoop_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoop_$cshowList :: [Messages.Loop] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Loop
                   Messages.$fShowLoop1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowLoop_$cshowsPrec ::
    GHC.Types.Int -> Messages.Loop -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Loop) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.While ww3 ww4 ->
                 Messages.$w$cshowsPrec12 ww1 ww3 ww4 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowOperator :: GHC.Show.Show Messages.Operator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Operator
                  Messages.$fShowOperator_$cshowsPrec
                  Messages.$fShowOperator_$cshow
                  Messages.$fShowOperator_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowOperator1 :: Messages.Operator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Operator) ->
                 Messages.$w$cshowsPrec13 0# w) -}
1119ef33f5b6b31912193c37271f37b3
  $fShowOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BinaryOperator "#) -}
d6d19c31d442f7dffe3e0f19fb23f947
  $fShowOperator3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator4) -}
a056debc322c8995d4607715e3718416
  $fShowOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolType"#) -}
2dfb3074401308b2f6960e6e24d0cb3d
  $fShowOperator5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator6) -}
b33f8253dfcd4fc4eaae49c4a786641a
  $fShowOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringType"#) -}
8e99e568596168e8a8786c8b927b4e8b
  $fShowOperator7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Messages.$fShowOperator8) -}
3769e416892119718dc54bc555ad1d29
  $fShowOperator8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntType"#) -}
9c8b14ac22761096e2dd77804ef94e18
  $fShowOperator9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnaryOperator "#) -}
cbf50271c93c7db9856cf221ecfac16f
  $fShowOperatorType :: GHC.Show.Show Messages.OperatorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.OperatorType
                  Messages.$fShowOperatorType_$cshowsPrec
                  Messages.$fShowOperatorType_$cshow
                  Messages.$fShowOperatorType_$cshowList -}
cbf50271c93c7db9856cf221ecfac16f
  $fShowOperatorType_$cshow ::
    Messages.OperatorType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.OperatorType) ->
                 case x of wild {
                   Messages.IntType -> Messages.$fShowOperator7
                   Messages.StringType -> Messages.$fShowOperator5
                   Messages.BoolType -> Messages.$fShowOperator3 }) -}
cbf50271c93c7db9856cf221ecfac16f
  $fShowOperatorType_$cshowList ::
    [Messages.OperatorType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.OperatorType
                   Messages.$w$cshowsPrec14) -}
cbf50271c93c7db9856cf221ecfac16f
  $fShowOperatorType_$cshowsPrec ::
    GHC.Types.Int -> Messages.OperatorType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Messages.OperatorType)
                   (w2 :: GHC.Base.String) ->
                 Messages.$w$cshowsPrec14 w1 w2) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowOperator_$cshow :: Messages.Operator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Operator) ->
                 Messages.$fShowOperator_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowOperator_$cshowList :: [Messages.Operator] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Operator
                   Messages.$fShowOperator1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowOperator_$cshowsPrec ::
    GHC.Types.Int -> Messages.Operator -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Operator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec13 ww1 w1 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowProgram :: GHC.Show.Show Messages.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Program
                  Messages.$fShowProgram_$cshowsPrec
                  Messages.$fShowProgram_$cshow
                  Messages.$fShowProgram_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowProgram1 :: Messages.Program -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>,
     Unfolding: (\ (w :: Messages.Program) ->
                 case w of ww { Messages.Program ww1 ww2 ->
                 Messages.$w$cshowsPrec9 0# ww1 ww2 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowProgram_$cshow :: Messages.Program -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Program) ->
                 Messages.$fShowProgram_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowProgram_$cshowList :: [Messages.Program] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Program
                   Messages.$fShowProgram1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowProgram_$cshowsPrec ::
    GHC.Types.Int -> Messages.Program -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Program) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.Program ww3 ww4 ->
                 Messages.$w$cshowsPrec9 ww1 ww3 ww4 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowPublishComand :: GHC.Show.Show Messages.PublishComand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.PublishComand
                  Messages.$fShowPublishComand_$cshowsPrec
                  Messages.$fShowPublishComand_$cshow
                  Messages.$fShowPublishComand_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowPublishComand1 :: Messages.PublishComand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: (\ (w :: Messages.PublishComand) ->
                 case w of ww { Messages.PublishComand ww1 ww2 ww3 ->
                 Messages.$w$cshowsPrec5 0# ww1 ww2 ww3 }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowPublishComand_$cshow ::
    Messages.PublishComand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.PublishComand) ->
                 Messages.$fShowPublishComand_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowPublishComand_$cshowList ::
    [Messages.PublishComand] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.PublishComand
                   Messages.$fShowPublishComand1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowPublishComand_$cshowsPrec ::
    GHC.Types.Int -> Messages.PublishComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.PublishComand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.PublishComand ww3 ww4 ww5 ->
                 Messages.$w$cshowsPrec5 ww1 ww3 ww4 ww5 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowReturnStatement :: GHC.Show.Show Messages.ReturnStatement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.ReturnStatement
                  Messages.$fShowReturnStatement_$cshowsPrec
                  Messages.$fShowReturnStatement_$cshow
                  Messages.$fShowReturnStatement_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowReturnStatement1 ::
    Messages.ReturnStatement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: (\ (w :: Messages.ReturnStatement) ->
                 case w of ww { Messages.ReturnStatement ww1 ->
                 Messages.$w$cshowsPrec11 0# ww1 }) -}
61968de69caebfe5bcf01efc502346b7
  $fShowReturnStatement2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowReturnStatement_$cshow ::
    Messages.ReturnStatement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.ReturnStatement) ->
                 case x of wild { Messages.ReturnStatement b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Messages.$fShowLambdaDef4)
                   (Messages.$fShowExpression_$cshowsPrec
                      Messages.$fShowReturnStatement2
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowReturnStatement_$cshowList ::
    [Messages.ReturnStatement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.ReturnStatement
                   Messages.$fShowReturnStatement1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowReturnStatement_$cshowsPrec ::
    GHC.Types.Int -> Messages.ReturnStatement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.ReturnStatement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Messages.ReturnStatement ww3 ->
                 Messages.$w$cshowsPrec11 ww1 ww3 } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowStatement :: GHC.Show.Show Messages.Statement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Messages.Statement
                  Messages.$fShowStatement_$cshowsPrec
                  Messages.$fShowStatement_$cshow
                  Messages.$fShowStatement_$cshowList -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowStatement1 :: Messages.Statement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Messages.Statement) ->
                 Messages.$w$cshowsPrec10 0# w) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowStatement_$cshow :: Messages.Statement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Messages.Statement) ->
                 Messages.$fShowStatement_$cshowsPrec
                   Messages.$fShowAssignment3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowStatement_$cshowList ::
    [Messages.Statement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Messages.Statement
                   Messages.$fShowStatement1) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $fShowStatement_$cshowsPrec ::
    GHC.Types.Int -> Messages.Statement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Messages.Statement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Messages.$w$cshowsPrec10 ww1 w1 }) -}
b55bd5bbccd4d6dfb995ac932a8839b4
  $tc'Assignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10226607071325479519##
                   13792447688008961437##
                   Messages.$trModule
                   Messages.$tc'Assignment2
                   0#
                   Messages.$tc'Assignment1) -}
c9cc25f90ada7d263aeaada803827b49
  $tc'Assignment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8adbba8f4276d469092ffc29fd78c205
  $tc'Assignment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Assignment3) -}
a358f2b4f095b7218a1f13e73fafe32d
  $tc'Assignment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assignment"#) -}
772d23b3ee671270dbe5b2dc4d03b648
  $tc'AssignmentStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8409526232645830904##
                   17181574067020172661##
                   Messages.$trModule
                   Messages.$tc'AssignmentStatement2
                   0#
                   Messages.$tc'AssignmentStatement1) -}
ed4915eb8d6951e8fd5771049cf082b8
  $tc'AssignmentStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f7b0f8617fd2bd61f219be3312e1e867
  $tc'AssignmentStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'AssignmentStatement3) -}
fffff8b8501a027b954d25d7a111fd9e
  $tc'AssignmentStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AssignmentStatement"#) -}
84a761a5ab6b6ca8c2a4c6333b216b09
  $tc'BinaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4745843265592387328##
                   12462343875769245281##
                   Messages.$trModule
                   Messages.$tc'BinaryOperator2
                   0#
                   Messages.$tc'BinaryOperator1) -}
ba619dd0cccd03b9493fd832fea8f2c0
  $tc'BinaryOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3591528c34a630a6b4afed3cb455d72d
  $tc'BinaryOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BinaryOperator3) -}
59b86f73a8deeeac8eaa3596df777b99
  $tc'BinaryOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryOperator"#) -}
cca9d49c355639d36935c8c174a435bc
  $tc'BoolConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17167347248962632064##
                   14658210223026486750##
                   Messages.$trModule
                   Messages.$tc'BoolConstant2
                   0#
                   Messages.$tc'BoolConstant1) -}
df13a456860a6a94c2ca923f9894d527
  $tc'BoolConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
12a5c4b2d05322d1294a42594a4881c3
  $tc'BoolConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BoolConstant3) -}
1e60b1ad38409ad7ce9d3c5e49b34576
  $tc'BoolConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolConstant"#) -}
88fa75b6259992ae95cbc5600d37aac1
  $tc'BoolType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7227645048305542658##
                   945895980343420209##
                   Messages.$trModule
                   Messages.$tc'BoolType2
                   0#
                   Messages.$tc'BoolType1) -}
424ec1b44853fb7d95553bf05f396c71
  $tc'BoolType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
3ef455fd9d599a4ff6a0e1b3b01ebd4a
  $tc'BoolType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BoolType3) -}
c97a2c389def6d5164e781a960c4efb4
  $tc'BoolType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolType"#) -}
616db9cea0bbcb3326bdfc7b48c81356
  $tc'BracesExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   293479345001088555##
                   14800485852255702020##
                   Messages.$trModule
                   Messages.$tc'BracesExpression2
                   0#
                   Messages.$tc'BracesExpression1) -}
7ff44f5cee8be45602fdd09d304df1a3
  $tc'BracesExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5120783fdca57a0243a48361d1d4f4ea
  $tc'BracesExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'BracesExpression3) -}
a21dd0a8e06a6ae1c26d12d5120675f9
  $tc'BracesExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BracesExpression"#) -}
65c30ddb14d7b0469897766ff502b006
  $tc'CompilationError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5729596318019552085##
                   10508591906535473159##
                   Messages.$trModule
                   Messages.$tc'CompilationError2
                   0#
                   Messages.$tc'CompilationError1) -}
b7b14f02dcca02446a6c82b4e9169b34
  $tc'CompilationError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3f0be0ed27faa2f48ce81e9099fcaea5
  $tc'CompilationError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompilationError3) -}
71c3d242f75ab4df602084b5ce6a5e3c
  $tc'CompilationError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompilationError"#) -}
4aafefddeec4ace04469a793191cae94
  $tc'CompileClientReply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9977801515579486485##
                   3793022115960147437##
                   Messages.$trModule
                   Messages.$tc'CompileClientReply1
                   0#
                   Messages.$tc'CompilationError1) -}
47eda32582a12880f708b1b922130db7
  $tc'CompileClientReply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompileClientReply2) -}
03cb1271f4a58a2171071f07dda066ff
  $tc'CompileClientReply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileClientReply"#) -}
532431d7a62a50932c01ed40ccd6f657
  $tc'CompileClientRequest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10627126847174343700##
                   16442145598532954825##
                   Messages.$trModule
                   Messages.$tc'CompileClientRequest2
                   0#
                   Messages.$tc'CompileClientRequest1) -}
092f727504adf881cea6e1aa94d25624
  $tc'CompileClientRequest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e01525a7fa2de9dca5751b670c0787d7
  $tc'CompileClientRequest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'CompileClientRequest3) -}
587f45d6f5594289bb6cca7f2588e5ed
  $tc'CompileClientRequest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileClientRequest"#) -}
dea48a72db5dc764975f7bc5d1d2305c
  $tc'CompileWorkerReply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7382385528026616410##
                   13311658468377984179##
                   Messages.$trModule
                   Messages.$tc'CompileWorkerReply2
                   0#
                   Messages.$tc'CompileWorkerReply1) -}
610392f62379ac1a0d89de632de5280f
  $tc'CompileWorkerReply1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
02faefa7220ef2fa9631ab82e89f409d
  $tc'CompileWorkerReply2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'CompileWorkerReply3) -}
f3a6fe3dabf7b83d0d17abcb1f8d064e
  $tc'CompileWorkerReply3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileWorkerReply"#) -}
a0acae5e0d67a0bf39f18e5f5adb1475
  $tc'CompileWorkerRequest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13743853629644681727##
                   15911268902821512971##
                   Messages.$trModule
                   Messages.$tc'CompileWorkerRequest2
                   0#
                   Messages.$tc'CompileWorkerRequest1) -}
c8afd83984547c33325deed50ea60e0f
  $tc'CompileWorkerRequest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
054ae08e426dcd46e7666fe5705d8df2
  $tc'CompileWorkerRequest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'CompileWorkerRequest3) -}
7947d1c2cdcd550f3738c37532eb6a02
  $tc'CompileWorkerRequest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompileWorkerRequest"#) -}
89a7ae01004b02a6e022ca9b524d0644
  $tc'ConstantExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13584018222796151964##
                   2028000861207001083##
                   Messages.$trModule
                   Messages.$tc'ConstantExpression2
                   0#
                   Messages.$tc'ConstantExpression1) -}
47800f4b8c9ad007b99558ef94a0fc7b
  $tc'ConstantExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2038496a5a748ca8f7e549800a4ae735
  $tc'ConstantExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'ConstantExpression3) -}
f447fee4966bf8f2f411f8f63c4d29c7
  $tc'ConstantExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstantExpression"#) -}
3f2f77122cee206531c269018ca7a500
  $tc'DBComandStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1080856812995097670##
                   410227330014118191##
                   Messages.$trModule
                   Messages.$tc'DBComandStatement2
                   0#
                   Messages.$tc'DBComandStatement1) -}
a6282fa7af14119f4ac90d296c807a96
  $tc'DBComandStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ee30921bc3a86d18fcc37124f8895d98
  $tc'DBComandStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'DBComandStatement3) -}
4ca1a1becd89ff5a6dbd5bb366230356
  $tc'DBComandStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DBComandStatement"#) -}
c42c8a58f9e90d0f34990153bc9bf990
  $tc'IfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15678633951552474885##
                   9113555624510550671##
                   Messages.$trModule
                   Messages.$tc'IfThenElse2
                   0#
                   Messages.$tc'IfThenElse1) -}
8d67b41a9aa4d2db3d2e504a730c8f2e
  $tc'IfThenElse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d6fa3da91c726ffa84f7ee8cdaf00835
  $tc'IfThenElse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IfThenElse3) -}
88912f0085fe0463ec7abb3b3ea30dcb
  $tc'IfThenElse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElse"#) -}
d56772ab7aea008121d7b5ea45eb58ac
  $tc'IfThenElseExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4274420286825320844##
                   8215732543110630315##
                   Messages.$trModule
                   Messages.$tc'IfThenElseExpression2
                   0#
                   Messages.$tc'IfThenElseExpression1) -}
700a01092d0246dc80f71df086b9383f
  $tc'IfThenElseExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
160a9f06c7752d2abf0ab501f20dc965
  $tc'IfThenElseExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'IfThenElseExpression3) -}
e3bc55f17569dcb3500b9985cf81f1f0
  $tc'IfThenElseExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElseExpression"#) -}
d70ea7854660dea5dc2bdf0bef8f37d4
  $tc'IntConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13285150155118250347##
                   1057409103643623687##
                   Messages.$trModule
                   Messages.$tc'IntConstant2
                   0#
                   Messages.$tc'IntConstant1) -}
c39940a86d71da713473cec4a70069c3
  $tc'IntConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
85aa7970adf98bc38e84c7a2b75b28ea
  $tc'IntConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IntConstant3) -}
4198d63b5418b3f56d6be950f5f4758d
  $tc'IntConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntConstant"#) -}
960aa815a525c36c2ebf67a122d71340
  $tc'IntType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4811040451789459039##
                   11097190829841008339##
                   Messages.$trModule
                   Messages.$tc'IntType1
                   0#
                   Messages.$tc'BoolType1) -}
51e58a6a9be098ebcf16a0e3c65ea1d8
  $tc'IntType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'IntType2) -}
4c9b111e34c3482722ab6b64e8dc1ead
  $tc'IntType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntType"#) -}
4fee1a007e85cefefea4f762ef0181de
  $tc'Invocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18136668849358532664##
                   9889080199935668565##
                   Messages.$trModule
                   Messages.$tc'Invocation2
                   0#
                   Messages.$tc'Invocation1) -}
538af57c0822c5edea266bab15fb6435
  $tc'Invocation1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c99f3730c2c55d536474a4b1484f3738
  $tc'Invocation2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Invocation3) -}
4565e4f5bd9e6172982fd9d25ad89597
  $tc'Invocation3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Invocation"#) -}
81f35c317b742192e8f66273fb8032ec
  $tc'InvocationExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7497766873613073637##
                   4279492844010074837##
                   Messages.$trModule
                   Messages.$tc'InvocationExpression2
                   0#
                   Messages.$tc'InvocationExpression1) -}
8c3cb2e1cb4741d596ab53bc01f9eb91
  $tc'InvocationExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
243212820c5002c4df2a79710477a5a4
  $tc'InvocationExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Messages.$tc'InvocationExpression3) -}
8e0cb5abc0e3020b0da8ff6390e36c5a
  $tc'InvocationExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvocationExpression"#) -}
2b44fb235f73981124bd0cf01a4bccc0
  $tc'InvocationStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10579965226092633884##
                   16708133687279521277##
                   Messages.$trModule
                   Messages.$tc'InvocationStatement2
                   0#
                   Messages.$tc'InvocationStatement1) -}
1c645cf182f616303a045308ef7774b3
  $tc'InvocationStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
903a8c07f7d77971be5fa0798d6270a2
  $tc'InvocationStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'InvocationStatement3) -}
ee20c7bada4aedfe4dbc61fdbb3413e2
  $tc'InvocationStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvocationStatement"#) -}
71690b32754ee4b1b46ad132bc7d2bf9
  $tc'LambdaDef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15807583968643960918##
                   10041197481206125267##
                   Messages.$trModule
                   Messages.$tc'LambdaDef2
                   0#
                   Messages.$tc'LambdaDef1) -}
6495fe2292b422225b3e67035531315f
  $tc'LambdaDef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62194a740a3e7fa18e7d86c68675e418
  $tc'LambdaDef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LambdaDef3) -}
037bb052a534331351a20d78973fd3da
  $tc'LambdaDef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaDef"#) -}
f7f60584b3cdeac68ee9af3d1cbfa246
  $tc'LambdaDefExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16394732647443219664##
                   17683135022721212998##
                   Messages.$trModule
                   Messages.$tc'LambdaDefExpression2
                   0#
                   Messages.$tc'LambdaDefExpression1) -}
e1fb083cc3789bb66d46b702f4a4958a
  $tc'LambdaDefExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
60361d9ad6b12b591f310606caa14d0f
  $tc'LambdaDefExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LambdaDefExpression3) -}
276d03f023e1b9ad0e671686dea7bc9d
  $tc'LambdaDefExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaDefExpression"#) -}
757f4e7153b596f30bc14fb59545695a
  $tc'LoadComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11888769942366669625##
                   9849077187786244527##
                   Messages.$trModule
                   Messages.$tc'LoadComand2
                   0#
                   Messages.$tc'LoadComand1) -}
e66e35d80858f8e84c6f35912b527fa0
  $tc'LoadComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
74b53530dd1dfb3f52ea8991a22d3863
  $tc'LoadComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadComand3) -}
24b4e69965201e1b37a4fe1f6e6ae3f5
  $tc'LoadComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadComand"#) -}
4abe45e4362f475e2ee17d23ba7c1d64
  $tc'LoadDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1562105853035622597##
                   6006145284949179879##
                   Messages.$trModule
                   Messages.$tc'LoadDBComand2
                   0#
                   Messages.$tc'LoadDBComand1) -}
0db45404642854b82994845dc935c289
  $tc'LoadDBComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2f42fba6c2d9507c6f7edecc93a48568
  $tc'LoadDBComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoadDBComand3) -}
b4509be8c4dae89aecc16eba8224988f
  $tc'LoadDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadDBComand"#) -}
a6411e79227e48313c2f859b4fc5e731
  $tc'LoopStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4312594143145233596##
                   13106322580179125002##
                   Messages.$trModule
                   Messages.$tc'LoopStatement2
                   0#
                   Messages.$tc'LoopStatement1) -}
11d72f59c75cee4c4b8a2550e043bba6
  $tc'LoopStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d7a0a25228433a40bfdc9debc729f3cc
  $tc'LoopStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'LoopStatement3) -}
e8782b05e146e462236864b3fa8ea87a
  $tc'LoopStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopStatement"#) -}
b72e618b1e5e6bc8cfb73dd5976603c6
  $tc'OperatorExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8795931907502277171##
                   9099809696904752420##
                   Messages.$trModule
                   Messages.$tc'OperatorExpression2
                   0#
                   Messages.$tc'OperatorExpression1) -}
722d522143f57fdfe1f1b6f384984f96
  $tc'OperatorExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3a3874b0881820113430c12bc8aa7129
  $tc'OperatorExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'OperatorExpression3) -}
dbb4d82b7a27891c003887ff31f1dd52
  $tc'OperatorExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OperatorExpression"#) -}
996f7532f26ca3518d4a3a7d4a92bc09
  $tc'Program :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4652199818611812822##
                   12890610116845207942##
                   Messages.$trModule
                   Messages.$tc'Program2
                   0#
                   Messages.$tc'Program1) -}
44feb6fae7dadca26156f59590312e7a
  $tc'Program1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c0f2bc14d8c74f3b4e9e1cb6aba9ef5f
  $tc'Program2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'Program3) -}
6a8b106f7f6fca7479658e203f3570a3
  $tc'Program3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Program"#) -}
a19cc1fde57fb30e68234d243b6e742f
  $tc'PublishComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9442723815828672395##
                   2788195154044865449##
                   Messages.$trModule
                   Messages.$tc'PublishComand2
                   0#
                   Messages.$tc'PublishComand1) -}
a38f0f5b4ef129d7c01d377ef1950962
  $tc'PublishComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
67b1a2fe79418f313cb68f6d4804cce8
  $tc'PublishComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishComand3) -}
094202c613b4d360ca8f28219fa3dbe3
  $tc'PublishComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishComand"#) -}
bd5d5db3fa49bb1dca295523d0080abc
  $tc'PublishDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16498739103595707067##
                   13652544296100824538##
                   Messages.$trModule
                   Messages.$tc'PublishDBComand2
                   0#
                   Messages.$tc'PublishDBComand1) -}
df867fcf8c987e136bbe902eeb30c39b
  $tc'PublishDBComand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
de883584603dc25be7fc7dba192044b3
  $tc'PublishDBComand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'PublishDBComand3) -}
226c84d7bb22ee8d07b3e0bc80243e76
  $tc'PublishDBComand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishDBComand"#) -}
da041382aa8c618f4e7b655df5e4d086
  $tc'RegisterWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17392771043272067639##
                   10634460639151529427##
                   Messages.$trModule
                   Messages.$tc'RegisterWorker2
                   0#
                   Messages.$tc'RegisterWorker1) -}
ce2d1590ae548bb97972459e3c4df069
  $tc'RegisterWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
7db0069e631fdb1147109e4136e82617
  $tc'RegisterWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'RegisterWorker3) -}
8f7dc6e31edf3f8cafa31a000391da93
  $tc'RegisterWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RegisterWorker"#) -}
71de4d80e39ec68b637f8f0af1468dff
  $tc'ReturnStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14624313831637488474##
                   8267049358052049541##
                   Messages.$trModule
                   Messages.$tc'ReturnStatement2
                   0#
                   Messages.$tc'ReturnStatement1) -}
d4e26a17cdc8f937560d747123f08d68
  $tc'ReturnStatement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
41db1709508a645e0134e0c76cf6949d
  $tc'ReturnStatement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'ReturnStatement3) -}
d4aa82573eeca6b74e887a24c1b4c23c
  $tc'ReturnStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReturnStatement"#) -}
b90fd89856f6812654097e08d2e51b56
  $tc'StringConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12766263534609690788##
                   6326835945181676001##
                   Messages.$trModule
                   Messages.$tc'StringConstant2
                   0#
                   Messages.$tc'StringConstant1) -}
ee565c44599e9fb77df4de86971d3656
  $tc'StringConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5ecf5210856effe66c1f89fbf5699fe3
  $tc'StringConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'StringConstant3) -}
b09fc4064be117e4ca27a121b90dd754
  $tc'StringConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringConstant"#) -}
6431d186499085f3575db4a541799733
  $tc'StringType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8387269208176132149##
                   15175384062853704323##
                   Messages.$trModule
                   Messages.$tc'StringType1
                   0#
                   Messages.$tc'BoolType1) -}
e4041eda11d3c0638b4b987aae7c9fbf
  $tc'StringType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'StringType2) -}
c1b19e4e6849b5a44999cd43c21867e9
  $tc'StringType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringType"#) -}
c655099d0aeac3bafc6a37c6e5aa4eb1
  $tc'UnaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   890364613643929774##
                   3260254388532686944##
                   Messages.$trModule
                   Messages.$tc'UnaryOperator2
                   0#
                   Messages.$tc'UnaryOperator1) -}
e10f54dba1ae70ed500ffa94504f9905
  $tc'UnaryOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
905dae57885e0920e4d86bac197c2a5c
  $tc'UnaryOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'UnaryOperator3) -}
575be106d767fc4489a680d0cf45f4f1
  $tc'UnaryOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryOperator"#) -}
c8eff6ad452d615ae0fae278e9b4eb27
  $tc'VariableExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14722793576908233950##
                   3302926620668294063##
                   Messages.$trModule
                   Messages.$tc'VariableExpression2
                   0#
                   Messages.$tc'VariableExpression1) -}
472b1f2e02baeccd968ad9501cf953ee
  $tc'VariableExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1927ffbfe422c9d97f39a201212d9db8
  $tc'VariableExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'VariableExpression3) -}
f7b90a0c72670050a7ea79160c0c115b
  $tc'VariableExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VariableExpression"#) -}
5eba315bfb5796ff74ca4503404c6343
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16969330772737453773##
                   13311321951272830540##
                   Messages.$trModule
                   Messages.$tc'While2
                   0#
                   Messages.$tc'While1) -}
9e7744296ebe515f84624b8f7b7aa60e
  $tc'While1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
385ae3f835e45c6120251f453b4caec5
  $tc'While2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tc'While3) -}
d1a350bf2da00cb5e28c457825fe6f78
  $tc'While3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'While"#) -}
e69eda0962d16affaa7157c25efffe60
  $tcAssignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17283351716675793878##
                   9487503693539289228##
                   Messages.$trModule
                   Messages.$tcAssignment1
                   0#
                   GHC.Types.krep$*) -}
f584ff48f9152712a8c9970831a61957
  $tcAssignment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcAssignment2) -}
b5504c374de39eccdb99e4c8541e1db3
  $tcAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assignment"#) -}
e7636b2ea1400bd07bb7a1f4ec9b4c03
  $tcConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10808482676851540286##
                   5239597118669574258##
                   Messages.$trModule
                   Messages.$tcConstant1
                   0#
                   GHC.Types.krep$*) -}
f0c49c3124ec0e0ec437f15573b2bbf8
  $tcConstant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcConstant2) -}
d92fa483ed5af60dfe758a9007e2410b
  $tcConstant2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Constant"#) -}
996fc88984a0986c4a0f9d0d983d8a1a
  $tcDBComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12688464709268643757##
                   16718276508694053070##
                   Messages.$trModule
                   Messages.$tcDBComand1
                   0#
                   GHC.Types.krep$*) -}
1da066c38dd6e9a421d1a9b47147be63
  $tcDBComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcDBComand2) -}
d459729d6ed714d600fb963c1cfef00d
  $tcDBComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DBComand"#) -}
2d0faf685ef7b09ceafa34d474eed9f1
  $tcExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2843492482335781664##
                   2409508504985515280##
                   Messages.$trModule
                   Messages.$tcExpression1
                   0#
                   GHC.Types.krep$*) -}
5f53158b32fe7b6142c9c2d76671d891
  $tcExpression1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcExpression2) -}
2461074535c0ed8cd85a53798c99286b
  $tcExpression2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expression"#) -}
1cb6dfca9e079b6dd96ee782759cf923
  $tcIfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1292444558638832726##
                   15013214518900153443##
                   Messages.$trModule
                   Messages.$tcIfThenElse1
                   0#
                   GHC.Types.krep$*) -}
4fa81a2ebb49e591b1a19269ac1d7d9d
  $tcIfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcIfThenElse2) -}
76c1f2e6252edea7a0ff9e1d7808de57
  $tcIfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IfThenElse"#) -}
55b17db31d36511ca347a5be2eb4b98a
  $tcInvocation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1226848866236251882##
                   83268245422126269##
                   Messages.$trModule
                   Messages.$tcInvocation1
                   0#
                   GHC.Types.krep$*) -}
6b6ab10f182f3b7c1863e67c6e1f1fcc
  $tcInvocation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcInvocation2) -}
40de2258219dee4dc721c78a6630f1aa
  $tcInvocation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invocation"#) -}
ef1bab662c09c75bb1e93170a3be6adf
  $tcLambdaDef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10825394006669854740##
                   13237939384097653756##
                   Messages.$trModule
                   Messages.$tcLambdaDef1
                   0#
                   GHC.Types.krep$*) -}
1a107f018e1c72fb02f7dc7fcdd4ce52
  $tcLambdaDef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLambdaDef2) -}
2760077a1019bb82f21ac407613e26c5
  $tcLambdaDef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaDef"#) -}
812514bd0c71afda83f6d2114dec8930
  $tcLoadComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2462970966509167959##
                   6966666837153280083##
                   Messages.$trModule
                   Messages.$tcLoadComand1
                   0#
                   GHC.Types.krep$*) -}
cb907a173c630401dc9cd13db16b2603
  $tcLoadComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLoadComand2) -}
65cb477679f511216fb85e4266fa0407
  $tcLoadComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadComand"#) -}
6ebd5321c0a3e9b28a795018f205445f
  $tcLoop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4888779985850861372##
                   16905332213879918570##
                   Messages.$trModule
                   Messages.$tcLoop1
                   0#
                   GHC.Types.krep$*) -}
233ec8a073636d79b3b066903562266d
  $tcLoop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcLoop2) -}
6a9b83b29c4594c3c4abfc4e0838baf1
  $tcLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Loop"#) -}
9ded1d73f4aaa5095a63e2c32f3a77b9
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8178125097586712788##
                   11684541261022017653##
                   Messages.$trModule
                   Messages.$tcMessage1
                   0#
                   GHC.Types.krep$*) -}
d78454c6ca30600db6581c8a4330b8c4
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcMessage2) -}
4b6d38e61a2ea74f2d1352a9c9450288
  $tcMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Message"#) -}
69ce7d4b70e86b66f45789d6997a8e70
  $tcOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7650389837554492841##
                   6420175955628083328##
                   Messages.$trModule
                   Messages.$tcOperator1
                   0#
                   GHC.Types.krep$*) -}
4de4f8d925ac28cf4331d2baed1bbd71
  $tcOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcOperator2) -}
750a5dd19dc0104f4fa8eb6edeb19830
  $tcOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Operator"#) -}
c71abeae4caa730d526ea91264b6c5d1
  $tcOperatorType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7798907205213454503##
                   3816330406752315690##
                   Messages.$trModule
                   Messages.$tcOperatorType1
                   0#
                   GHC.Types.krep$*) -}
7bfa6b4001777617319a44a1af040c17
  $tcOperatorType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcOperatorType2) -}
2934a5f671b4832885c14c0e13675dce
  $tcOperatorType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OperatorType"#) -}
6cd03f766d33a41174d0b443a8580508
  $tcProgram :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4933971810889137007##
                   2149352505030987405##
                   Messages.$trModule
                   Messages.$tcProgram1
                   0#
                   GHC.Types.krep$*) -}
829074f28f79254a58ee6aea1a0792d4
  $tcProgram1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcProgram2) -}
2b3d5f55ef6b22bde862330064ad8f91
  $tcProgram2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program"#) -}
cd52c982dae5bc39a13b80477b9f3412
  $tcPublishComand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15942804998329466707##
                   1632106194722982090##
                   Messages.$trModule
                   Messages.$tcPublishComand1
                   0#
                   GHC.Types.krep$*) -}
2cad1a7fd27b9a79f09ef7e2b83433ba
  $tcPublishComand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcPublishComand2) -}
4714b0ab676c1c515e38377a1d26832e
  $tcPublishComand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishComand"#) -}
2c2f2c8fc863fe8dfca898e947f0258f
  $tcReturnStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   58455233557881253##
                   8518251826120375116##
                   Messages.$trModule
                   Messages.$tcReturnStatement1
                   0#
                   GHC.Types.krep$*) -}
a72a295e5fc11af5dc8209fed2b35d7e
  $tcReturnStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcReturnStatement2) -}
9df3b7e12b111d30fa9eddbca79736e4
  $tcReturnStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnStatement"#) -}
030574e81e4910607fdaf3f67a28a2db
  $tcStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3662734540766966541##
                   6723853254781839716##
                   Messages.$trModule
                   Messages.$tcStatement1
                   0#
                   GHC.Types.krep$*) -}
9acb75810a2acaf4cd0d0d8d7e0910e9
  $tcStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$tcStatement2) -}
fab6da91d2a3265035e65b425ce1c22e
  $tcStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Statement"#) -}
5d87b944fc4fb22dd9c9ea832427e16f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Messages.$trModule3
                   Messages.$trModule1) -}
0c2e871d73e01d4471d2da0c3918e831
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$trModule2) -}
5f68f2cf51ba9dbbf6b78a49a335740d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Messages"#) -}
e58f1cc589b79b0e16a3d23f65ad920c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Messages.$trModule4) -}
87a8a39d90521c4e4b9e9dd8fb33e81d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("client-0.1.0.0-Fc21seRkY0DLkZZS0K7KYg"#) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Assignment r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Assignment r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       w i'1 (Messages.Assignment a1 a2)) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Expression r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget10 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.LoadComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.LoadComand r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$s$cget2
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: GHC.Base.String)[OneShot] ->
                       w i'1 (Messages.LoadComand a1 a2)) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget11 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Loop r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Loop r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget11
                      @ Messages.Statement
                      Messages.$fBinaryStatement
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [Messages.Statement])[OneShot] ->
                       w i'1 (Messages.While a1 a2)) })) -}
4e3dd64e852327acd3a6ab25636e6494
  $w$cget12 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Message r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget13 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Operator r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
cbf50271c93c7db9856cf221ecfac16f
  $w$cget14 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.OperatorType r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.OperatorType r) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww3 1#) of wild1 {
                   GHC.Types.False
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt1 dt2 dt3 dt4 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 dt3)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt2
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild2 {
                           DEFAULT
                           -> w (Data.ByteString.Internal.PS
                                   dt1
                                   dt2
                                   (GHC.Prim.+# dt3 1#)
                                   (GHC.Prim.-# dt4 1#))
                                Messages.BoolType
                           0##
                           -> w (Data.ByteString.Internal.PS
                                   dt1
                                   dt2
                                   (GHC.Prim.+# dt3 1#)
                                   (GHC.Prim.-# dt4 1#))
                                Messages.IntType
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt1
                                   dt2
                                   (GHC.Prim.+# dt3 1#)
                                   (GHC.Prim.-# dt4 1#))
                                Messages.StringType } } } })
                   GHC.Types.True
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.BoolType
                        0##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.IntType
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Messages.StringType } } } }) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Constant r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Constant r) ->
                 let {
                   lvl3 :: Data.ByteString.Internal.ByteString
                           -> GHC.Base.String -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Base.String)[OneShot] ->
                     w i' (Messages.StringConstant a1)
                 } in
                 let {
                   lvl4 :: Data.ByteString.Internal.ByteString
                           -> GHC.Types.Int -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Types.Int)[OneShot] ->
                     w i' (Messages.IntConstant a1)
                 } in
                 let {
                   lvl5 :: Data.ByteString.Internal.ByteString
                           -> GHC.Types.Bool -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Types.Bool)[OneShot] ->
                     w i' (Messages.BoolConstant a1)
                 } in
                 let {
                   $wks :: GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Word#
                           -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><S,1*U>,
                        Inline: [0] -}
                   = \ (ww4 :: GHC.Prim.Addr#)
                       (ww5 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (ww6 :: GHC.Prim.Int#)[OneShot]
                       (ww7 :: GHC.Prim.Int#)[OneShot]
                       (ww8 :: GHC.Prim.Word#)[OneShot] ->
                     case ww8 of wild {
                       DEFAULT -> Data.Binary.Class.$w$cget @ r ww4 ww5 ww6 ww7 lvl5
                       0## -> Data.Binary.Class.$w$cget3 @ r ww4 ww5 ww6 ww7 lvl4
                       1## -> Data.Binary.Class.$w$s$cget2 @ r ww4 ww5 ww6 ww7 lvl3 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww3 1#) of wild1 {
                   GHC.Types.False
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt1 dt2 dt3 dt4 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 dt3)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt2
                                ipv of s' { DEFAULT ->
                         $wks dt1 dt2 (GHC.Prim.+# dt3 1#) (GHC.Prim.-# dt4 1#) ipv1 } } })
                   GHC.Types.True
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#)
                        ipv1 } } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.DBComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.DBComand r) ->
                 let {
                   lvl3 :: Data.ByteString.Internal.ByteString
                           -> Messages.PublishComand -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Messages.PublishComand)[OneShot] ->
                     w i' (Messages.PublishDBComand a1)
                 } in
                 let {
                   lvl4 :: Data.ByteString.Internal.ByteString
                           -> Messages.Expression -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Messages.Expression)[OneShot] ->
                     case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                     Data.Binary.Class.$w$s$cget2
                       @ r
                       ww5
                       ww6
                       ww7
                       ww8
                       (\ (i'1 :: Data.ByteString.Internal.ByteString)
                          (a2 :: GHC.Base.String)[OneShot] ->
                        w i'1 (Messages.LoadDBComand (Messages.LoadComand a1 a2))) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww3 1#) of wild1 {
                   GHC.Types.False
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Messages.$fBinaryConstant7
                        Messages.$fBinaryConstant6
                        Messages.$fBinaryConstant5
                        Messages.$fBinaryConstant2
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt1 dt2 dt3 dt4 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 dt3)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt2
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild2 {
                           DEFAULT
                           -> Messages.$w$cget1
                                @ r
                                dt1
                                dt2
                                (GHC.Prim.+# dt3 1#)
                                (GHC.Prim.-# dt4 1#)
                                lvl4
                           0##
                           -> Messages.$w$cget4
                                @ r
                                dt1
                                dt2
                                (GHC.Prim.+# dt3 1#)
                                (GHC.Prim.-# dt4 1#)
                                lvl3 } } } })
                   GHC.Types.True
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> Messages.$w$cget1
                             @ r
                             ww
                             ww1
                             (GHC.Prim.+# ww2 1#)
                             (GHC.Prim.-# ww3 1#)
                             lvl4
                        0##
                        -> Messages.$w$cget4
                             @ r
                             ww
                             ww1
                             (GHC.Prim.+# ww2 1#)
                             (GHC.Prim.-# ww3 1#)
                             lvl3 } } } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.PublishComand r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.PublishComand r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Data.Binary.Class.$w$cget3
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a3 :: GHC.Types.Int)[OneShot] ->
                          w i'2 (Messages.PublishComand a1 a2 a3)) }) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.IfThenElse r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.IfThenElse r) ->
                 Messages.$w$cget1
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Messages.Expression)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Messages.$w$cget1
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a3 :: Messages.Expression)[OneShot] ->
                          w i'2 (Messages.IfThenElse a1 a2 a3)) }) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget6 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Invocation r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Invocation r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget11
                      @ Messages.Expression
                      Messages.$fBinaryExpression
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [Messages.Expression])[OneShot] ->
                       w i'1 (Messages.Invocation a1 a2)) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget7 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.LambdaDef r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.LambdaDef r) ->
                 Data.Binary.Class.$w$cget11
                   @ [GHC.Types.Char]
                   Data.Binary.Class.$fBinaryVersion_$s$fBinary[]
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [GHC.Base.String])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget8
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Program)[OneShot] ->
                       w i'1 (Messages.LambdaDef a1 a2)) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget8 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Program r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Messages.Program r) ->
                 Data.Binary.Class.$w$cget11
                   @ Messages.Statement
                   Messages.$fBinaryStatement
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Messages.Statement])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Messages.$w$cget1
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: Messages.Expression)[OneShot] ->
                       w i'1 (Messages.Program a1 (Messages.ReturnStatement a2))) })) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cget9 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Messages.Statement r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput ::
    GHC.Base.String
    -> Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Messages.Expression) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case Messages.$w$cput1 ww1 of ww2 { (#,#) ww3 ww4 ->
                     (Data.Binary.Put.PairS @ () ww3 ww4)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput1 ::
    Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput10 ::
    Messages.Statement
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput11 ::
    Messages.Expression
    -> [Messages.Statement]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: [Messages.Statement]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Statement
                                ww1
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryLoop_go ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (let {
                          x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                        } in
                        let {
                          lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.ByteString.Builder.Internal.BuildSignal r #)
                            {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                          = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                            case x of wild1 { GHC.Int.I64# x# ->
                            let {
                              w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                            } in
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt1
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                   eta of s2 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 1#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                   s2 of s1 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 2#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                   s1 of s3 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 3#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                   s3 of s4 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 4#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                   s4 of s5 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 5#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                   s5 of s6 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 6#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                   s6 of s7 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 7#)
                                   0#
                                   (GHC.Prim.narrow8Word# w1)
                                   s7 of s8 { DEFAULT ->
                            (x2
                               (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt1 8#)
                                  dt2))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s8 } } } } } } } } } }
                        } in
                        (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 8#) of wild2 {
                           GHC.Types.False
                           -> case x of wild1 { GHC.Int.I64# x# ->
                              let {
                                w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                     eta1 of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s7 of s8 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 8#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } }
                           GHC.Types.True
                           -> (# eta1,
                                 Data.ByteString.Builder.Internal.BufferFull
                                   @ r
                                   8#
                                   dt1
                                   lvl3
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) #) } })
                          `cast`
                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
4e3dd64e852327acd3a6ab25636e6494
  $w$cput12 ::
    Messages.Message
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput13 ::
    Messages.Operator
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $w$cput2 ::
    Messages.Constant
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.Constant) ->
                 case w of wild {
                   Messages.IntConstant i
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cput9 i of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 1#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 1#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt1
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt1 1#)
                                      dt2))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             GHC.Types.True
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt1
                                     lvl3
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.StringConstant s
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cputList s of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 1#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 1#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt1
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt1 1#)
                                      dt2))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             GHC.Types.True
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt1
                                     lvl3
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.BoolConstant b
                   -> let {
                        k :: Data.Binary.Put.PairS ()
                        = case Data.Binary.Class.$w$cput b of ww { (#,#) ww1 ww2 ->
                          Data.Binary.Put.PairS @ () ww1 ww2 }
                      } in
                      (# case k of wild1 { Data.Binary.Put.PairS b1 w' -> b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     2##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 1#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 1#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt1
                                       0#
                                       2##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt1 1#)
                                      dt2))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             GHC.Types.True
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt1
                                     lvl3
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput3 ::
    Messages.DBComand
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.DBComand) ->
                 case w of wild {
                   Messages.PublishDBComand pc
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case pc of ww { Messages.PublishComand ww1 ww2 ww3 ->
                          case Messages.$w$cput5 ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                          (Data.Binary.Put.PairS @ () ww5 ww6)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 1#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 1#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt1
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt1 1#)
                                      dt2))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             GHC.Types.True
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt1
                                     lvl3
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Messages.LoadDBComand lc
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case lc of ww { Messages.LoadComand ww1 ww2 ->
                          case Messages.$w$cput4 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                          (Data.Binary.Put.PairS @ () ww4 ww5)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 1#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 1#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt1
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt1 1#)
                                      dt2))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             GHC.Types.True
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt1
                                     lvl3
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput4 ::
    Messages.Expression
    -> GHC.Base.String
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: GHC.Base.String) ->
                 let {
                   k :: Data.Binary.Put.PairS ()
                   = case Data.Binary.Class.$w$cputList ww1 of ww2 { (#,#) ww3 ww4 ->
                     Data.Binary.Put.PairS @ () ww3 ww4 }
                 } in
                 (# case k of wild { Data.Binary.Put.PairS b1 w' -> b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput5 ::
    Messages.Expression
    -> Messages.Expression
    -> GHC.Types.Int
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: Messages.Expression)
                   (ww2 :: GHC.Types.Int) ->
                 let {
                   k :: Data.Binary.Put.PairS ()
                   = case Data.Binary.Class.$w$cput9 ww2 of ww3 { (#,#) ww4 ww5 ->
                     Data.Binary.Put.PairS @ () ww4 ww5 }
                 } in
                 (# case k of wild { Data.Binary.Put.PairS b1 w' -> b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f21 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (f21
                          (case k of wild { Data.Binary.Put.PairS b1 w' ->
                           w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                             x })))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput6 ::
    Messages.Expression
    -> Messages.Expression
    -> Messages.Expression
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Messages.Expression)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case Messages.$w$cput1 ww2 of ww3 { (#,#) ww4 ww5 ->
                     (Data.Binary.Put.PairS @ () ww4 ww5)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f21 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Messages.$w$cput1 ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (f21
                          (case k `cast`
                                (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                           w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                             x })))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput7 ::
    GHC.Base.String
    -> [Messages.Expression]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [Messages.Expression]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList ww of ww2 { (#,#) ww3 ww4 ->
                         ww4 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Expression
                                ww1
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryInvocation_go ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (let {
                          x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                        } in
                        let {
                          lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.ByteString.Builder.Internal.BuildSignal r #)
                            {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                          = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                            case x of wild1 { GHC.Int.I64# x# ->
                            let {
                              w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                            } in
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt1
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                   eta of s2 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 1#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                   s2 of s1 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 2#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                   s1 of s3 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 3#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                   s3 of s4 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 4#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                   s4 of s5 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 5#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                   s5 of s6 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 6#)
                                   0#
                                   (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                   s6 of s7 { DEFAULT ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   (GHC.Prim.plusAddr# dt1 7#)
                                   0#
                                   (GHC.Prim.narrow8Word# w1)
                                   s7 of s8 { DEFAULT ->
                            (x2
                               (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt1 8#)
                                  dt2))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s8 } } } } } } } } } }
                        } in
                        (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 8#) of wild2 {
                           GHC.Types.False
                           -> case x of wild1 { GHC.Int.I64# x# ->
                              let {
                                w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt1
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                     eta1 of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt1 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s7 of s8 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt1 8#)
                                    dt2))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } }
                           GHC.Types.True
                           -> (# eta1,
                                 Data.ByteString.Builder.Internal.BufferFull
                                   @ r
                                   8#
                                   dt1
                                   lvl3
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) #) } })
                          `cast`
                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput8 ::
    [GHC.Base.String]
    -> Messages.Program
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.String])
                   (ww1 :: Messages.Program) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case ww1 of ww2 { Messages.Program ww3 ww4 ->
                     case Messages.$w$cput9 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                     (Data.Binary.Put.PairS @ () ww6 ww7)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f20 :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.$fBinaryVersion_$s$cputList ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w ->
                         w `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f20
                       (case k `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                        w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cput9 ::
    [Messages.Statement]
    -> Messages.ReturnStatement
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ (ww :: [Messages.Statement])
                   (ww1 :: Messages.ReturnStatement) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case ww1 of wild { Messages.ReturnStatement e ->
                     case Messages.$w$cput1 e of ww2 { (#,#) ww3 ww4 ->
                     (Data.Binary.Put.PairS @ () ww3 ww4)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc
                                @ Messages.Statement
                                ww
                                0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Messages.$fBinaryLambdaDef_go ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x2 :: Data.ByteString.Builder.Internal.BuildStep r
                       = g (case k `cast`
                                 (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                            w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x1 })
                     } in
                     let {
                       lvl3 :: Data.ByteString.Builder.Internal.BufferRange
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                         case x of wild1 { GHC.Int.I64# x# ->
                         let {
                           w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                         } in
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                dt1
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                eta of s2 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 1#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                s2 of s1 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 2#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                s1 of s3 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 3#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                s3 of s4 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 4#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                s4 of s5 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 5#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                s5 of s6 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 6#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                s6 of s7 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt1 7#)
                                0#
                                (GHC.Prim.narrow8Word# w1)
                                s7 of s8 { DEFAULT ->
                         (x2
                            (Data.ByteString.Builder.Internal.BufferRange
                               (GHC.Prim.plusAddr# dt1 8#)
                               dt2))
                           `cast`
                         (GHC.Types.N:IO[0]
                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                           s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# (GHC.Prim.minusAddr# dt2 dt1) 8#) of wild2 {
                        GHC.Types.False
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt1
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt1 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           (x2
                              (Data.ByteString.Builder.Internal.BufferRange
                                 (GHC.Prim.plusAddr# dt1 8#)
                                 dt2))
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                             s8 } } } } } } } } }
                        GHC.Types.True
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt1
                                lvl3
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Messages.Expression) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowAssignment2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowAssignment2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec10 ::
    GHC.Prim.Int# -> Messages.Statement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec11 ::
    GHC.Prim.Int# -> Messages.Expression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: Messages.Expression) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Messages.$fShowLambdaDef4 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Messages.$fShowLambdaDef4
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Messages.Expression -> [Messages.Statement] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: [Messages.Statement]) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLoop2
                       (f20
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of wild {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                                : x1 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (Messages.$w$cshowsPrec10
                                        0#
                                        x1
                                        (let {
                                           lvl20 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                         } in
                                         letrec {
                                           showl :: [Messages.Statement] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [Messages.Statement]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl20
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (Messages.$w$cshowsPrec10 0# y (showl ys)) }
                                         } in
                                         showl xs)) })))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec13 ::
    GHC.Prim.Int# -> Messages.Operator -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Messages.Operator) ->
                 case w of wild {
                   Messages.UnaryOperator b1 b2 b3
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b3
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowOperator9
                            (let {
                               eta :: GHC.Base.String
                               = GHC.Show.showLitString
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                             } in
                             case b1 of wild1 {
                               Messages.IntType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator7
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.StringType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator5
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.BoolType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }
                   Messages.BinaryOperator b1 b2 b3 b4
                   -> let {
                        f20 :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b3
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Messages.$w$cshowsPrec1 11# b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            Messages.$fShowOperator2
                            (let {
                               eta :: GHC.Base.String
                               = GHC.Show.showLitString
                                   b2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (f20
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (g x)))))
                             } in
                             case b1 of wild1 {
                               Messages.IntType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator7
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.StringType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator5
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))
                               Messages.BoolType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Messages.$fShowOperator3
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) } }) -}
cbf50271c93c7db9856cf221ecfac16f
  $w$cshowsPrec14 ::
    Messages.OperatorType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Messages.OperatorType)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.IntType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator7 w1
                   Messages.StringType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator5 w1
                   Messages.BoolType
                   -> GHC.Base.++ @ GHC.Types.Char Messages.$fShowOperator3 w1 }) -}
d2316ed04fd2c6d6cba01f4954e3c4ab
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Messages.Constant -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Messages.Constant)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Messages.IntConstant b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant4
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant4
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Messages.StringConstant b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   Messages.BoolConstant b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Messages.$fShowConstant2
                             (case b1 of wild2 {
                                GHC.Types.False
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool3 w1
                                GHC.Types.True
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool1 w1 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Messages.$fShowConstant2
                                (case b1 of wild2 {
                                   GHC.Types.False
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool3
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                                   GHC.Types.True
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) })) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Messages.DBComand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Messages.DBComand) ->
                 case w of wild {
                   Messages.PublishDBComand b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Messages.PublishComand ww2 ww3 ww4 ->
                          Messages.$w$cshowsPrec5 11# ww2 ww3 ww4 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand5 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowDBComand5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Messages.LoadDBComand b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Messages.LoadComand ww2 ww3 ->
                          Messages.$w$cshowsPrec4 11# ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Messages.$fShowDBComand2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Messages.Expression -> GHC.Base.String -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: GHC.Base.String) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowDBComand4
                        (f20
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Show.showLitString
                                    ww2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowDBComand4
                           (f20
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Show.showLitString
                                       ww2
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)3
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Messages.Expression
    -> Messages.Expression
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   f21 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     f20
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f21
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                 case GHC.Show.$wshowSignedInt 11# ww5 x of ww6 { (#,#) ww7 ww8 ->
                                 GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Messages.$fShowDBComand7 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Messages.$fShowDBComand7
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Messages.Expression
    -> Messages.Expression
    -> Messages.Expression
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Messages.Expression)
                   (ww2 :: Messages.Expression)
                   (ww3 :: Messages.Expression) ->
                 let {
                   f20 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   f21 :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Messages.$w$cshowsPrec1 11# ww3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Messages.$fShowIfThenElse2
                        (f20
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (f21 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Messages.$fShowIfThenElse2
                           (f20
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (f21
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (g (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             x))))))) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> [Messages.Expression]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: [Messages.Expression])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowInvocation2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of wild {
                                      [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                                      : x1 xs
                                      -> GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__3
                                           (Messages.$w$cshowsPrec1
                                              0#
                                              x1
                                              (let {
                                                 lvl20 :: [GHC.Types.Char]
                                                 = GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.showList__2
                                                     x
                                               } in
                                               letrec {
                                                 showl :: [Messages.Expression] -> GHC.Base.String
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ (ds2 :: [Messages.Expression]) ->
                                                   case ds2 of wild1 {
                                                     [] -> lvl20
                                                     : y ys
                                                     -> GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.showList__1
                                                          (Messages.$w$cshowsPrec1
                                                             0#
                                                             y
                                                             (showl ys)) }
                                               } in
                                               showl xs)) })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> [GHC.Base.String] -> Messages.Program -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U,1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [GHC.Base.String])
                   (ww2 :: Messages.Program) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Messages.Program ww4 ww5 ->
                     Messages.$w$cshowsPrec9 11# ww4 ww5 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLambdaDef2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.$fShow(,)3
                                  (GHC.Show.showLitString
                                     x1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (let {
                                           lvl20 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                         } in
                                         letrec {
                                           showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [[GHC.Types.Char]]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl20
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)3
                                                       (GHC.Show.showLitString
                                                          y
                                                          (GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.$fShow(,)3
                                                             (showl ys)))) }
                                         } in
                                         showl xs)))) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> [Messages.Statement]
    -> Messages.ReturnStatement
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Messages.Statement])
                   (ww2 :: Messages.ReturnStatement) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Messages.ReturnStatement ww4 ->
                     Messages.$w$cshowsPrec11 11# ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Messages.$fShowLambdaDef3
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Messages.$w$cshowsPrec10
                                  0#
                                  x1
                                  (let {
                                     lvl20 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Messages.Statement] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Messages.Statement]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl20
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Messages.$w$cshowsPrec10 0# y (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
bcb92065be8343dedf87c747641b0bb1
  $wdt ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1#) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             2##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   GHC.Types.True
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt1
                                   0#
                                   2##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt1 1#)
                                  dt2))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
262cf469f9d172fd1930ecd2e6daaf29
  $wdt1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1#) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   GHC.Types.True
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt1
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt1 1#)
                                  dt2))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
792a44323fa1b3295478d9bad0527a2b
  $wdt2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1#) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   GHC.Types.True
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt1 dt2 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt1
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt1 1#)
                                  dt2))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Assignment = Assignment GHC.Base.String Messages.Expression
d2316ed04fd2c6d6cba01f4954e3c4ab
  data Constant
    = IntConstant GHC.Types.Int
    | StringConstant GHC.Base.String
    | BoolConstant GHC.Types.Bool
1fb7eccf49575c884e0c2c1e85d7b3b7
  data DBComand
    = PublishDBComand Messages.PublishComand
    | LoadDBComand Messages.LoadComand
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Expression
    = InvocationExpression Messages.Invocation
    | ConstantExpression Messages.Constant
    | OperatorExpression Messages.Operator
    | IfThenElseExpression Messages.IfThenElse
    | LambdaDefExpression Messages.LambdaDef
    | BracesExpression Messages.Expression
    | VariableExpression GHC.Base.String
1fb7eccf49575c884e0c2c1e85d7b3b7
  data IfThenElse
    = IfThenElse Messages.Expression
                 Messages.Expression
                 Messages.Expression
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Invocation = Invocation GHC.Base.String [Messages.Expression]
1fb7eccf49575c884e0c2c1e85d7b3b7
  data LambdaDef = LambdaDef [GHC.Base.String] Messages.Program
1fb7eccf49575c884e0c2c1e85d7b3b7
  data LoadComand = LoadComand Messages.Expression GHC.Base.String
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Loop = While Messages.Expression [Messages.Statement]
4e3dd64e852327acd3a6ab25636e6494
  data Message
    = CompileClientRequest Messages.Program
    | CompileWorkerRequest Network.Transport.ConnectionId
                           Messages.Program
    | CompileWorkerReply Network.Transport.ConnectionId GHC.Base.String
    | CompileClientReply GHC.Base.String
    | CompilationError GHC.Base.String
    | RegisterWorker
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Operator
    = UnaryOperator Messages.OperatorType
                    GHC.Base.String
                    Messages.Expression
    | BinaryOperator Messages.OperatorType
                     GHC.Base.String
                     Messages.Expression
                     Messages.Expression
cbf50271c93c7db9856cf221ecfac16f
  data OperatorType = IntType | StringType | BoolType
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Program
    = Program [Messages.Statement] Messages.ReturnStatement
1fb7eccf49575c884e0c2c1e85d7b3b7
  data PublishComand
    = PublishComand Messages.Expression
                    Messages.Expression
                    GHC.Types.Int
1fb7eccf49575c884e0c2c1e85d7b3b7
  data ReturnStatement = ReturnStatement Messages.Expression
1fb7eccf49575c884e0c2c1e85d7b3b7
  data Statement
    = AssignmentStatement Messages.Assignment
    | LoopStatement Messages.Loop
    | InvocationStatement Messages.Invocation
    | DBComandStatement Messages.DBComand
instance Data.Binary.Class.Binary [Messages.Assignment]
  = Messages.$fBinaryAssignment
instance Data.Binary.Class.Binary [Messages.Constant]
  = Messages.$fBinaryConstant
instance Data.Binary.Class.Binary [Messages.DBComand]
  = Messages.$fBinaryDBComand
instance Data.Binary.Class.Binary [Messages.Expression]
  = Messages.$fBinaryExpression
instance Data.Binary.Class.Binary [Messages.IfThenElse]
  = Messages.$fBinaryIfThenElse
instance Data.Binary.Class.Binary [Messages.Invocation]
  = Messages.$fBinaryInvocation
instance Data.Binary.Class.Binary [Messages.LambdaDef]
  = Messages.$fBinaryLambdaDef
instance Data.Binary.Class.Binary [Messages.LoadComand]
  = Messages.$fBinaryLoadComand
instance Data.Binary.Class.Binary [Messages.Loop]
  = Messages.$fBinaryLoop
instance Data.Binary.Class.Binary [Messages.Message]
  = Messages.$fBinaryMessage
instance Data.Binary.Class.Binary [Messages.Operator]
  = Messages.$fBinaryOperator
instance Data.Binary.Class.Binary [Messages.OperatorType]
  = Messages.$fBinaryOperatorType
instance Data.Binary.Class.Binary [Messages.Program]
  = Messages.$fBinaryProgram
instance Data.Binary.Class.Binary [Messages.PublishComand]
  = Messages.$fBinaryPublishComand
instance Data.Binary.Class.Binary [Messages.ReturnStatement]
  = Messages.$fBinaryReturnStatement
instance Data.Binary.Class.Binary [Messages.Statement]
  = Messages.$fBinaryStatement
instance GHC.Show.Show [Messages.Assignment]
  = Messages.$fShowAssignment
instance GHC.Show.Show [Messages.Constant]
  = Messages.$fShowConstant
instance GHC.Show.Show [Messages.DBComand]
  = Messages.$fShowDBComand
instance GHC.Show.Show [Messages.Expression]
  = Messages.$fShowExpression
instance GHC.Show.Show [Messages.IfThenElse]
  = Messages.$fShowIfThenElse
instance GHC.Show.Show [Messages.Invocation]
  = Messages.$fShowInvocation
instance GHC.Show.Show [Messages.LambdaDef]
  = Messages.$fShowLambdaDef
instance GHC.Show.Show [Messages.LoadComand]
  = Messages.$fShowLoadComand
instance GHC.Show.Show [Messages.Loop] = Messages.$fShowLoop
instance GHC.Show.Show [Messages.Operator]
  = Messages.$fShowOperator
instance GHC.Show.Show [Messages.OperatorType]
  = Messages.$fShowOperatorType
instance GHC.Show.Show [Messages.Program] = Messages.$fShowProgram
instance GHC.Show.Show [Messages.PublishComand]
  = Messages.$fShowPublishComand
instance GHC.Show.Show [Messages.ReturnStatement]
  = Messages.$fShowReturnStatement
instance GHC.Show.Show [Messages.Statement]
  = Messages.$fShowStatement
"SPEC/Messages defaultPutList @ Assignment" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Assignment)
  Data.Binary.Class.defaultPutList @ Messages.Assignment $dBinary
  = Messages.$fBinaryAssignment_$sdefaultPutList
"SPEC/Messages defaultPutList @ Constant" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.Constant)
  Data.Binary.Class.defaultPutList @ Messages.Constant $dBinary
  = Messages.$fBinaryConstant_$sdefaultPutList
"SPEC/Messages defaultPutList @ DBComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.DBComand)
  Data.Binary.Class.defaultPutList @ Messages.DBComand $dBinary
  = Messages.$fBinaryDBComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ Expression" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Expression)
  Data.Binary.Class.defaultPutList @ Messages.Expression $dBinary
  = Messages.$fBinaryExpression_$sdefaultPutList
"SPEC/Messages defaultPutList @ IfThenElse" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.IfThenElse)
  Data.Binary.Class.defaultPutList @ Messages.IfThenElse $dBinary
  = Messages.$fBinaryIfThenElse_$sdefaultPutList
"SPEC/Messages defaultPutList @ Invocation" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.Invocation)
  Data.Binary.Class.defaultPutList @ Messages.Invocation $dBinary
  = Messages.$fBinaryInvocation_$sdefaultPutList
"SPEC/Messages defaultPutList @ LambdaDef" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.LambdaDef)
  Data.Binary.Class.defaultPutList @ Messages.LambdaDef $dBinary
  = Messages.$fBinaryLambdaDef_$sdefaultPutList
"SPEC/Messages defaultPutList @ LoadComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                  Messages.LoadComand)
  Data.Binary.Class.defaultPutList @ Messages.LoadComand $dBinary
  = Messages.$fBinaryLoadComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ Loop" forall ($dBinary :: Data.Binary.Class.Binary
                                                            Messages.Loop)
  Data.Binary.Class.defaultPutList @ Messages.Loop $dBinary
  = Messages.$fBinaryLoop_$sdefaultPutList
"SPEC/Messages defaultPutList @ Message" forall ($dBinary :: Data.Binary.Class.Binary
                                                               Messages.Message)
  Data.Binary.Class.defaultPutList @ Messages.Message $dBinary
  = Messages.$fBinaryMessage_$sdefaultPutList
"SPEC/Messages defaultPutList @ Operator" forall ($dBinary :: Data.Binary.Class.Binary
                                                                Messages.Operator)
  Data.Binary.Class.defaultPutList @ Messages.Operator $dBinary
  = Messages.$fBinaryOperator_$sdefaultPutList
"SPEC/Messages defaultPutList @ OperatorType" forall ($dBinary :: Data.Binary.Class.Binary
                                                                    Messages.OperatorType)
  Data.Binary.Class.defaultPutList @ Messages.OperatorType $dBinary
  = Messages.$fBinaryOperatorType_$sdefaultPutList
"SPEC/Messages defaultPutList @ Program" forall ($dBinary :: Data.Binary.Class.Binary
                                                               Messages.Program)
  Data.Binary.Class.defaultPutList @ Messages.Program $dBinary
  = Messages.$fBinaryProgram_$sdefaultPutList
"SPEC/Messages defaultPutList @ PublishComand" forall ($dBinary :: Data.Binary.Class.Binary
                                                                     Messages.PublishComand)
  Data.Binary.Class.defaultPutList @ Messages.PublishComand $dBinary
  = Messages.$fBinaryPublishComand_$sdefaultPutList
"SPEC/Messages defaultPutList @ ReturnStatement" forall ($dBinary :: Data.Binary.Class.Binary
                                                                       Messages.ReturnStatement)
  Data.Binary.Class.defaultPutList @ Messages.ReturnStatement
                                   $dBinary
  = Messages.$fBinaryReturnStatement_$sdefaultPutList
"SPEC/Messages defaultPutList @ Statement" forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Messages.Statement)
  Data.Binary.Class.defaultPutList @ Messages.Statement $dBinary
  = Messages.$fBinaryStatement_$sdefaultPutList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

