
==================== FINAL INTERFACE ====================
2019-09-26 00:02:49.654728 UTC

interface main:Main 8044
  interface hash: 037a000af0880bd7000b59b5aebfa6cb
  ABI hash: a6dfc3d420d5dd7caf1ef08b2cbcfd99
  export-list hash: 927ea8e53ed244b98c3fab01639faf24
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 265fd745a094338f950d73cc88141259
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.tryConnectToServer
  Main.workerServer
  Main.ServerWorker{Main.ServerWorker}
module dependencies:
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      array-0.5.2.0 base-4.11.1.0 base-orphans-0.7 bifunctors-5.5.3
                      binary-0.8.5.1 bytestring-0.10.8.2 call-stack-0.1.0 comonad-5.0.4
                      containers-0.5.11.0 contravariant-1.4.1 data-accessor-0.2.2.8
                      deepseq-1.4.3.0 distributive-0.5.3 exceptions-0.10.0 free-5.0.2
                      ghc-boot-th-8.4.4 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 kan-extensions-5.2 lens-4.16.1 mtl-2.2.2
                      network-2.6.3.6 network-transport-0.5.2 network-transport-tcp-0.6.0
                      pretty-1.1.3.6 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.4
                      semigroupoids-5.2.2 stm-2.4.5.1 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.1 th-abstraction-0.2.10.0
                      transformers-0.5.5.0 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unordered-containers-0.2.9.0
                      utils-0.1.0.0 vector-0.12.0.2 worker-0.1.0.0
orphans: network-2.6.3.6:Network.Socket
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show stm-2.4.5.1:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         network-transport-0.5.2:Network.Transport
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 06420d98d10ee04b8dda9c0d88032c55
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  network-2.6.3.6:Network.Socket.Internal af2cb1ca411a338f4846b994baabce94
import  -/  network-transport-0.5.2:Network.Transport 18cb17ad2d91e2c94ab38d1745341964
import  -/  utils-0.1.0.0:Messages d092de2cd317fb3a419e83b1cbab3b00
import  -/  utils-0.1.0.0:NetworkUtils b57898109c42e05ce4e6280cb5fbe835
import  -/  worker-0.1.0.0:Lib 3036fc59243c95dc6a5cb093c17c5966
d56ff4f63b86c51a0c4723d8bb2f9d3f
  $tc'ServerWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10891075675921528441##
                   18334341855541358419##
                   Main.$trModule
                   Main.$tc'ServerWorker2
                   0#
                   Main.$tc'ServerWorker1) -}
49f8a8fd5586dc341cfe86ef400da028
  $tc'ServerWorker1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e325d1c0e04c1ee681e4c2ad6c3762ad
  $tc'ServerWorker2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ServerWorker3) -}
8cb975188422299661a070ef2b46a0bf
  $tc'ServerWorker3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ServerWorker"#) -}
9b2ddfc3b80c4eea272f143d0f5a5c32
  $tcServerWorker :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16874197619467562138##
                   4786401238815893186##
                   Main.$trModule
                   Main.$tcServerWorker1
                   0#
                   GHC.Types.krep$*) -}
59b4c03d4f7624481e9114f4ae2763df
  $tcServerWorker1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcServerWorker2) -}
a13bdf8723e855de3e6f79c8955d8691
  $tcServerWorker2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ServerWorker"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ba93b6ac53b67da30b866adfab0b41ad
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    Main.main3)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
b1d4ae938016eb1ffcd6de0ba03dcaec
  $wworkerServer ::
    ([Data.ByteString.Internal.ByteString]
     -> GHC.Types.IO
          (Data.Either.Either
             (Network.Transport.TransportError Network.Transport.SendErrorCode)
             ()))
    -> Network.Transport.EndPoint
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <C(C(S(SL))),C(C1(U(U,A)))><L,U(C(U(U,U)),A,A,A,A,A)><L,U(C(C1(U(U,A))),A)><L,1*U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Inline: [0] -}
8dfde89ad801569fee78dc1bc3b497d3
  data ServerWorker = ServerWorker
2a13d9b516ae73dac35f9489b91143b1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8369507c7df57b70ea403f2b60f68bad
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   [] -> Main.$wfail ipv
                   : serverAddr ds
                   -> case ds of wild1 {
                        [] -> Main.$wfail ipv
                        : dbAddr ds2
                        -> case ds2 of wild2 {
                             [] -> Main.$wfail ipv
                             : port1 ds3
                             -> case ds3 of wild3 {
                                  [] -> Main.$wfail ipv
                                  : port2 ds4
                                  -> case ds4 of wild4 {
                                       []
                                       -> case NetworkUtils.connectToServer1
                                                 serverAddr
                                                 port1
                                                 ipv of ds5 { (#,#) ipv2 ipv3 ->
                                          case ipv3 of wild5 {
                                            Data.Either.Left errMsg
                                            -> GHC.IO.Handle.Text.hPutStr2
                                                 GHC.IO.Handle.FD.stdout
                                                 errMsg
                                                 GHC.Types.True
                                                 ipv2
                                            Data.Either.Right ds6
                                            -> case ds6 of wild6 { (,) masterConn masterEndpoint ->
                                               case NetworkUtils.connectToServer1
                                                      dbAddr
                                                      port2
                                                      ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                                               case ipv5 of wild7 {
                                                 Data.Either.Left errMsg
                                                 -> GHC.IO.Handle.Text.hPutStr2
                                                      GHC.IO.Handle.FD.stdout
                                                      errMsg
                                                      GHC.Types.True
                                                      ipv4
                                                 Data.Either.Right ds8
                                                 -> case ds8 of wild8 { (,) masterConn1 masterEndpoint1 ->
                                                    Main.main2
                                                      masterConn
                                                      masterEndpoint
                                                      masterConn1
                                                      masterEndpoint1
                                                      ipv4 } } } } } }
                                       : ipv2 ipv3 -> Main.$wfail ipv } } } } } }) -}
908e474c5dd2642e3ff1dcc73b969088
  main2 ::
    Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(C(C(S(SL)))L),1*U(C(C1(U(U,A))),A)><L,U(C(U(U,U)),A,A,A,A,A)><L,U(C(C1(U(U,A))),A)><L,1*U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Network.Transport.Connection)
                   (w1 :: Network.Transport.EndPoint)
                   (w2 :: Network.Transport.Connection)
                   (w3 :: Network.Transport.EndPoint)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Transport.Connection ww1 ww2 ->
                 Main.$wworkerServer ww1 w1 w2 w3 w4 }) -}
96749de295b52dac51276abb4ad87959
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
7f6e8556f91dfe918a0c7589bb51cbed
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at app/Main.hs:18:3-36"#) -}
3e6ae273ae69350e6660c35b198078fc
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
0678d5ad3026721c7d6451b3cf03bd02
  tryConnectToServer ::
    GHC.Base.String
    -> GHC.Base.String
    -> (Network.Transport.Connection
        -> Network.Transport.EndPoint -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tryConnectToServer1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Network.Transport.Connection
                       -> Network.Transport.EndPoint -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bca3d913daea9cc3526061606e84dabe
  tryConnectToServer1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> (Network.Transport.Connection
        -> Network.Transport.EndPoint -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: (\ (serverAddr :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (action :: Network.Transport.Connection
                              -> Network.Transport.EndPoint -> GHC.Types.IO ())
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case NetworkUtils.connectToServer1
                        serverAddr
                        port
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left errMsg
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        errMsg
                        GHC.Types.True
                        ipv
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) masterConn masterEndpoint ->
                      (action masterConn masterEndpoint)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv } } }) -}
ff883393189fe1750b2a193cbada26c9
  workerServer ::
    Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> Network.Transport.Connection
    -> Network.Transport.EndPoint
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(C(C(S(SL)))L),1*U(C(C1(U(U,A))),A)><L,U(C(U(U,U)),A,A,A,A,A)><L,U(C(C1(U(U,A))),A)><L,1*U(C(U(U,1*U)),A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (<Network.Transport.Connection>_R
                 ->_R <Network.Transport.EndPoint>_R
                 ->_R <Network.Transport.Connection>_R
                 ->_R <Network.Transport.EndPoint>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

