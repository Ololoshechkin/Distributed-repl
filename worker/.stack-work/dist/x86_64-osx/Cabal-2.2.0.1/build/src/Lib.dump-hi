
==================== FINAL INTERFACE ====================
2019-09-22 15:43:25.399428 UTC

interface worker-0.1.0.0-5j3scUJJaukJBHFJZP9uqU:Lib 8044
  interface hash: 93dca6540b2d4d6b2ed6544383cf4173
  ABI hash: 835f995cc15c92e510f4c2871c42a028
  export-list hash: 6e84e48798572fd5750efa698007115c
  orphan hash: 1ca47f987ef893ba4ab3ae160d35c227
  flag hash: 6a7d7f697c0afe5cb84523118d20465e
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.executeScript
  Lib.DB{Lib.DB load publish}
  Lib.LoadCallback
  Lib.PublishCallback
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      exceptions-0.10.0 ghc-boot-th-8.4.4 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-transport-0.5.2 stm-2.4.5.1 template-haskell-2.13.0.0
                      text-1.2.3.1 transformers-0.5.5.0 utils-0.1.0.0
orphans: hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show stm-2.4.5.1:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         network-transport-0.5.2:Network.Transport
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  exceptions-0.10.0:Control.Monad.Catch a2b5a72c22875ee95949d04e4cf1e33a
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
import  -/  utils-0.1.0.0:Messages d092de2cd317fb3a419e83b1cbab3b00
19a03e686250a3b4cb7dc467a69a4273
  $fApplicativeScriptContext ::
    GHC.Base.Applicative Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fFunctorScriptContext
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeStateT_$cpure
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (Lib.N:ScriptContext[0]) <a>_N)
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeStateT_$c<*>
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a -> b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (\ @ a @ b @ c -> Lib.$fApplicativeScriptContext2 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Internal.Map GHC.Base.String Lib.Value>_N
                                 <GHC.Types.IO>_R
                                 <c>_N) ; Sym (Lib.N:ScriptContext[0]) <c>_N)
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeStateT_$c*>
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (\ @ a @ b -> Lib.$fApplicativeScriptContext1 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R (<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Internal.Map
                                           GHC.Base.String
                                           Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          Lib.Value>_N
                                                                       <GHC.Types.IO>_R
                                                                       <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
89db88e1e4f6959e3bbf004b28b18810
  $fApplicativeScriptContext1 ::
    Control.Monad.Trans.State.Lazy.StateT
      (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT
         (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO b
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U(1*U,1*U))))><L,1*C1(C1(U(U,1*U(A,1*U))))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ a
                   (x :: Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a)
                   (eta :: Control.Monad.Trans.State.Lazy.StateT
                             (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO b)
                   (eta1 :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (x `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Internal.Map GHC.Base.String Lib.Value>_N
                            <GHC.Types.IO>_R
                            <a>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(a, Data.Map.Internal.Map GHC.Base.String Lib.Value)>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Internal.Map GHC.Base.String Lib.Value>_N
                            <GHC.Types.IO>_R
                            <b>_N)
                         (case ipv1 of wild { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(b, Data.Map.Internal.Map GHC.Base.String Lib.Value)>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv1 of wild { (,) a1 s' -> a1 },
                     case ipv3 of wild { (,) x1 s'' -> s'' }) #) } }) -}
49751133c4306f00b3cad9d9110526c1
  $fApplicativeScriptContext2 ::
    (a -> b -> c)
    -> Control.Monad.Trans.State.Lazy.StateT
         (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT
         (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO b
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Types.IO
         (c, Data.Map.Internal.Map GHC.Base.String Lib.Value)
  {- Arity: 4,
     Unfolding: (\ @ c @ b @ a ->
                 Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                   @ GHC.Types.IO
                   @ (Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ a
                   @ b
                   @ c) -}
a248892a3b22fbbf0fc5944608dea022
  $fApplicativeScriptContext_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*U(A,1*U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 (k `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <s>_N <GHC.Types.IO>_R <b>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, s)>_R)
                   ipv })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
d834248e15a25bb0da5efe3729ef5b4f
  $fApplicativeScriptContext_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U(1*C1(U),1*U))))><L,1*C1(C1(U(U,U(1*U,1*U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s GHC.Types.IO (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a -> b>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a -> b, s)>_R)
                        s2 of ds2 { (#,#) ipv ipv1 ->
                 case (ds1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         (case ipv1 of wild { (,) f s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv1 of wild { (,) f s' ->
                     f (case ipv3 of wild1 { (,) x s'' -> x }) },
                     case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
dd80f37c395a58e6a4225a46e7cd34ce
  $fApplicativeScriptContext_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ a
                   (a1 :: a)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s2, (a1, s1) #))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(a, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <a>_N)) -}
84505988b9c58dc074fdf9ea53471446
  $fExceptionCompilationException ::
    GHC.Exception.Exception Lib.CompilationException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.CompilationException
                  Lib.$fExceptionCompilationException4
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Lib.CompilationException>_N)
                  Lib.$fShowCompilationException
                  Lib.$fExceptionCompilationException_$ctoException
                  Lib.$fExceptionCompilationException_$cfromException
                  Lib.$fExceptionCompilationException_$cshow -}
4a20eda7dd04bff5054b9b061c0260cb
  $fExceptionCompilationException1 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e5db0eeeecd196f96f8108600f99790a
  $fExceptionCompilationException2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilationException "#) -}
84505988b9c58dc074fdf9ea53471446
  $fExceptionCompilationException3 ::
    GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ Lib.CompilationException
                   Lib.$fExceptionCompilationException4) -}
84505988b9c58dc074fdf9ea53471446
  $fExceptionCompilationException4 ::
    Data.Typeable.Internal.TypeRep Lib.CompilationException
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ Lib.CompilationException
                        7167319832502079303##
                        2729989076650851816##
                        Lib.$trModule
                        Lib.$fExceptionCompilationException5
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ Lib.CompilationException
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
bfeab98159350811c6628c81f41d21fb
  $fExceptionCompilationException5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Lib.$fExceptionCompilationException6) -}
f3dfbb3b941bdd9dee58475d7e548648
  $fExceptionCompilationException6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilationException"#) -}
84505988b9c58dc074fdf9ea53471446
  $fExceptionCompilationException_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe Lib.CompilationException
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: GHC.Exception.SomeException) ->
                 case ds of wild { GHC.Exception.SomeException e1 $dException1 e2 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e1
                        (GHC.Exception.$p1Exception @ e1 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case Lib.$fExceptionCompilationException3 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Base.Nothing @ Lib.CompilationException
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Base.Nothing @ Lib.CompilationException
                        1#
                        -> (GHC.Base.Just @ e1 e2)
                             `cast`
                           (GHC.Base.Maybe
                              (UnsafeCo representational e1 Lib.CompilationException))_R } } } } }) -}
84505988b9c58dc074fdf9ea53471446
  $fExceptionCompilationException_$cshow ::
    Lib.CompilationException -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.CompilationException) ->
                 case w of ww { Lib.CompilationException ww1 ->
                 Lib.$w$cshow ww1 }) -}
84505988b9c58dc074fdf9ea53471446
  $fExceptionCompilationException_$ctoException ::
    Lib.CompilationException -> GHC.Exception.SomeException
  {- Arity: 1 -}
19a03e686250a3b4cb7dc467a69a4273
  $fFunctorScriptContext :: GHC.Base.Functor Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  (Lib.$fFunctorScriptContext_$s$fFunctorStateT_$cfmap
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (\ @ a @ b -> Lib.$fFunctorScriptContext1 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R (<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Internal.Map
                                           GHC.Base.String
                                           Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          Lib.Value>_N
                                                                       <GHC.Types.IO>_R
                                                                       <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
117e9f7cd215669cd57a6460a05947a3
  $fFunctorScriptContext1 ::
    a
    -> Control.Monad.Trans.State.Lazy.StateT
         (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO b
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U(A,1*U))))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ a
                   (x :: a)
                   (eta :: Control.Monad.Trans.State.Lazy.StateT
                             (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO b)
                   (eta1 :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Internal.Map GHC.Base.String Lib.Value>_N
                            <GHC.Types.IO>_R
                            <b>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(b, Data.Map.Internal.Map GHC.Base.String Lib.Value)>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, (x, case ipv1 of wild { (,) a1 s' -> s' }) #) }) -}
f3a2ae97237d960f9f785396c11741cc
  $fFunctorScriptContext_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U(1*U,1*U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (f (case ipv1 of wild { (,) a1 s' -> a1 }),
                     case ipv1 of wild { (,) a1 s' -> s' }) #) })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
19a03e686250a3b4cb7dc467a69a4273
  $fMonadCatchScriptContext ::
    Control.Monad.Catch.MonadCatch Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fMonadThrowScriptContext
                  Lib.$fMonadCatchScriptContext1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Exception e>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R (<e>_R ->_R Sym (Lib.N:ScriptContext[0]) <a>_N)
                   ->_R (<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Internal.Map
                                           GHC.Base.String
                                           Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          Lib.Value>_N
                                                                       <GHC.Types.IO>_R
                                                                       <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
2087ffa748c6099223b4c5253dc73c7b
  $fMonadCatchScriptContext1 ::
    GHC.Exception.Exception e =>
    Control.Monad.Trans.State.Lazy.StateT
      (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a
    -> (e
        -> Control.Monad.Trans.State.Lazy.StateT
             (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a)
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(U),A)><L,1*C1(C1(U))><L,1*C1(C1(C1(U)))><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Exception e)
                   (eta :: Control.Monad.Trans.State.Lazy.StateT
                             (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a)
                   (eta1 :: e
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 (Data.Map.Internal.Map GHC.Base.String Lib.Value) GHC.Types.IO a)
                   (eta2 :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ (a, Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   @ GHC.Exception.SomeException
                   (eta
                      `cast`
                    (Control.Monad.Trans.State.Lazy.N:StateT[0]
                         <Data.Map.Internal.Map GHC.Base.String Lib.Value>_N
                         <GHC.Types.IO>_R
                         <a>_N)
                      eta2)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(a, Data.Map.Internal.Map GHC.Base.String Lib.Value)>_R)
                   (\ (e1 :: GHC.Exception.SomeException)[OneShot] ->
                    case GHC.Exception.fromException @ e $dException e1 of wild {
                      GHC.Base.Nothing
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.SomeException
                           @ (a, Data.Map.Internal.Map GHC.Base.String Lib.Value)
                           e1
                      GHC.Base.Just e'
                      -> ((eta1 e')
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Internal.Map GHC.Base.String Lib.Value>_N
                               <GHC.Types.IO>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(a, Data.Map.Internal.Map GHC.Base.String Lib.Value)>_R) })
                   eta3) -}
19a03e686250a3b4cb7dc467a69a4273
  $fMonadIOScriptContext ::
    Control.Monad.IO.Class.MonadIO Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fMonadScriptContext
                  Lib.$fMonadIOScriptContext1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R (<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Internal.Map
                                           GHC.Base.String
                                           Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          Lib.Value>_N
                                                                       <GHC.Types.IO>_R
                                                                       <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
41833d2d4628693cc7792cf4d89a24e1
  $fMonadIOScriptContext1 ::
    GHC.Types.IO a
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x :: GHC.Types.IO a)
                   (s1 :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x `cast` (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, (ipv1, s1) #) }) -}
19a03e686250a3b4cb7dc467a69a4273
  $fMonadScriptContext :: GHC.Base.Monad Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fApplicativeScriptContext
                  (Lib.$fMonadScriptContext_$s$fMonadStateT_$c>>=
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (Lib.$fMonadScriptContext_$s$fMonadStateT_$c>>
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  Lib.$fMonadScriptContext1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Internal.Map
                                           GHC.Base.String
                                           Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          Lib.Value>_N
                                                                       <GHC.Types.IO>_R
                                                                       <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N))
                  (Lib.$fMonadScriptContext_$s$fMonadStateT_$cfail
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (Lib.N:ScriptContext[0]) <a>_N) -}
be31bd9d89aa40ab6d508711bb0e74cb
  $fMonadScriptContext1 ::
    a
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: a)
                   (eta1 :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (eta, eta1) #)) -}
377a1f1756347f441e4edf77443cbce0
  $fMonadScriptContext_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*U(A,1*U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 (k `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <s>_N <GHC.Types.IO>_R <b>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, s)>_R)
                   ipv })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
5de719e45c33198589e62982b0bffa7b
  $fMonadScriptContext_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> (a -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U(1*U,1*U))))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 ((k (case ipv1 of wild { (,) a1 s' -> a1 }))
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <s>_N <GHC.Types.IO>_R <b>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, s)>_R)
                   ipv })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
4d52ab0c50b6a0c229dc6035a7e8ebf2
  $fMonadScriptContext_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Magic.noinline
                   @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a1 :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                   @ (a, s)
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GHC.Types.IO>_R <a>_N)) -}
19a03e686250a3b4cb7dc467a69a4273
  $fMonadStateScriptContext ::
    Control.Monad.State.Class.MonadState
      Lib.VariableMap Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.VariableMap
                  @ Lib.ScriptContext
                  Lib.$fMonadScriptContext
                  Lib.$fMonadStateScriptContext1
                    `cast`
                  ((<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <(Data.Map.Internal.Map GHC.Base.String Lib.Value,
                                    Data.Map.Internal.Map
                                      GHC.Base.String
                                      Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                  <Data.Map.Internal.Map
                                                                     GHC.Base.String Lib.Value>_N
                                                                  <GHC.Types.IO>_R
                                                                  <Data.Map.Internal.Map
                                                                     GHC.Base.String
                                                                     Lib.Value>_N) ; Sym (Lib.N:ScriptContext[0]) <Lib.VariableMap>_N))
                  (Lib.$fMonadStateScriptContext_$sput
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (<Data.Map.Internal.Map [GHC.Types.Char] Lib.Value>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <()>_N)
                  (Lib.$fMonadStateScriptContext_$sstate
                     @ (Data.Map.Internal.Map GHC.Base.String Lib.Value))
                    `cast`
                  (forall (a :: <*>_N).
                   <Data.Map.Internal.Map [GHC.Types.Char] Lib.Value
                    -> (a, Data.Map.Internal.Map [GHC.Types.Char] Lib.Value)>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N) -}
a5476164a72a054195c225e42c8ad058
  $fMonadStateScriptContext1 ::
    Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Map.Internal.Map GHC.Base.String Lib.Value,
           Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (x, x) #)) -}
d4a04dee6c2fbf4f0571c16f1ffcba48
  $fMonadStateScriptContext_$sput ::
    s -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   (s1 :: s)
                   (x :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s2, (GHC.Tuple.(), s1) #))
                  `cast`
                (forall (s :: <*>_N).
                 <s>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <((), s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <s>_N <GHC.Types.IO>_R <()>_N)) -}
12a97d70ea11a32e45f3030f2a508bab
  $fMonadStateScriptContext_$sstate ::
    (s -> (a, s))
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ a
                   (f :: s -> (a, s))
                   (x :: s)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s1, f x #))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <s -> (a, s)>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(a, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <a>_N)) -}
19a03e686250a3b4cb7dc467a69a4273
  $fMonadThrowScriptContext ::
    Control.Monad.Catch.MonadThrow Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fMonadScriptContext
                  Lib.$fMonadThrowScriptContext1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Exception e>_R
                   ->_R <e>_R
                   ->_R (<Data.Map.Internal.Map GHC.Base.String Lib.Value>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Internal.Map
                                           GHC.Base.String
                                           Lib.Value)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          Lib.Value>_N
                                                                       <GHC.Types.IO>_R
                                                                       <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
e33db1730f4f7ed2d75fcd5f6cc9dbd5
  $fMonadThrowScriptContext1 ::
    GHC.Exception.Exception e =>
    e
    -> Data.Map.Internal.Map GHC.Base.String Lib.Value
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (4, True, False)
                (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Exception e)
                   (eta1 :: e)
                   (eta :: Data.Map.Internal.Map GHC.Base.String Lib.Value)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ a
                        (GHC.Exception.toException @ e $dException eta1)
                        eta2
                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                           (a, Data.Map.Internal.Map GHC.Base.String Lib.Value) #)
                 of {}) -}
84505988b9c58dc074fdf9ea53471446
  $fShowCompilationException ::
    GHC.Show.Show Lib.CompilationException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.CompilationException
                  Lib.$fShowCompilationException_$cshowsPrec
                  Lib.$fExceptionCompilationException_$cshow
                  Lib.$fShowCompilationException_$cshowList -}
84505988b9c58dc074fdf9ea53471446
  $fShowCompilationException1 ::
    Lib.CompilationException -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Lib.CompilationException)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.CompilationException ww1 ->
                 Lib.$w$cshowsPrec 0# ww1 w1 }) -}
84505988b9c58dc074fdf9ea53471446
  $fShowCompilationException_$cshowList ::
    [Lib.CompilationException] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Lib.CompilationException]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Lib.CompilationException
                   Lib.$fShowCompilationException1
                   ls
                   s) -}
84505988b9c58dc074fdf9ea53471446
  $fShowCompilationException_$cshowsPrec ::
    GHC.Types.Int -> Lib.CompilationException -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.CompilationException)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.CompilationException ww3 ->
                 Lib.$w$cshowsPrec ww1 ww3 w2 } }) -}
9c9cebcdf6da7f121e94bbd12b68868b
  $fShowValue :: GHC.Show.Show Lib.Value
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Value
                  Lib.$fShowValue_$cshowsPrec
                  Lib.$fShowValue_$cshow
                  Lib.$fShowValue_$cshowList -}
9c9cebcdf6da7f121e94bbd12b68868b
  $fShowValue1 :: Lib.Value -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Lib.Value) -> Lib.$w$cshowsPrec1 0# w) -}
ec77713120eb40ffce8f2890083dbdea
  $fShowValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.$fShowValue3) -}
8c7cb142fe19b6f9c75d4853e6f3fcb0
  $fShowValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaValue "#) -}
13522918cd8841ce60d4640efe34ddef
  $fShowValue4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolValue "#) -}
c8df24f32bd6eaff81eaf81a52cc8b2f
  $fShowValue5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringValue "#) -}
4257a01e55e7ab4acc406ef7ab6cbd24
  $fShowValue6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntValue "#) -}
9c9cebcdf6da7f121e94bbd12b68868b
  $fShowValue_$cshow :: Lib.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Lib.Value) ->
                 case x of wild {
                   Lib.IntValue b1
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fShowValue6
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Lib.StringValue b1
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fShowValue5
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Lib.$fExceptionCompilationException1))
                   Lib.BoolValue b1
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fShowValue4
                        (case b1 of wild1 {
                           GHC.Types.False -> GHC.Show.$fShowBool4
                           GHC.Types.True -> GHC.Show.$fShowBool2 })
                   Lib.LambdaValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowValue2
                        (case b1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                         Messages.$w$cshowsPrec8
                           11#
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
9c9cebcdf6da7f121e94bbd12b68868b
  $fShowValue_$cshowList :: [Lib.Value] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Lib.Value]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Lib.Value Lib.$fShowValue1 ls s) -}
9c9cebcdf6da7f121e94bbd12b68868b
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Lib.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Lib.Value) ->
                 case w of ww { GHC.Types.I# ww1 -> Lib.$w$cshowsPrec1 ww1 w1 }) -}
2df0d32c3248ffa1f7be393c6f8f1df7
  $sel:load:DB :: Lib.DB -> Lib.LoadCallback
  RecSel Left Lib.DB
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DB) -> case ds of wild { Lib.DB ds1 ds2 -> ds2 }) -}
2df0d32c3248ffa1f7be393c6f8f1df7
  $sel:publish:DB :: Lib.DB -> Lib.PublishCallback
  RecSel Left Lib.DB
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DB) -> case ds of wild { Lib.DB ds1 ds2 -> ds1 }) -}
19a03e686250a3b4cb7dc467a69a4273
  $sel:runStmt:ScriptContext ::
    Lib.ScriptContext t
    -> Control.Monad.Trans.State.Lazy.StateT
         Lib.VariableMap GHC.Types.IO t
  RecSel Left Lib.ScriptContext
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$sel:runStmt:ScriptContext1
                  `cast`
                (forall (t :: <*>_N).
                 <Lib.ScriptContext t>_R ->_R Lib.N:ScriptContext[0] <t>_N) -}
19a03e686250a3b4cb7dc467a69a4273
  $sel:runStmt:ScriptContext1 ::
    Lib.ScriptContext t -> Lib.ScriptContext t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (ds :: Lib.ScriptContext t) -> ds) -}
cc49d8551c5cca57a95196f3d8d4870e
  $sfromList ::
    [(GHC.Base.String, a)] -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Base.String, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ GHC.Base.String @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ GHC.Base.String
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                             (Data.Map.Internal.Tip @ GHC.Base.String @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Lib.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a))
                                  wild2 } }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Lib.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a))
                                  wild2 } } } } } } }) -}
7bf86a4853883a8ae370195c70dea3a9
  $sfromList1 ::
    Data.Map.Internal.Map GHC.Base.String a
    -> [(GHC.Base.String, a)]
    -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
38d960d591eb06477225f70709de4546
  $sinsert_$sgo8 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Internal.Map GHC.Base.String a1
    -> Data.Map.Internal.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
392ba6e1d782a8deba2db0d1865eb1a2
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Internal.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1af12f3b066eb8934e6b299a4ff27849
  $tc'BoolValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10515889227099556270##
                   11272179292220270832##
                   Lib.$trModule
                   Lib.$tc'BoolValue2
                   0#
                   Lib.$tc'BoolValue1) -}
d2233159cff70b77212c94e8442a3d05
  $tc'BoolValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5123d71daae4c0d98acea807b410bf12
  $tc'BoolValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'BoolValue3) -}
8043c07d472e6d58237e6af8dd09a950
  $tc'BoolValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolValue"#) -}
d7c439eb54b5a1cefe28bd09fb2a691a
  $tc'CompilationException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2902963595189377284##
                   2954561953442251935##
                   Lib.$trModule
                   Lib.$tc'CompilationException2
                   0#
                   Lib.$tc'CompilationException1) -}
2a9f9a280d8c4ef388ab311c2621611a
  $tc'CompilationException1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0055979386ea1cd030c645fa64ad0479
  $tc'CompilationException2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'CompilationException3) -}
e7a991c39fd29cde9fdd97c54e116d06
  $tc'CompilationException3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompilationException"#) -}
3f94f75264acb1dfc366944c96f0a59f
  $tc'DB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12628817645247503152##
                   18423613892776780188##
                   Lib.$trModule
                   Lib.$tc'DB2
                   0#
                   Lib.$tc'DB1) -}
8ac6e18ec6d887447b20df31a0f3ff1c
  $tc'DB1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e25ec1044369584008fefdf086019098
  $tc'DB2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'DB3) -}
2e59862146a0f34c6895e572c58663b0
  $tc'DB3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DB"#) -}
09235cd97620de2a77f7c1328ea44b9b
  $tc'IntValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7998608855213693012##
                   2737083881300363215##
                   Lib.$trModule
                   Lib.$tc'IntValue2
                   0#
                   Lib.$tc'IntValue1) -}
90c809f77b5483715985c34589c32270
  $tc'IntValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e926c2619b7b4186cfe82f962b736dbc
  $tc'IntValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'IntValue3) -}
a9cd4b04616e8cc29d8b5e22a0c9fac8
  $tc'IntValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntValue"#) -}
6e12e0b81c13fbf3c5eee24fdcf8d64e
  $tc'LambdaValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15378472487446152572##
                   11486251250162872414##
                   Lib.$trModule
                   Lib.$tc'LambdaValue2
                   0#
                   Lib.$tc'LambdaValue1) -}
29dc0af6ce3a528573609cee41f7a8c4
  $tc'LambdaValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
13c08b62fdbeb76d81098f220248304d
  $tc'LambdaValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'LambdaValue3) -}
29fb79c4aa22ffc4e17e32396a9109b2
  $tc'LambdaValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaValue"#) -}
b8ff44ef602fba9632c849d49552b67f
  $tc'ScriptContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12633674103762257979##
                   11546216861890362968##
                   Lib.$trModule
                   Lib.$tc'ScriptContext2
                   1#
                   Lib.$tc'ScriptContext1) -}
73821e6b218996c03a276694b9794d22
  $tc'ScriptContext1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c21b7cbfd7d283b585622b2ac944968b
  $tc'ScriptContext2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'ScriptContext3) -}
a3ac7cd477ecd4e21a8f36aa4e56d9bd
  $tc'ScriptContext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScriptContext"#) -}
eb3a637815964f82e2f92a46f4acdfaf
  $tc'StringValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4467500400277186315##
                   12536535710955255822##
                   Lib.$trModule
                   Lib.$tc'StringValue2
                   0#
                   Lib.$tc'StringValue1) -}
a47bad828bd1a293c141c994e0650b4c
  $tc'StringValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5180e0fbe8535b172fcfcc267a12318f
  $tc'StringValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'StringValue3) -}
a8a5f554988e688b0955f4ef2b2ba266
  $tc'StringValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringValue"#) -}
7ca7bf4e781ff3ebe08515cbdcd0c169
  $tcCompilationException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7167319832502079303##
                   2729989076650851816##
                   Lib.$trModule
                   Lib.$fExceptionCompilationException5
                   0#
                   GHC.Types.krep$*) -}
1585e55fe4561efc04a43e85e01a70d3
  $tcDB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6991719921939867079##
                   65384849252390572##
                   Lib.$trModule
                   Lib.$tcDB1
                   0#
                   GHC.Types.krep$*) -}
9923e7edbb8f6838fb30ae08055aeafd
  $tcDB1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcDB2) -}
77b89a3f11335e67f2c99ceeb3ba19b5
  $tcDB2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DB"#) -}
b57696a8ad971a0460c0c5a927f870cc
  $tcScriptContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6090457390278847186##
                   7804287341637936361##
                   Lib.$trModule
                   Lib.$tcScriptContext1
                   0#
                   GHC.Types.krep$*Arr*) -}
9c78a1d51cc184f88c84bf77b298925d
  $tcScriptContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcScriptContext2) -}
6de602d6b1554670f1c123213f651920
  $tcScriptContext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ScriptContext"#) -}
597388f471a5b97776b56946b037a6ce
  $tcValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13967013455979641198##
                   15075455008626347374##
                   Lib.$trModule
                   Lib.$tcValue1
                   0#
                   GHC.Types.krep$*) -}
4deea266687f879f93df6624cdc58984
  $tcValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcValue2) -}
e5c4c7f436765662922499bc57371757
  $tcValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Value"#) -}
cf95293c3c0d8be1cdffba2a7572d691
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
ac0dfcd29a013927d3b51e19b68e8ed9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
0a3f0027fcece0577f1c7ebc4ee9d29f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
70b1deab09cccd087df1ddea875d9036
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
2ad47dec3c89db8de51e4820125d25ae
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("worker-0.1.0.0-5j3scUJJaukJBHFJZP9uqU"#) -}
db5b529ca18b857496b27fbfe6213d05
  $w$cshow :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Lib.$fExceptionCompilationException2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         ww
                         Lib.$fExceptionCompilationException1))) -}
ad5ed1ba60b56c4958eda9d517e0a822
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fExceptionCompilationException2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w)))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Lib.$fExceptionCompilationException2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))))) }) -}
9c9cebcdf6da7f121e94bbd12b68868b
  $w$cshowsPrec1 :: GHC.Prim.Int# -> Lib.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Lib.Value) ->
                 case w of wild {
                   Lib.IntValue b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Lib.$fShowValue6
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Lib.$fShowValue6
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Lib.StringValue b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Lib.$fShowValue5
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Lib.$fShowValue5
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }
                   Lib.BoolValue b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Lib.$fShowValue4
                             (case b1 of wild1 {
                                GHC.Types.False
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool4 x
                                GHC.Types.True
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool2 x })
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Lib.$fShowValue4
                                (case b1 of wild1 {
                                   GHC.Types.False
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool4
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)
                                   GHC.Types.True
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool2
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x) })) }
                   Lib.LambdaValue b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                          Messages.$w$cshowsPrec8 11# ww3 ww4 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Lib.$fShowValue2 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowValue2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
e4db511600b53a5a27edc7de1cd326a0
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Base.String a
    -> [(GHC.Base.String, a)]
    -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
84505988b9c58dc074fdf9ea53471446
  data CompilationException = CompilationException GHC.Base.String
2df0d32c3248ffa1f7be393c6f8f1df7
  data DB
    = DB {publish :: Lib.PublishCallback, load :: Lib.LoadCallback}
81ff4765b2a16e9bca0795cb93b388bc
  type LoadCallback =
    GHC.Base.String -> GHC.Types.IO Messages.DBMessage
b4f56c8c572f02fb8d106edbb7ca3f5c
  type PublishCallback =
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
19a03e686250a3b4cb7dc467a69a4273
  type role ScriptContext nominal
  newtype ScriptContext t
    = ScriptContext {runStmt :: Control.Monad.Trans.State.Lazy.StateT
                                  Lib.VariableMap GHC.Types.IO t}
9c9cebcdf6da7f121e94bbd12b68868b
  data Value
    = IntValue GHC.Types.Int
    | StringValue GHC.Base.String
    | BoolValue GHC.Types.Bool
    | LambdaValue Messages.LambdaDef
96fdca6026336b022d07d596adf63a5b
  type VariableMap = Data.Map.Internal.Map GHC.Base.String Lib.Value
31f41b29fd32e0dd1ba71a7287fd9878
  executeScript ::
    Messages.Program -> Lib.DB -> GHC.Types.IO Messages.ProgramResult
  {- Arity: 3,
     Strictness: <L,1*U(1*U,1*U(1*U))><L,U(C(C1(C1(U))),C(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.executeScript1
                  `cast`
                (<Messages.Program>_R
                 ->_R <Lib.DB>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Messages.ProgramResult>_R)) -}
28a124e731ab0d753d85635a602e815e
  executeScript1 ::
    Messages.Program
    -> Lib.DB
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.ProgramResult #)
  {- Arity: 3,
     Strictness: <L,1*U(1*U,1*U(1*U))><L,U(C(C1(C1(U))),C(U))><S,U> -}
instance GHC.Base.Applicative [Lib.ScriptContext]
  = Lib.$fApplicativeScriptContext
instance GHC.Exception.Exception [Lib.CompilationException]
  = Lib.$fExceptionCompilationException
instance GHC.Base.Functor [Lib.ScriptContext]
  = Lib.$fFunctorScriptContext
instance Control.Monad.Catch.MonadCatch [Lib.ScriptContext]
  = Lib.$fMonadCatchScriptContext
instance Control.Monad.IO.Class.MonadIO [Lib.ScriptContext]
  = Lib.$fMonadIOScriptContext
instance GHC.Base.Monad [Lib.ScriptContext]
  = Lib.$fMonadScriptContext
instance Control.Monad.State.Class.MonadState [Data.Map.Internal.Map,
                                               Lib.ScriptContext]
  = Lib.$fMonadStateScriptContext
instance Control.Monad.Catch.MonadThrow [Lib.ScriptContext]
  = Lib.$fMonadThrowScriptContext
instance GHC.Show.Show [Lib.CompilationException]
  = Lib.$fShowCompilationException
instance GHC.Show.Show [Lib.Value] = Lib.$fShowValue
"SPEC/Lib $fApplicativeStateT_$c*> @ IO _" [orphan] forall @ s
                                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
                                                           ($dFunctor :: GHC.Base.Functor
                                                                           GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*> @ GHC.Types.IO
                                                          @ s
                                                          $dFunctor
                                                          $dMonad
  = Lib.$fApplicativeScriptContext_$s$fApplicativeStateT_$c*> @ s
"SPEC/Lib $fApplicativeStateT_$c<*> @ IO _" [orphan] forall @ s
                                                            ($dMonad :: GHC.Base.Monad GHC.Types.IO)
                                                            ($dFunctor :: GHC.Base.Functor
                                                                            GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GHC.Types.IO
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = Lib.$fApplicativeScriptContext_$s$fApplicativeStateT_$c<*> @ s
"SPEC/Lib $fApplicativeStateT_$cpure @ IO _" [orphan] forall @ s
                                                             ($dMonad :: GHC.Base.Monad
                                                                           GHC.Types.IO)
                                                             ($dFunctor :: GHC.Base.Functor
                                                                             GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GHC.Types.IO
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Lib.$fApplicativeScriptContext_$s$fApplicativeStateT_$cpure @ s
"SPEC/Lib $fFunctorStateT_$cfmap @ IO _" [orphan] forall @ s
                                                         ($dFunctor :: GHC.Base.Functor
                                                                         GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GHC.Types.IO
                                                        @ s
                                                        $dFunctor
  = Lib.$fFunctorScriptContext_$s$fFunctorStateT_$cfmap @ s
"SPEC/Lib $fMonadStateT_$c>> @ IO _" [orphan] forall @ s
                                                     ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ GHC.Types.IO
                                                    @ s
                                                    $dMonad
  = Lib.$fMonadScriptContext_$s$fMonadStateT_$c>> @ s
"SPEC/Lib $fMonadStateT_$c>>= @ IO _" [orphan] forall @ s
                                                      ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ GHC.Types.IO
                                                     @ s
                                                     $dMonad
  = Lib.$fMonadScriptContext_$s$fMonadStateT_$c>>= @ s
"SPEC/Lib $fMonadStateT_$cfail @ IO _" [orphan] forall @ s
                                                       ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ GHC.Types.IO
                                                      @ s
                                                      $dMonad
  = Lib.$fMonadScriptContext_$s$fMonadStateT_$cfail @ s
"SPEC/Lib fromList @ String _" [orphan] forall @ a
                                               ($dOrd :: GHC.Classes.Ord GHC.Base.String)
  Data.Map.Strict.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = Lib.$sfromList @ a
"SPEC/Lib put @ IO _" [orphan] forall @ s
                                      ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.put @ GHC.Types.IO @ s $dMonad
  = Lib.$fMonadStateScriptContext_$sput @ s
"SPEC/Lib state @ IO _ _" [orphan] forall @ s
                                          @ a
                                          ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.state @ GHC.Types.IO @ s @ a $dMonad
  = Lib.$fMonadStateScriptContext_$sstate @ s @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

