
==================== FINAL INTERFACE ====================
2019-10-09 11:10:42.166372 UTC

interface worker-0.1.0.0-75edZOWJedD8deG6MxXNB:Lib 8044
  interface hash: fa47c28c47eff5e9a5f98debfabb974c
  ABI hash: b6b4ce3353f81f624aff5b61a1b5c83b
  export-list hash: c47b92028408f7068bc509ce69c40fe2
  orphan hash: 431a88bce39330010e076f148fafad77
  flag hash: 6a7d7f697c0afe5cb84523118d20465e
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.executeScript
  Lib.DB{Lib.DB load publish}
  Lib.LoadCallback
  Lib.PublishCallback
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      exceptions-0.10.0 ghc-boot-th-8.4.4 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      network-transport-0.5.2 stm-2.4.5.1 template-haskell-2.13.0.0
                      text-1.2.3.1 transformers-0.5.5.0 utils-0.1.0.0
orphans: hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show stm-2.4.5.1:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         network-transport-0.5.2:Network.Transport
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.IORef 7625124710852387e94dfb3e4df7515e
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.IORef e92b95f2e36bdb5fe155921cbe861044
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  exceptions-0.10.0:Control.Monad.Catch a2b5a72c22875ee95949d04e4cf1e33a
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Reader a496a2f5c2c54feee0ad154b4fe8533d
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Reader 42962052353a5a0f766912058b765b5d
import  -/  utils-0.1.0.0:Messages f163bf9a7a33e16d4758d509c538a791
abd2a13f7bc23513f304cf16f51df2c8
  $fApplicativeScriptContext ::
    GHC.Base.Applicative Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fFunctorScriptContext
                  Lib.$fApplicativeScriptContext2
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<GHC.IORef.IORef Lib.VariableMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <GHC.IORef.IORef Lib.VariableMap>_R
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N))
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c<*>
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a -> b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (\ @ a @ b @ c -> Lib.$fApplicativeScriptContext1 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R (<GHC.IORef.IORef Lib.VariableMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <c>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <GHC.IORef.IORef Lib.VariableMap>_R
                                                           <GHC.Types.IO>_R
                                                           <c>_N) ; Sym (Lib.N:ScriptContext[0]) <c>_N))
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c*>
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c<*
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N) -}
70a2a2111b3bb14eb53dac0c5551cd77
  $fApplicativeScriptContext1 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO b
    -> GHC.IORef.IORef Lib.VariableMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ c
                   @ b
                   @ a
                   (eta :: a -> b -> c)
                   (eta7 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO a)
                   (eta8 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO b)
                   (eta9 :: GHC.IORef.IORef Lib.VariableMap)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (eta7
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef Lib.VariableMap>_R <GHC.Types.IO>_R <a>_N)
                         eta9)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (eta8
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef Lib.VariableMap>_R <GHC.Types.IO>_R <b>_N)
                         eta9)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, eta ipv1 ipv3 #) } }) -}
61785917cd89a78babd1de612d24489e
  $fApplicativeScriptContext2 ::
    a
    -> GHC.IORef.IORef Lib.VariableMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (eta :: a)
                   (eta7 :: GHC.IORef.IORef Lib.VariableMap)
                   (eta8 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta8, eta #)) -}
d9432764ac9aa429b694fcaa4ec352cc
  $fApplicativeScriptContext_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (v `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
0a06ad6d3acc4fcf227b32d01bdf9f61
  $fApplicativeScriptContext_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
7f517f70a428cc7b0d69d95e0ad6262e
  $fApplicativeScriptContext_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (f `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a -> b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a -> b>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 ipv3 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
e7c4293e3b50ad540a574acc35bce45b
  $fExceptionCompilationException ::
    GHC.Exception.Exception Lib.CompilationException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.CompilationException
                  Lib.$fExceptionCompilationException4
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Lib.CompilationException>_N)
                  Lib.$fShowCompilationException
                  Lib.$fExceptionCompilationException_$ctoException
                  Lib.$fExceptionCompilationException_$cfromException
                  Lib.$fExceptionCompilationException_$cshow -}
99b44139353e3a1d2676a032a572ef0d
  $fExceptionCompilationException1 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
946405b20bff1759677164386153ffcb
  $fExceptionCompilationException2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilationException "#) -}
e7c4293e3b50ad540a574acc35bce45b
  $fExceptionCompilationException3 ::
    GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ Lib.CompilationException
                   Lib.$fExceptionCompilationException4) -}
e7c4293e3b50ad540a574acc35bce45b
  $fExceptionCompilationException4 ::
    Data.Typeable.Internal.TypeRep Lib.CompilationException
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ Lib.CompilationException
                        11110883484619228577##
                        2171522331657672681##
                        Lib.$trModule
                        Lib.$fExceptionCompilationException5
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ Lib.CompilationException
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
27fb70edb51f8ef3bdee8b2a8ae494be
  $fExceptionCompilationException5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Lib.$fExceptionCompilationException6) -}
d4f7097ef9c4e3b13303c647b3a02e11
  $fExceptionCompilationException6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilationException"#) -}
e7c4293e3b50ad540a574acc35bce45b
  $fExceptionCompilationException_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe Lib.CompilationException
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: GHC.Exception.SomeException) ->
                 case ds of wild { GHC.Exception.SomeException e1 $dException1 e2 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e1
                        (GHC.Exception.$p1Exception @ e1 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case Lib.$fExceptionCompilationException3 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Base.Nothing @ Lib.CompilationException
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Base.Nothing @ Lib.CompilationException
                        1#
                        -> (GHC.Base.Just @ e1 e2)
                             `cast`
                           (GHC.Base.Maybe
                              (UnsafeCo representational e1 Lib.CompilationException))_R } } } } }) -}
e7c4293e3b50ad540a574acc35bce45b
  $fExceptionCompilationException_$cshow ::
    Lib.CompilationException -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.CompilationException) ->
                 case w of ww { Lib.CompilationException ww1 ->
                 Lib.$w$cshow ww1 }) -}
e7c4293e3b50ad540a574acc35bce45b
  $fExceptionCompilationException_$ctoException ::
    Lib.CompilationException -> GHC.Exception.SomeException
  {- Arity: 1 -}
abd2a13f7bc23513f304cf16f51df2c8
  $fFunctorScriptContext :: GHC.Base.Functor Lib.ScriptContext
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  (Lib.$fFunctorScriptContext_$s$fFunctorReaderT_$cfmap
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (Lib.$fFunctorScriptContext_$s$fFunctorReaderT_$c<$
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N) -}
f37690dae07ae02afef0c4ccd2cd2160
  $fFunctorScriptContext_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (x :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (x1 :: r)
                   (eta7 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         x1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta7 of ds { (#,#) ipv ipv1 ->
                 (# ipv, x #) })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
4880861a2fd3b2df608023da34687ad6
  $fFunctorScriptContext_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ GHC.Types.IO
                   @ a
                   @ GHC.Types.IO
                   @ b
                   @ r
                   (GHC.Base.$fFunctorIO2 @ a @ b f)
                     `cast`
                   (<GHC.Types.IO a>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))) -}
abd2a13f7bc23513f304cf16f51df2c8
  $fMonadCatchScriptContext ::
    Control.Monad.Catch.MonadCatch Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fMonadThrowScriptContext
                  Lib.$fMonadCatchScriptContext1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Exception e>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R (<e>_R ->_R Sym (Lib.N:ScriptContext[0]) <a>_N)
                   ->_R (<GHC.IORef.IORef Lib.VariableMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <GHC.IORef.IORef Lib.VariableMap>_R
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
7120c990775f5aa46f888536fb54ed0f
  $fMonadCatchScriptContext1 ::
    GHC.Exception.Exception e =>
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO a
    -> (e
        -> Control.Monad.Trans.Reader.ReaderT
             (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO a)
    -> GHC.IORef.IORef Lib.VariableMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(U),A)><L,1*C1(C1(U))><L,1*C1(C1(C1(U)))><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Exception e)
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO a)
                   (c :: e
                         -> Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO a)
                   (r1 :: GHC.IORef.IORef Lib.VariableMap)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ a
                   @ GHC.Exception.SomeException
                   (ds
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <GHC.IORef.IORef Lib.VariableMap>_R <GHC.Types.IO>_R <a>_N)
                      r1)
                     `cast`
                   (GHC.Types.N:IO[0] <a>_R)
                   (\ (e1 :: GHC.Exception.SomeException)[OneShot] ->
                    case GHC.Exception.fromException @ e $dException e1 of wild {
                      GHC.Base.Nothing
                      -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1
                      GHC.Base.Just e'
                      -> ((c e')
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <GHC.IORef.IORef Lib.VariableMap>_R <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R) })
                   eta) -}
abd2a13f7bc23513f304cf16f51df2c8
  $fMonadIOScriptContext ::
    Control.Monad.IO.Class.MonadIO Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fMonadScriptContext
                  Lib.$fMonadIOScriptContext1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <GHC.IORef.IORef Lib.VariableMap>_R
                                 <GHC.Types.IO>_R
                                 <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N) -}
2e80db578fc693d7fa8f81ea6452df36
  $fMonadIOScriptContext1 ::
    GHC.Types.IO a -> GHC.IORef.IORef Lib.VariableMap -> GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (x :: GHC.Types.IO a)
                   (ds :: GHC.IORef.IORef Lib.VariableMap) ->
                 x) -}
abd2a13f7bc23513f304cf16f51df2c8
  $fMonadReaderScriptContext ::
    Control.Monad.Reader.Class.MonadReader
      (GHC.IORef.IORef Lib.VariableMap) Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.IORef.IORef Lib.VariableMap)
                  @ Lib.ScriptContext
                  Lib.$fMonadScriptContext
                  (GHC.Base.$fApplicativeIO4 @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  ((<GHC.IORef.IORef Lib.VariableMap>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <GHC.IORef.IORef
                                     Lib.VariableMap>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                      <*>_N
                                                                      <GHC.IORef.IORef
                                                                         Lib.VariableMap>_R
                                                                      <GHC.Types.IO>_R
                                                                      <GHC.IORef.IORef
                                                                         Lib.VariableMap>_N) ; Sym (Lib.N:ScriptContext[0]) <GHC.IORef.IORef
                                                                                                                               Lib.VariableMap>_N))
                  (Control.Monad.Trans.Reader.withReaderT
                     @ *
                     @ (GHC.IORef.IORef Lib.VariableMap)
                     @ (GHC.IORef.IORef Lib.VariableMap)
                     @ GHC.Types.IO)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.IORef.IORef Lib.VariableMap
                    -> GHC.IORef.IORef Lib.VariableMap>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N)
                  (Lib.$fMonadReaderScriptContext_$sreader
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.IORef.IORef Lib.VariableMap -> a>_R
                   ->_R Sym (Lib.N:ScriptContext[0]) <a>_N) -}
a869f86dcb74594ba431d5f970e60f21
  $fMonadReaderScriptContext_$sreader ::
    (r -> a) -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   (f :: r -> a)
                   (x :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, f x #))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N).
                 <r -> a>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
abd2a13f7bc23513f304cf16f51df2c8
  $fMonadScriptContext :: GHC.Base.Monad Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fApplicativeScriptContext
                  (Lib.$fMonadScriptContext_$s$fMonadReaderT_$c>>=
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  (Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c*>
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Lib.N:ScriptContext[0]) <a>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N
                   ->_R Sym (Lib.N:ScriptContext[0]) <b>_N)
                  Lib.$fApplicativeScriptContext2
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<GHC.IORef.IORef Lib.VariableMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <GHC.IORef.IORef Lib.VariableMap>_R
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N))
                  (Lib.$fMonadScriptContext_$s$fMonadReaderT_$cfail
                     @ (GHC.IORef.IORef Lib.VariableMap))
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (Lib.N:ScriptContext[0]) <a>_N) -}
bd96e6c7fa003e59146cc95fd1d7e485
  $fMonadScriptContext_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ((k ipv1)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
517536b7eb6354d9c462768d51ff07c5
  $fMonadScriptContext_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: GHC.Types.IO a
                   = GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ a
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
abd2a13f7bc23513f304cf16f51df2c8
  $fMonadThrowScriptContext ::
    Control.Monad.Catch.MonadThrow Lib.ScriptContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.ScriptContext
                  Lib.$fMonadScriptContext
                  Lib.$fMonadThrowScriptContext1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Exception e>_R
                   ->_R <e>_R
                   ->_R (<GHC.IORef.IORef Lib.VariableMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <GHC.IORef.IORef Lib.VariableMap>_R
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (Lib.N:ScriptContext[0]) <a>_N)) -}
59d734d2ba6e9b99b9e7e8c342da2966
  $fMonadThrowScriptContext1 ::
    GHC.Exception.Exception e =>
    e
    -> GHC.IORef.IORef Lib.VariableMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>x,
     Unfolding: InlineRule (4, True, True)
                (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Exception e)
                   (eta7 :: e)
                   (eta :: GHC.IORef.IORef Lib.VariableMap)
                   (eta8 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.IO.throwIO1 @ e @ a $dException eta7 eta8) -}
e7c4293e3b50ad540a574acc35bce45b
  $fShowCompilationException ::
    GHC.Show.Show Lib.CompilationException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.CompilationException
                  Lib.$fShowCompilationException_$cshowsPrec
                  Lib.$fExceptionCompilationException_$cshow
                  Lib.$fShowCompilationException_$cshowList -}
e7c4293e3b50ad540a574acc35bce45b
  $fShowCompilationException1 ::
    Lib.CompilationException -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Lib.CompilationException)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.CompilationException ww1 ->
                 Lib.$w$cshowsPrec 0# ww1 w1 }) -}
e7c4293e3b50ad540a574acc35bce45b
  $fShowCompilationException_$cshowList ::
    [Lib.CompilationException] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Lib.CompilationException]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Lib.CompilationException
                   Lib.$fShowCompilationException1
                   ls
                   s) -}
e7c4293e3b50ad540a574acc35bce45b
  $fShowCompilationException_$cshowsPrec ::
    GHC.Types.Int -> Lib.CompilationException -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.CompilationException)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.CompilationException ww3 ->
                 Lib.$w$cshowsPrec ww1 ww3 w2 } }) -}
2358faa938626d5ed0b0a13ffb5c6a49
  $fShowValue :: GHC.Show.Show Lib.Value
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Value
                  Lib.$fShowValue_$cshowsPrec
                  Lib.$fShowValue_$cshow
                  Lib.$fShowValue_$cshowList -}
2358faa938626d5ed0b0a13ffb5c6a49
  $fShowValue1 :: Lib.Value -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Lib.Value) -> Lib.$w$cshowsPrec1 0# w) -}
12db62c4054616285327f1116829fb18
  $fShowValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.$fShowValue3) -}
ef409dc51e67850da01ecc7b4612b152
  $fShowValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaValue "#) -}
64c94e0aca6c9be22f7ff108eced21cf
  $fShowValue4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BoolValue "#) -}
34059ebb5986416ff4bd63d35273da66
  $fShowValue5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StringValue "#) -}
37c14224bba167c3db45cd53225a93f0
  $fShowValue6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntValue "#) -}
2358faa938626d5ed0b0a13ffb5c6a49
  $fShowValue_$cshow :: Lib.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Lib.Value) ->
                 case x of wild {
                   Lib.IntValue b1
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fShowValue6
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Lib.StringValue b1
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fShowValue5
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Lib.$fExceptionCompilationException1))
                   Lib.BoolValue b1
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fShowValue4
                        (case b1 of wild1 {
                           GHC.Types.False -> GHC.Show.$fShowBool4
                           GHC.Types.True -> GHC.Show.$fShowBool2 })
                   Lib.LambdaValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowValue2
                        (case b1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                         Messages.$w$cshowsPrec8
                           11#
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
2358faa938626d5ed0b0a13ffb5c6a49
  $fShowValue_$cshowList :: [Lib.Value] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Lib.Value]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Lib.Value Lib.$fShowValue1 ls s) -}
2358faa938626d5ed0b0a13ffb5c6a49
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Lib.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Lib.Value) ->
                 case w of ww { GHC.Types.I# ww1 -> Lib.$w$cshowsPrec1 ww1 w1 }) -}
332bc2a116fd048b564db270277e958d
  $sel:load:DB :: Lib.DB -> Lib.LoadCallback
  RecSel Left Lib.DB
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DB) -> case ds of wild { Lib.DB ds1 ds2 -> ds2 }) -}
332bc2a116fd048b564db270277e958d
  $sel:publish:DB :: Lib.DB -> Lib.PublishCallback
  RecSel Left Lib.DB
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DB) -> case ds of wild { Lib.DB ds1 ds2 -> ds1 }) -}
abd2a13f7bc23513f304cf16f51df2c8
  $sel:runStmt:ScriptContext ::
    Lib.ScriptContext t
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO t
  RecSel Left Lib.ScriptContext
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$sel:runStmt:ScriptContext1
                  `cast`
                (forall (t :: <*>_N).
                 <Lib.ScriptContext t>_R ->_R Lib.N:ScriptContext[0] <t>_N) -}
abd2a13f7bc23513f304cf16f51df2c8
  $sel:runStmt:ScriptContext1 ::
    Lib.ScriptContext t -> Lib.ScriptContext t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (ds :: Lib.ScriptContext t) -> ds) -}
75205f0eba1bd05fa8a0046fa054b613
  $sfromList ::
    [(GHC.Base.String, a)] -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Base.String, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ GHC.Base.String @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ GHC.Base.String
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                             (Data.Map.Internal.Tip @ GHC.Base.String @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Lib.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a))
                                  wild2 } }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Lib.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a))
                                  wild2 } } } } } } }) -}
36af0fa40ff6aacf0a8c6f7e01fdaf83
  $sfromList1 ::
    Data.Map.Internal.Map GHC.Base.String a
    -> [(GHC.Base.String, a)]
    -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d6fc6106f88e3c0a05ca87ae8525b910
  $sinsert_$sgo8 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Internal.Map GHC.Base.String a1
    -> Data.Map.Internal.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
8198b28e4a20496637c50fb77dc6e350
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Internal.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7ba8caf95ae8414141b1b02aa44d3d0c
  $tc'BoolValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15196547858876101290##
                   12122556721774111765##
                   Lib.$trModule
                   Lib.$tc'BoolValue2
                   0#
                   Lib.$tc'BoolValue1) -}
57c84e1759655639e8a0e52bbdd2d987
  $tc'BoolValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c018057364504f8401279bd39740536
  $tc'BoolValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'BoolValue3) -}
19b8516e77457f9451a302af179a8429
  $tc'BoolValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolValue"#) -}
2946c74a1de2cb5da3f9b5520e009533
  $tc'CompilationException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14337863242945907377##
                   14560110485749425681##
                   Lib.$trModule
                   Lib.$tc'CompilationException2
                   0#
                   Lib.$tc'CompilationException1) -}
e988e5e896579fdad26c2b3ecfb3128f
  $tc'CompilationException1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0b5f5666d262613e5943df904201547a
  $tc'CompilationException2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'CompilationException3) -}
3903ca327586981fb560b1f0d62d8661
  $tc'CompilationException3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompilationException"#) -}
af143a3526c16957ce1c1ca17ba401fd
  $tc'DB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6559267207965501605##
                   7395240237085911539##
                   Lib.$trModule
                   Lib.$tc'DB2
                   0#
                   Lib.$tc'DB1) -}
c6143f817a2eb16b097a1dc174217345
  $tc'DB1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6bcc2cacf86329146e734ece2054657b
  $tc'DB2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'DB3) -}
d62ebfa42a61eb1dfd61a2e3695ceb86
  $tc'DB3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DB"#) -}
9b5fba8375dd15335010d1d65bd33403
  $tc'IntValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10764828954077670110##
                   16054575257562579731##
                   Lib.$trModule
                   Lib.$tc'IntValue2
                   0#
                   Lib.$tc'IntValue1) -}
d970be88b4c025d52c7bb6bcb90833ba
  $tc'IntValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f94f9ecc1d29b085d24183dbbafe6e9f
  $tc'IntValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'IntValue3) -}
2b14c278b58764db3548acc71b1f5a9c
  $tc'IntValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntValue"#) -}
4bc48663b62fdbd90dff503c4e5c6097
  $tc'LambdaValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9543999505382591205##
                   6025283139321960190##
                   Lib.$trModule
                   Lib.$tc'LambdaValue2
                   0#
                   Lib.$tc'LambdaValue1) -}
6bec84bb02268860f1d89b9a44d6d420
  $tc'LambdaValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9a676bf2385ff56f967a7adddb47bb89
  $tc'LambdaValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'LambdaValue3) -}
dd46efb05ee24b0566284abffd59d308
  $tc'LambdaValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LambdaValue"#) -}
a15cbebb45b7de715e36e82841356740
  $tc'ScriptContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3158270482130409871##
                   15485335667968294414##
                   Lib.$trModule
                   Lib.$tc'ScriptContext2
                   1#
                   Lib.$tc'ScriptContext1) -}
1290a78005deaf714ab881a9e93508be
  $tc'ScriptContext1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b9e5706687c729e67d4f2c70551a311d
  $tc'ScriptContext2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'ScriptContext3) -}
7f2e00808de0c46e8b95289d59ee40d8
  $tc'ScriptContext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScriptContext"#) -}
d39588866b45886b3de3d91274ae303b
  $tc'StringValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9993364481430700825##
                   10294772399086708071##
                   Lib.$trModule
                   Lib.$tc'StringValue2
                   0#
                   Lib.$tc'StringValue1) -}
1b2d0af7810b6583a3684b3ad62128f6
  $tc'StringValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b56af7b5052769a966e5c3374117d062
  $tc'StringValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'StringValue3) -}
0af6893d0d015273ac7fb202a21b07b0
  $tc'StringValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringValue"#) -}
456c79a352893abfba7c76e3ab846427
  $tcCompilationException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11110883484619228577##
                   2171522331657672681##
                   Lib.$trModule
                   Lib.$fExceptionCompilationException5
                   0#
                   GHC.Types.krep$*) -}
1a850948d641965f65b1e56ff5a582b7
  $tcDB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3874974895040094456##
                   15104705774146333957##
                   Lib.$trModule
                   Lib.$tcDB1
                   0#
                   GHC.Types.krep$*) -}
d4d6ce0975ab15721f788d598c9140bd
  $tcDB1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcDB2) -}
24dbb3234369a57a8ae2b2c5f3b693cd
  $tcDB2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DB"#) -}
7ab226ab88b7f811562196a8c3f9c114
  $tcScriptContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12864216674272207769##
                   5682083092807628420##
                   Lib.$trModule
                   Lib.$tcScriptContext1
                   0#
                   GHC.Types.krep$*Arr*) -}
b189d5fc141ef3d4ad1d0f0aa0190260
  $tcScriptContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcScriptContext2) -}
98104761050994f3d03032e87a27a6c4
  $tcScriptContext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ScriptContext"#) -}
ef3fc6d2e012d197968bfa48cfefa128
  $tcValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5801135316095601162##
                   6507091587332176267##
                   Lib.$trModule
                   Lib.$tcValue1
                   0#
                   GHC.Types.krep$*) -}
792a3a587a1546c6f699124390b7143b
  $tcValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcValue2) -}
b790cc461ad7ee115ab82101ec3e2bbd
  $tcValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Value"#) -}
f62c62e54a58d04931eddbcbf186e7dc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
af32fba70bb06fbb4cb1730376778879
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
7011fa90d382bb3eed0288e118a98fa0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
99ed80eb376e0be7691de5e80d90f692
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
14b2cf81ee13c0f3b491dc718140a90e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("worker-0.1.0.0-75edZOWJedD8deG6MxXNB"#) -}
8eea04adbaeaf9fbd5d39564f2884dfc
  $w$cshow :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Lib.$fExceptionCompilationException2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         ww
                         Lib.$fExceptionCompilationException1))) -}
70f7ccb92829c13aeedec94a5d6b1e94
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Lib.$fExceptionCompilationException2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w)))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Lib.$fExceptionCompilationException2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))))) }) -}
2358faa938626d5ed0b0a13ffb5c6a49
  $w$cshowsPrec1 :: GHC.Prim.Int# -> Lib.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Lib.Value) ->
                 case w of wild {
                   Lib.IntValue b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Lib.$fShowValue6
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Lib.$fShowValue6
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Lib.StringValue b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Lib.$fShowValue5
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Lib.$fShowValue5
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }
                   Lib.BoolValue b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Lib.$fShowValue4
                             (case b1 of wild1 {
                                GHC.Types.False
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool4 x
                                GHC.Types.True
                                -> GHC.Base.++ @ GHC.Types.Char GHC.Show.$fShowBool2 x })
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Lib.$fShowValue4
                                (case b1 of wild1 {
                                   GHC.Types.False
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool4
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)
                                   GHC.Types.True
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.$fShowBool2
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x) })) }
                   Lib.LambdaValue b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Messages.LambdaDef ww3 ww4 ->
                          Messages.$w$cshowsPrec8 11# ww3 ww4 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Lib.$fShowValue2 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowValue2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
3257f55dbb75d2d35f04930e04fcdcb8
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Base.String a
    -> [(GHC.Base.String, a)]
    -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
e7c4293e3b50ad540a574acc35bce45b
  data CompilationException = CompilationException GHC.Base.String
332bc2a116fd048b564db270277e958d
  data DB
    = DB {publish :: Lib.PublishCallback, load :: Lib.LoadCallback}
610a936f6264730f60b7b692f5382458
  type LoadCallback =
    GHC.Base.String -> GHC.Types.IO Messages.DBMessage
6ba421080322b3af71cf188019c9aa36
  type PredefinedFunction =
    [Lib.Value]
    -> Data.Either.Either Lib.CompilationException Lib.Value
d8a3b1e4e8ae15637e2b766cfebdcf82
  type PublishCallback =
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
abd2a13f7bc23513f304cf16f51df2c8
  type role ScriptContext nominal
  newtype ScriptContext t
    = ScriptContext {runStmt :: Control.Monad.Trans.Reader.ReaderT
                                  (GHC.IORef.IORef Lib.VariableMap) GHC.Types.IO t}
2358faa938626d5ed0b0a13ffb5c6a49
  data Value
    = IntValue GHC.Types.Int
    | StringValue GHC.Base.String
    | BoolValue GHC.Types.Bool
    | LambdaValue Messages.LambdaDef
dbcc4b00e6f3adfba1abb91791a9248a
  type VariableMap = Data.Map.Internal.Map GHC.Base.String Lib.Value
fda9c0843e2759b0d1e23af3496e9cca
  executeScript ::
    Messages.Program -> Lib.DB -> GHC.Types.IO Messages.ProgramResult
  {- Arity: 3,
     Strictness: <L,1*U(1*U,1*U(1*U))><L,U(C(C1(C1(U))),C(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.executeScript1
                  `cast`
                (<Messages.Program>_R
                 ->_R <Lib.DB>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Messages.ProgramResult>_R)) -}
fdf47d4acc6446078d45c2e3143fd0e7
  executeScript1 ::
    Messages.Program
    -> Lib.DB
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Messages.ProgramResult #)
  {- Arity: 3,
     Strictness: <L,1*U(1*U,1*U(1*U))><L,U(C(C1(C1(U))),C(U))><S,U> -}
instance GHC.Base.Applicative [Lib.ScriptContext]
  = Lib.$fApplicativeScriptContext
instance GHC.Exception.Exception [Lib.CompilationException]
  = Lib.$fExceptionCompilationException
instance GHC.Base.Functor [Lib.ScriptContext]
  = Lib.$fFunctorScriptContext
instance Control.Monad.Catch.MonadCatch [Lib.ScriptContext]
  = Lib.$fMonadCatchScriptContext
instance Control.Monad.IO.Class.MonadIO [Lib.ScriptContext]
  = Lib.$fMonadIOScriptContext
instance Control.Monad.Reader.Class.MonadReader [GHC.IORef.IORef,
                                                 Lib.ScriptContext]
  = Lib.$fMonadReaderScriptContext
instance GHC.Base.Monad [Lib.ScriptContext]
  = Lib.$fMonadScriptContext
instance Control.Monad.Catch.MonadThrow [Lib.ScriptContext]
  = Lib.$fMonadThrowScriptContext
instance GHC.Show.Show [Lib.CompilationException]
  = Lib.$fShowCompilationException
instance GHC.Show.Show [Lib.Value] = Lib.$fShowValue
"SPEC/Lib $fApplicativeReaderT_$c*> @ IO _" [orphan] forall @ r
                                                            ($dApplicative :: GHC.Base.Applicative
                                                                                GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c*> @ r
"SPEC/Lib $fApplicativeReaderT_$c<* @ IO _" [orphan] forall @ r
                                                            ($dApplicative :: GHC.Base.Applicative
                                                                                GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c<* @ r
"SPEC/Lib $fApplicativeReaderT_$c<*> @ IO _" [orphan] forall @ r
                                                             ($dApplicative :: GHC.Base.Applicative
                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Lib.$fApplicativeScriptContext_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Lib $fFunctorReaderT_$c<$ @ IO _" [orphan] forall @ r
                                                        ($dFunctor :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ GHC.Types.IO
                                                   @ r
                                                   $dFunctor
  = Lib.$fFunctorScriptContext_$s$fFunctorReaderT_$c<$ @ r
"SPEC/Lib $fFunctorReaderT_$cfmap @ IO _" [orphan] forall @ r
                                                          ($dFunctor :: GHC.Base.Functor
                                                                          GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Lib.$fFunctorScriptContext_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Lib $fMonadReaderT_$c>>= @ IO _" [orphan] forall @ r
                                                       ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Lib.$fMonadScriptContext_$s$fMonadReaderT_$c>>= @ r
"SPEC/Lib $fMonadReaderT_$cfail @ IO _" [orphan] forall @ r
                                                        ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Lib.$fMonadScriptContext_$s$fMonadReaderT_$cfail @ r
"SPEC/Lib fromList @ String _" [orphan] forall @ a
                                               ($dOrd :: GHC.Classes.Ord GHC.Base.String)
  Data.Map.Strict.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = Lib.$sfromList @ a
"SPEC/Lib reader @ IO _ _" [orphan] forall @ r
                                           @ a
                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.reader @ GHC.Types.IO @ r @ a $dMonad
  = Lib.$fMonadReaderScriptContext_$sreader @ r @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

